{"version":3,"sources":["serviceWorker.js","components/Rule.js","components/LeftBar.js","components/RightBar.js","components/CreateRuleDialog.js","components/Layout.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Rule","React","forwardRef","props","ref","name","handleEdit","rule","isDragging","connectDragSource","connectDropTarget","id","selectRule","selectedRule","_break","matchingRules","unsavedRules","index","theme","removeMatched","words","classes","makeStyles","listItem","cursor","transition","position","listItemText","color","palette","text","primary","secondary","textOverflow","overflow","dot","backgroundColor","top","right","width","height","borderRadius","maximize","dark","marginTop","spacing","ruleButton","paddingTop","elementRef","useRef","opacity","useImperativeHandle","getNode","current","selectRuleMemo","useCallback","handleEditMemo","useState","bg","setBg","useEffect","length","matchingRule","find","item","indexOf","setTimeout","timer","background","default","style","ListItem","onClick","selected","className","ListItemText","ListItemIcon","Tooltip","title","I18n","t","clsx","IconButton","Box","ItemTypes","DropTarget","hover","monitor","component","node","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","hoverClientY","getClientOffset","y","moveRule","connect","dropTarget","DragSource","beginDrag","dragSource","CustomTooltip","withStyles","tooltip","fontSize","LeftBar","Component","textCommand","isSettingsDialogOpen","isConfirmRemoveDialogOpen","isSearchActive","filteredRules","searchedValue","localSettings","language","processorId","processorTimeout","sayitInstance","getDefaultSettings","this","setState","settings","handleTextCommand","event","target","value","handleSubmit","iconPlay","key","matched","findMatchingRules","map","number","handleOpenSettingsModal","handleDialogSelectIdSubmit","selectedSettingsName","handleDelete","removeRule","handleCloseConfirmRemoveDialog","handleSearch","matchedRules","rules","filter","toLowerCase","includes","toggleSearch","a","createSettingsModal","handleClose","isSettingsWasNotSaved","handleChange","Dialog","open","onClose","fullWidth","onExited","DialogTitle","Typography","variant","align","DialogContent","noValidate","autoComplete","FormControl","root","settingsItem","InputLabel","Select","width100","onChange","MenuItem","Children","toArray","option","TextField","label","showDialogSelectId","helperText","e","DialogActions","Button","saveSettings","mainIcons","icon","handler","handleOpen","createIcons","iconsData","componentDidUpdate","prevProps","prevState","findMatched","JSON","parse","stringify","renderSelectIdDialog","socket","onOk","renderConfirmDialog","render","isMdScreen","closeDrawer","settingsDialog","renderedRules","additionalIcons","push","main","Toolbar","toolbar","search","InputProps","endAdornment","undefined","autoFocus","closeBtn","DndProvider","backend","HTML5Backend","List","list","test","size","onKeyDown","inputProps","padding","play","boxSizing","minWidth","overflowX","overflowY","header","minHeight","border","divider","textInput","breakpoints","down","settingsTitle","maxWidth","marginBottom","settingsContent","flexDirection","display","common","white","flexBasis","RightBar","PureComponent","defaultState","editable","args","ack","localRule","showDialog","createConfirmModalActions","updateConfig","pendingSelectedRuleId","clearStateOnConfirmModalUnmount","revertChangesFromConfig","cancelSavingChanges","closeConfirmDialog","dontSaveAndGo","handleSaveAndGo","submitForm","saveAndGoBtn","btnDanger","createSaveSettingsForm","handleSave","isLocalStateWasUpdated","revertChanges","emptyButtons","confirmChanges","createInput","type","note","disabled","keywords","onSwitchChange","textField","switchControl","Switch","checked","createOptionsData","handlers","keywordsText","breakOnSwitch","handleSetDialogClick","bind","param1OnSwitch","param2Text","confirmText","confirmOnSwitch","createInputHandlers","_this","arg","unsavedRule","isEqual","wasChangedGlobally","removeUnsavedRule","setUnsavedRule","lang","forceUpdate","componentDidMount","isLeftBarHidden","toggleLeftBar","mt","box","Paper","container","mx","mainTitle","justifyContent","mb","row","noRulesText","toggleIcon","margin","alignItems","textAlign","marginLeft","marginRight","left","light","CreateRuleDialog","defaultRule","isDisabled","setRuleOnMount","isEdit","cleanState","finishEdit","getAvailableOptions","commands","currentRules","uniqueOptions","unique","concat","getUniqueName","ruleName","matchingNames","slice","isUnique","lastChar","createForm","FormGroup","shrink","isError","labelId","select","existingNames","setDialogContent","handleSubmitOnCreate","handleSubmitOnEdit","onSubmitHandler","componentWillUnmount","isOpen","onEnter","Layout","constructor","super","getSelectedLanguageCommands","getLanguage","Object","entries","command","rest","template","sourceRule","_","sortRules","splice","uuid","shortDataRule","isUnsavedChanges","values","updateCurrentRules","isLeftBarOpen","editableRule","updatedRule","updatedRuleOptions","deleteRuleFromConfig","readConfig","newConfig","saveConfig","updatedRules","currentSelectedRule","ids","updatedCurrentRules","getRuleShortData","getDataFromConfig","rulesFullData","obj","localStorage","isRuleWasUpdatedGlobally","localeSettings","closeModal","isLargeScreen","isWidthUp","isSmScreen","isMobileScreen","setItem","menuSize","parseFloat","rulesWithId","en","setLanguage","renderModalDialog","Fragment","customClassName","hidden","opened","layout","primaryMinSize","primaryIndex","secondaryMinSize","onSecondaryPaneSizeChange","onDragEnd","toString","secondaryInitialSize","Drawer","anchor","withWidth","App","GenericApp","translations","require","de","ru","pt","nl","fr","it","es","pl","setTranslations","userLanguage","substring","onConnectionReady","newState","getSystemConfig","systemConfig","ready","showError","getObject","adapterName","instance","native","setObject","renderError","themeType","logo","themeName","Utils","getThemeName","version","host","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","onThemeChange","_theme","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0eec7ab5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React, {\r\n    useRef,\r\n    useImperativeHandle,\r\n    useCallback,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { DropTarget, DragSource } from 'react-dnd';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport MaximizeIcon from '@material-ui/icons/Maximize';\r\n\r\nconst Rule = React.forwardRef((props, ref) => {\r\n    const {\r\n        name,\r\n        handleEdit,\r\n        rule,\r\n        isDragging,\r\n        connectDragSource,\r\n        connectDropTarget,\r\n        id,\r\n        selectRule,\r\n        selectedRule,\r\n        _break,\r\n        matchingRules,\r\n        unsavedRules,\r\n        index,\r\n        theme,\r\n        removeMatched,\r\n        words,\r\n    } = props;\r\n\r\n    const classes = makeStyles({\r\n        listItem: {\r\n            cursor: 'pointer',\r\n            transition: 'background-color 0.3s linear',\r\n            position: 'relative',\r\n        },\r\n        listItemText: {\r\n            '& span': {\r\n                color: theme.palette.text.primary,\r\n            },\r\n            '& p': {\r\n                color: theme.palette.text.secondary,\r\n                textOverflow: 'ellipsis',\r\n                overflow: 'hidden',\r\n            },\r\n        },\r\n        dot: {\r\n            position: 'absolute',\r\n            backgroundColor: 'red',\r\n            top: 5,\r\n            right: 15,\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: '50%',\r\n        },\r\n        maximize: {\r\n            color: theme.palette.error?.dark,\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        ruleButton: {\r\n            paddingTop: theme.spacing(1.5),\r\n        }\r\n    })();\r\n\r\n    const elementRef = useRef(null);\r\n    connectDragSource(elementRef);\r\n    connectDropTarget(elementRef);\r\n    const opacity = isDragging ? 0 : 1;\r\n    useImperativeHandle(ref, () => ({\r\n        getNode: () => elementRef.current,\r\n    }));\r\n\r\n    const selectRuleMemo = useCallback(() => selectRule(id), [id, selectRule]);\r\n    const handleEditMemo = useCallback(() => handleEdit(id), [id, handleEdit]);\r\n\r\n    const [bg, setBg] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (matchingRules.length) {\r\n            const matchingRule = matchingRules.find(item => item.indexOf === index);\r\n            if (matchingRule) {\r\n                setTimeout(() => setBg(theme?.palette?.secondary.dark), matchingRule.timer);\r\n                setTimeout(() => {\r\n                    setBg(selectedRule.id === id ? theme?.palette?.background?.default : '');\r\n                    if (_break || index === matchingRules[matchingRules.length - 1].indexOf) removeMatched();\r\n                }, 1500 * (matchingRule.index + 1));\r\n            } // only when matching rules have been changed\r\n        } // eslint-disable-next-line\r\n    }, [matchingRules]);\r\n\r\n    let secondary = rule !== name ? rule || '' : '';\r\n    secondary += `${secondary ? ' ' : ''}[${words}]`;\r\n    return <div\r\n        ref={elementRef}\r\n        style={{\r\n            opacity,\r\n            backgroundColor: bg,\r\n        }}>\r\n        <ListItem\r\n            onClick={selectRuleMemo}\r\n            selected={selectedRule?.id === id}\r\n            className={classes.listItem}>\r\n            <ListItemText\r\n                primary={name}\r\n                secondary={secondary}\r\n                className={classes.listItemText}\r\n            />\r\n            <ListItemIcon>\r\n                {\r\n                    _break ?\r\n                        <Tooltip title={I18n.t('Interrupt processing')}>\r\n                            <MaximizeIcon className={clsx(classes.ruleButton, classes.maximize)} />\r\n                        </Tooltip>\r\n                    :\r\n                        <Tooltip title={I18n.t('Do not interrupt processing')}><ArrowDownwardIcon className={classes.ruleButton} color=\"primary\"/></Tooltip>\r\n                }\r\n                <Tooltip title={I18n.t('Edit name or type of rule')}><IconButton onClick={handleEditMemo}><EditIcon /></IconButton></Tooltip>\r\n            </ListItemIcon>\r\n            {unsavedRules[id] && <Box className={classes.dot} />}\r\n        </ListItem>\r\n    </div>;\r\n});\r\n\r\nconst ItemTypes = {\r\n    RULE: 'rule',\r\n};\r\n\r\nexport default DropTarget(\r\n    ItemTypes.RULE,\r\n    {\r\n        hover(props, monitor, component) {\r\n            if (!component) {\r\n                return null;\r\n            }\r\n\r\n            const node = component.getNode();\r\n            if (!node) {\r\n                return null;\r\n            }\r\n            const dragIndex = monitor.getItem().index;\r\n            const hoverIndex = props.index;\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = node.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            props.moveRule(dragIndex, hoverIndex);\r\n\r\n            monitor.getItem().index = hoverIndex;\r\n        },\r\n    },\r\n    connect => ({ connectDropTarget: connect.dropTarget() })\r\n)(\r\n    DragSource(\r\n        ItemTypes.RULE,\r\n        {\r\n            beginDrag: props => ({\r\n                id: props.id,\r\n                index: props.index,\r\n            }),\r\n        },\r\n        (connect, monitor) => ({\r\n            connectDragSource: connect.dragSource(),\r\n            isDragging: monitor.isDragging(),\r\n        })\r\n    )(Rule)\r\n);\r\n\r\nRule.propTypes = {\r\n    removeRule: PropTypes.func,\r\n    name: PropTypes.string.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    isDragging: PropTypes.bool,\r\n    connectDropTarget: PropTypes.func,\r\n    connectDragTarget: PropTypes.func,\r\n    _break: PropTypes.bool.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    matchingRules: PropTypes.array,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    unsavedRules: PropTypes.object,\r\n};\r\n","import React, { Component, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\n// Material UI Components\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport List from '@material-ui/core/List';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n// icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FormatClearIcon from '@material-ui/icons/FormatClear';\r\nimport ClearIcon from '@material-ui/icons/Close';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\n\r\nimport Rule from './Rule';\r\n\r\nconst styles = theme => ({\r\n    test: {\r\n        width: '100%',\r\n        boxSizing: 'border-box',\r\n        height: 64,\r\n    },\r\n    main: {\r\n        minWidth: 330,\r\n        overflow: 'hidden',\r\n        height: '100%',\r\n    },\r\n    toolbar: {\r\n        background: theme.palette.primary.main,\r\n        position: 'relative',\r\n    },\r\n    list: {\r\n        height: 'calc(100% - 64px - 64px - 18px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'auto',\r\n    },\r\n    root: {\r\n        width: 'calc(100% - 48px)',\r\n        // '& .MuiInputLabel-outlined-70.MuiInputLabel-marginDense-66': {\r\n        //     transform: '',\r\n        // },\r\n    },\r\n    header: {\r\n        minHeight: 44,\r\n        height: 'auto',\r\n        padding: theme.spacing(1.3),\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    textInput: {\r\n        width: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n        },\r\n    },\r\n    settingsTitle: {\r\n        fontSize: '20px',\r\n        maxWidth: 145,\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    settingsContent: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            display: 'flex',\r\n        },\r\n    },\r\n    closeBtn: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        color: theme.palette.common.white,\r\n    },\r\n    search: {\r\n        flexBasis: '80%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexBasis: '70%',\r\n        },\r\n    },\r\n    settingsItem: {\r\n        marginBottom: theme.spacing(3),\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n});\r\n\r\nconst tooltipStyles = theme => ({\r\n    tooltip: {\r\n        fontSize: 14,\r\n    },\r\n});\r\n\r\nconst CustomTooltip = withStyles(tooltipStyles)(Tooltip);\r\n\r\nclass LeftBar extends Component {\r\n    state = {\r\n        textCommand: '',\r\n        matchingRules: [],\r\n        isSettingsDialogOpen: false,\r\n        isConfirmRemoveDialogOpen: false,\r\n        isSearchActive: false,\r\n        filteredRules: [],\r\n        searchedValue: '',\r\n        localSettings: {\r\n            language: '',\r\n            processorId: '',\r\n            processorTimeout: 1000,\r\n            sayitInstance: '',\r\n        },\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.settings !== prevProps.settings && this.props.settings) {\r\n            this.getDefaultSettings();\r\n        }\r\n    }\r\n\r\n    getDefaultSettings = () => {\r\n        this.setState({\r\n            localSettings: {\r\n                ...this.props.settings,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleTextCommand = event => {\r\n        this.setState({\r\n            textCommand: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event, iconPlay) => {\r\n        if (event.key === 'Enter' || iconPlay) {\r\n            const matched = this.findMatchingRules();\r\n            this.setState({\r\n                matchingRules: matched.map((number, index) => ({\r\n                    indexOf: number,\r\n                    timer: index * 1500,\r\n                    index,\r\n                })),\r\n            });\r\n        }\r\n    };\r\n\r\n    removeMatched = () => {\r\n        this.setState({\r\n            matchingRules: [],\r\n        });\r\n    };\r\n\r\n    findMatchingRules() {\r\n        const text = this.state.textCommand;\r\n        return text ? window.findMatched(text, JSON.parse(JSON.stringify(this.props.rules))) : [];\r\n    }\r\n\r\n    handleOpenSettingsModal = () => {\r\n        this.setState({\r\n            isSettingsDialogOpen: true,\r\n        });\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = (selected, selectedSettingsName) => {\r\n        this.setState({\r\n            localSettings: {\r\n                ...this.state.localSettings,\r\n                [selectedSettingsName]: selected,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleDelete = () => {\r\n        this.props.removeRule(this.props.selectedRule.id);\r\n        this.handleCloseConfirmRemoveDialog();\r\n    };\r\n\r\n    handleCloseConfirmRemoveDialog = () => {\r\n        this.setState({\r\n            isConfirmRemoveDialogOpen: false,\r\n        });\r\n    };\r\n\r\n    handleSearch = event => {\r\n        const matchedRules = this.props.rules.filter(rule =>\r\n            rule.name.toLowerCase().includes(event.target.value.toLowerCase())\r\n        );\r\n        this.setState({\r\n            filteredRules: matchedRules || [],\r\n            searchedValue: event.target.value,\r\n        });\r\n    };\r\n\r\n    toggleSearch = async () => {\r\n        await this.setState({\r\n            isSearchActive: !this.state.isSearchActive,\r\n        });\r\n    };\r\n\r\n    createSettingsModal = () => {\r\n        const { t } = I18n;\r\n        const options = ['en', 'de', 'ru'];\r\n        const { classes } = this.props;\r\n\r\n        const handleClose = () => {\r\n            this.setState({\r\n                isSettingsDialogOpen: false,\r\n                isSettingsWasNotSaved: true,\r\n            });\r\n        };\r\n\r\n        const submitSettings = () => {\r\n            this.props.saveSettings(this.state.localSettings, handleClose);\r\n        };\r\n\r\n        const handleChange = (event, name) => {\r\n            let value = event.target.value;\r\n            if (name === 'language' && value === 'system') {\r\n                value = '';\r\n            }\r\n\r\n            this.setState({\r\n                localSettings: {\r\n                    ...this.state.localSettings,\r\n                    [name]: value,\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <Dialog\r\n                open={this.state.isSettingsDialogOpen}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                onExited={this.getDefaultSettings}>\r\n                <DialogTitle>\r\n                    <Typography variant=\"h4\" component=\"span\" align=\"center\">\r\n                        {t('Settings')}\r\n                    </Typography>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">{t('Language')}</InputLabel>\r\n                            <Select\r\n                                classes={{ root: classes.width100 }}\r\n                                onChange={event => handleChange(event, 'language')}\r\n                                value={\r\n                                    !this.state.localSettings.language\r\n                                        ? 'system'\r\n                                        : this.state.localSettings.language\r\n                                }>\r\n                                <MenuItem value=\"system\">{t('System')}</MenuItem>\r\n                                {Children.toArray(\r\n                                    options.map(option => (\r\n                                        <MenuItem value={option}>{t('lang_' + option)}</MenuItem>\r\n                                    ))\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t('Answer in id')}\r\n                                value={this.state.localSettings.sayitInstance}\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        showDialogSelectId: true,\r\n                                        selectedSettingsName: 'sayitInstance',\r\n                                    })\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t(`Processor's id`)}\r\n                                value={this.state.localSettings.processorId}\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        showDialogSelectId: true,\r\n                                        selectedSettingsName: 'processorId',\r\n                                    })\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t('Timeout for processor')}\r\n                                helperText={t('ms')}\r\n                                value={this.state.localSettings.processorTimeout}\r\n                                onChange={e => handleChange(e, 'processorTimeout')}\r\n                            />\r\n                        </FormControl>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={submitSettings}>Ok</Button>\r\n                    <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    mainIcons = [\r\n        {\r\n            icon: <AddIcon />,\r\n            handler: () => this.props.handleOpen(),\r\n            tooltip: I18n.t('Create rule'),\r\n        },\r\n        {\r\n            icon: <SettingsIcon />,\r\n            handler: () => this.handleOpenSettingsModal(),\r\n            tooltip: I18n.t('Settings'),\r\n        },\r\n        {\r\n            icon: <CachedIcon />,\r\n            handler: () => console.log('refresh'),\r\n            tooltip: I18n.t('Refresh'),\r\n        },\r\n    ];\r\n\r\n    createIcons = iconsData =>\r\n        iconsData.map(({ icon, handler, tooltip }, index) => (\r\n            <CustomTooltip title={tooltip} key={index}>\r\n                <IconButton onClick={handler}>{icon}</IconButton>\r\n            </CustomTooltip>\r\n        ));\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialogSelectId ? (\r\n            <DialogSelectID\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={() => this.setState({ showDialogSelectId: false })}\r\n                onOk={selected =>\r\n                    this.handleDialogSelectIdSubmit(selected, this.state.selectedSettingsName)\r\n                }\r\n            />\r\n        ) : null;\r\n    }\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.isConfirmRemoveDialogOpen ? (\r\n            <Dialog\r\n                open={this.state.isConfirmRemoveDialogOpen}\r\n                onClose={this.handleCloseConfirmRemoveDialog}\r\n                fullWidth>\r\n                <DialogTitle>{I18n.t('Are you sure?')}</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant=\"h5\" component=\"h5\">\r\n                        {I18n.t('You want to delete') + ': '}\r\n                        <strong>{this.props.selectedRule.name}</strong>\r\n                    </Typography>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleDelete}>{I18n.t('Ok')}</Button>\r\n                        <Button onClick={this.handleCloseConfirmRemoveDialog} color=\"primary\">\r\n                            {I18n.t('Cancel')}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        ) : null;\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedRule,\r\n            moveRule,\r\n            handleEdit,\r\n            rules,\r\n            selectRule,\r\n            classes,\r\n            isMdScreen,\r\n            closeDrawer,\r\n        } = this.props;\r\n        const { filteredRules, isSearchActive, searchedValue } = this.state;\r\n        const settingsDialog = this.createSettingsModal();\r\n        const renderedRules = isSearchActive && searchedValue.length ? filteredRules : rules;\r\n        const additionalIcons = [];\r\n\r\n        selectedRule &&\r\n            selectedRule.id &&\r\n            additionalIcons.push({\r\n                icon: !isSearchActive && <DeleteIcon />,\r\n                handler: () =>\r\n                    this.setState({\r\n                        isConfirmRemoveDialogOpen: true,\r\n                    }),\r\n                tooltip: I18n.t('Remove rule'),\r\n                key: 'delete',\r\n            });\r\n        rules.length &&\r\n            additionalIcons.push({\r\n                icon: isSearchActive ? <FormatClearIcon /> : <SearchIcon />,\r\n                handler: () => this.toggleSearch(),\r\n                tooltip: I18n.t('Search rule'),\r\n                key: 'search',\r\n            });\r\n\r\n        return (\r\n            <Box className={classes.main}>\r\n                <Toolbar position=\"static\" classes={{ root: classes.toolbar }}>\r\n                    {isSearchActive ? (\r\n                        <TextField\r\n                            className={classes.search}\r\n                            onChange={this.handleSearch}\r\n                            value={this.state.searchedValue}\r\n                            InputProps={{\r\n                                endAdornment: this.state.searchedValue ? (\r\n                                    <IconButton\r\n                                        onClick={() => this.setState({ searchedValue: '' })}>\r\n                                        <ClearIcon />\r\n                                    </IconButton>\r\n                                ) : undefined,\r\n                            }}\r\n                            autoFocus\r\n                        />\r\n                    ) : (\r\n                        <div>{this.createIcons(this.mainIcons)}</div>\r\n                    )}\r\n                    <div>{this.createIcons(additionalIcons)}</div>\r\n                    {!isMdScreen && (\r\n                        <IconButton className={classes.closeBtn} onClick={closeDrawer}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    )}\r\n                </Toolbar>\r\n\r\n                <DndProvider backend={HTML5Backend}>\r\n                    <List className={classes.list}>\r\n                        {renderedRules.map((rule, index) => (\r\n                            <Rule\r\n                                theme={this.props.theme}\r\n                                handleEdit={handleEdit}\r\n                                {...rule}\r\n                                index={index}\r\n                                moveRule={moveRule}\r\n                                key={rule.id}\r\n                                selectRule={selectRule}\r\n                                selectedRule={selectedRule}\r\n                                matchingRules={this.state.matchingRules}\r\n                                unsavedRules={this.props.unsavedRules}\r\n                                removeMatched={this.removeMatched}\r\n                            />\r\n                        ))}\r\n                    </List>\r\n                </DndProvider>\r\n\r\n                <Toolbar className={classes.test} variant=\"dense\">\r\n                    <TextField\r\n                        onChange={this.handleTextCommand}\r\n                        label={I18n.t('Test phrase')}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        className={clsx('outlined-basic', classes.root)}\r\n                        onKeyDown={this.handleSubmit}\r\n                        value={this.state.textCommand}\r\n                        inputProps={{\r\n                            style: {\r\n                                padding: '10px 10px',\r\n                            },\r\n                        }}\r\n                        InputProps={{\r\n                            endAdornment: this.state.textCommand ? (\r\n                                <IconButton onClick={() => this.setState({ textCommand: '' })}>\r\n                                    <ClearIcon />\r\n                                </IconButton>\r\n                            ) : undefined,\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        variant=\"outlined\"\r\n                        onClick={event => this.handleSubmit(event, true)}>\r\n                        <PlayArrowIcon className={classes.play} />\r\n                    </IconButton>\r\n                </Toolbar>\r\n\r\n                {settingsDialog}\r\n\r\n                {this.renderConfirmDialog()}\r\n\r\n                {this.renderSelectIdDialog()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(LeftBar);\r\n\r\nLeftBar.propTypes = {\r\n    handleOpen: PropTypes.func.isRequired,\r\n    rules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n        })\r\n    ),\r\n    moveRule: PropTypes.func.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    removeRule: PropTypes.func,\r\n    handleEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    settings: PropTypes.object,\r\n    socket: PropTypes.object.isRequired,\r\n    saveSettings: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object,\r\n    toggleLeftBar: PropTypes.func,\r\n    isMdScreen: PropTypes.bool.isRequired,\r\n    closeDrawer: PropTypes.func,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport { TextField, Switch, Typography, withStyles, Box } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    box: {\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-around',\r\n        padding: theme.spacing(2),\r\n        width: 'calc(100% - ' + theme.spacing(4) + 'px)',\r\n        position: 'relative',\r\n        '& .outlined-basic': {\r\n            padding: '12px 10px',\r\n            //border: `2px solid ${theme.palette.grey[700]}`,\r\n        },\r\n        [theme.breakpoints.down('md')]: {\r\n            '& .outlined-basic': {\r\n                padding: 0,\r\n            },\r\n        },\r\n    },\r\n    container: {\r\n        width: '70%',\r\n        // minWidth: 340,\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.down('md')]: {\r\n            width: '90%',\r\n        },\r\n        [theme.breakpoints.down('lg')]: {\r\n            width: '80%',\r\n        },\r\n    },\r\n    textField: {\r\n        flexBasis: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    },\r\n    submitForm: {\r\n        flexDirection: 'row',\r\n        margin: '10px auto 20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%',\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexDirection: 'column',\r\n        },\r\n    },\r\n    mainTitle: {\r\n        marginBottom: '30px',\r\n    },\r\n    title: {\r\n        marginTop: 16,\r\n        [theme.breakpoints.down('md')]: {\r\n            maxWidth: 200,\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            maxWidth: 'none',\r\n        },\r\n    },\r\n    row: {\r\n        [theme.breakpoints.down('md')]: {\r\n            alignItems: 'center',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-start',\r\n            textAlign: 'center',\r\n        },\r\n    },\r\n    btnDanger: {\r\n        marginLeft: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginLeft: 0,\r\n            marginTop: theme.spacing(0.5),\r\n        },\r\n        //backgroundColor: theme.palette.error?.dark,\r\n    },\r\n    saveAndGoBtn: {\r\n        marginRight: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginRight: 0,\r\n            marginBottom: theme.spacing(0.5),\r\n        },\r\n    },\r\n    toggleIcon: {\r\n        position: 'absolute',\r\n        top: -15,\r\n        left: 0,\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: 20,\r\n        height: 25,\r\n        cursor: 'pointer',\r\n        padding: theme.spacing(1),\r\n        borderRadius: '0 5px 5px 0',\r\n    },\r\n    switchControl: {\r\n        paddingTop: theme.spacing(1),\r\n        flexBasis: '60%',\r\n    },\r\n    emptyButtons: {\r\n        height: 36,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 0,\r\n        },\r\n    },\r\n    noRulesText: {\r\n        fontSize: 24,\r\n        color: theme.palette.primary.light\r\n    },\r\n});\r\n\r\nclass RightBar extends PureComponent {\r\n    defaultState = {\r\n        words: I18n.t('Create Rule'),\r\n        name: I18n.t('Create Rule'),\r\n        _break: false,\r\n        editable: false,\r\n        args: [\r\n            {\r\n                default: I18n.t('Argument') + ' 1',\r\n            },\r\n            {\r\n                default: I18n.t('Argument') + ' 2',\r\n            },\r\n        ],\r\n        ack: {\r\n            name: '',\r\n            default: `${I18n.t('Confirmation text')}`,\r\n        },\r\n        id: 0,\r\n    };\r\n\r\n    state = {\r\n        localRule: null,\r\n        showDialog: false,\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if ((!props.selectedRule && state.localRule) ||\r\n            (props.selectedRule && !state.localRule) ||\r\n            (props.selectedRule?.id !== state.localRule?.id)) {\r\n            return {\r\n                localRule: {...props.selectedRule}\r\n            };\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            prevProps.selectedRule?.name !== this.props.selectedRule?.name ||\r\n            prevState.localRule?.name !== this.state.localRule?.name\r\n        ) {\r\n            if (!this.props.selectedRule || !this.props.selectedRule.name) {\r\n                this.setState({\r\n                    localRule: null,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    localRule: {\r\n                        ...this.props.selectedRule,\r\n                    },\r\n                });\r\n            }\r\n        } else if (this.state.isLocalStateWasUpdated) {\r\n            const unsavedRule = this.props.unsavedRules[this.state.localRule.id];\r\n\r\n            if (\r\n                isEqual(this.props.selectedRule, this.state.localRule) &&\r\n                !unsavedRule?.wasChangedGlobally\r\n            ) {\r\n                this.setState({\r\n                    isLocalStateWasUpdated: false,\r\n                });\r\n\r\n                if (!unsavedRule?.wasChangedGlobally) {\r\n                    this.props.removeUnsavedRule(this.state.localRule.id);\r\n                }\r\n            } else if (!unsavedRule && !this.props.pendingSelectedRuleId) {\r\n                this.props.setUnsavedRule(this.state.localRule.id);\r\n            }\r\n        } else if (\r\n            !this.state.isLocalStateWasUpdated &&\r\n            this.props.unsavedRules[this.state.localRule.id]\r\n        ) {\r\n            this.setState({\r\n                isLocalStateWasUpdated: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.pendingSelectedRuleId && this.state.isLocalStateWasUpdated) {\r\n            if (this.props.pendingSelectedRuleId === this.state.localRule.id) return;\r\n            this.setState({\r\n                confirmChanges: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.lang !== prevProps.lang) {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.localRule && this.props.selectedRule) {\r\n            this.setState({\r\n                localRule: this.props.selectedRule,\r\n            });\r\n        }\r\n    }\r\n\r\n    createConfirmModalActions = () => {\r\n        const { t } = I18n;\r\n        const {\r\n            updateConfig,\r\n            classes,\r\n            selectRule,\r\n            pendingSelectedRuleId,\r\n            clearStateOnConfirmModalUnmount,\r\n            revertChangesFromConfig,\r\n        } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const cancelSavingChanges = async () => {\r\n            await clearStateOnConfirmModalUnmount();\r\n            this.closeConfirmDialog();\r\n        };\r\n\r\n        const dontSaveAndGo = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount(localRule.id);\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        const handleSaveAndGo = async () => {\r\n            await updateConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount();\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        return (\r\n            <FormControl className={classes.submitForm}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={handleSaveAndGo}\r\n                    color=\"primary\"\r\n                    className={classes.saveAndGoBtn}>\r\n                    {t('Save and go')}\r\n                </Button>\r\n                <Button onClick={dontSaveAndGo} variant=\"contained\" color=\"secondary\">\r\n                    {t(`Don't save and go`)}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.btnDanger}\r\n                    onClick={cancelSavingChanges}>\r\n                    {t('Cancel')}\r\n                </Button>\r\n            </FormControl>\r\n        );\r\n    };\r\n\r\n    createSaveSettingsForm = () => {\r\n        const { t } = I18n;\r\n        const { updateConfig, classes, revertChangesFromConfig, selectedRule } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const handleSave = async () => {\r\n            await updateConfig(localRule);\r\n            this.setState({\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        const revertChanges = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n\r\n            await this.setState({\r\n                localRule: selectedRule,\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        if (!this.state.isLocalStateWasUpdated) {\r\n            return <div className={this.props.classes.emptyButtons} />;\r\n        } else {\r\n            return (\r\n                <FormControl className={classes.submitForm}>\r\n                    <Button onClick={handleSave} variant=\"contained\" color=\"primary\">\r\n                        {t('Save')}\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className={classes.btnDanger}\r\n                        onClick={revertChanges}>\r\n                        {t('Cancel')}\r\n                    </Button>\r\n                </FormControl>\r\n            );\r\n        }\r\n    };\r\n\r\n    closeConfirmDialog = () => {\r\n        this.setState({\r\n            isLocalStateWasUpdated: false,\r\n            confirmChanges: false,\r\n        });\r\n    };\r\n\r\n    createInput = ({\r\n        value,\r\n        label,\r\n        onChange,\r\n        type,\r\n        onClick,\r\n        note,\r\n        disabled = !this.state.localRule,\r\n        keywords,\r\n        key,\r\n        onSwitchChange,\r\n    }) => {\r\n        if ((value === undefined || value === null) && !label && !keywords) {\r\n            return;\r\n        }\r\n        const { classes } = this.props;\r\n\r\n        return type !== 'checkbox' ? (\r\n            <TextField\r\n                //label={label}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                disabled={disabled}\r\n                value={value}\r\n                helperText={note || ''}\r\n                onClick={onClick}\r\n                onChange={onChange}\r\n                key={key}\r\n                className={clsx('outlined-basic', classes.textField)}\r\n            />\r\n        ) : (\r\n            <FormControl classes={{ root: classes.switchControl }}>\r\n                <Switch\r\n                    key={key}\r\n                    onClick={onSwitchChange}\r\n                    color={'primary'}\r\n                    disabled={disabled}\r\n                    checked={!!value}\r\n                />\r\n            </FormControl>\r\n        );\r\n    };\r\n\r\n    createOptionsData = (state = this.state) => {\r\n        const {\r\n            localRule: { args, ack, editable, _break },\r\n        } = state;\r\n        const { t } = I18n;\r\n\r\n        const createInput = this.createInput;\r\n        const handlers = this.handlers;\r\n\r\n        const isKeyWordsDisabled = () => {\r\n            if (editable === undefined) {\r\n                return false;\r\n            } else if (editable === false) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        return [\r\n            {\r\n                title: t('Keywords'),\r\n                item: createInput({\r\n                    value: this.state.localRule?.words || '',\r\n                    onChange: handlers.keywordsText,\r\n                    keywords: true,\r\n                    disabled: isKeyWordsDisabled(),\r\n                    key: 'keywords',\r\n                }),\r\n                id: 1,\r\n            },\r\n            {\r\n                title: t('Interrupt processing'), //`${t('Break')}:`,\r\n                item: createInput({\r\n                    type: 'checkbox',\r\n                    value: _break,\r\n                    onSwitchChange: handlers.breakOnSwitch,\r\n                    key: 'break',\r\n                }),\r\n                id: 2,\r\n            },\r\n            {\r\n                title: args && args[0]?.name, //`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[0]?.default,\r\n                    label: args && args[0]?.name,\r\n                    type: args && args[0]?.type,\r\n                    onClick: this.handleSetDialogClick.bind(this, args && args[0]),\r\n                    onSwitchChange: handlers.param1OnSwitch,\r\n                    key: 'Param1',\r\n                }),\r\n                id: 3,\r\n            },\r\n            {\r\n                title: args && args[1]?.name, //`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[1]?.default,\r\n                    label: args && args[1]?.name,\r\n                    onChange: handlers.param2Text,\r\n                    key: 'Param2',\r\n                }),\r\n                id: 4,\r\n            },\r\n            {\r\n                title: t('Confirmation text'),\r\n                item: createInput({\r\n                    value: ack && ack.default,\r\n                    label: ack && ack.name,\r\n                    note: t(\r\n                        'You can use %s, that will be replaced with current value of state. %u will be replaced by unit'\r\n                    ),\r\n                    type: ack && ack.type,\r\n                    key: 'confirmationText',\r\n                    onChange: handlers.confirmText,\r\n                    onSwitchChange: handlers.confirmOnSwitch,\r\n                }),\r\n                id: 5,\r\n            },\r\n        ];\r\n    };\r\n\r\n    createInputHandlers = () => {\r\n        const _this = this;\r\n\r\n        return {\r\n            keywordsText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        words: event.target.value,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param2Text(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            index > 0\r\n                                ? {\r\n                                      ...arg,\r\n                                      default: event.target.value,\r\n                                  }\r\n                                : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: event.target.value,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param1OnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            !index ? { ...arg, default: !arg.default ? true : !arg.default } : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmOnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: !_this.state.localRule.ack.default,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            async breakOnSwitch() {\r\n                await _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        _break: !_this.state.localRule._break,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n        };\r\n    };\r\n\r\n    handlers = this.createInputHandlers();\r\n\r\n    handleSetDialogClick = arg => {\r\n        if (arg.type === 'id') {\r\n            this.setState({\r\n                showDialog: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = selected => {\r\n        this.setState({\r\n            localRule: {\r\n                ...this.state.localRule,\r\n                args: this.state.localRule.args.map((arg, index) =>\r\n                    !index\r\n                        ? {\r\n                              ...arg,\r\n                              default: selected,\r\n                          }\r\n                        : arg\r\n                ),\r\n            },\r\n            isLocalStateWasUpdated: true,\r\n        });\r\n    };\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.confirmChanges ? (\r\n            <Dialog fullWidth open={this.state.confirmChanges} maxWidth={'md'}>\r\n                <DialogTitle>\r\n                    {I18n.t('Please confirm or cancel changes before leaving')}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {I18n.t('You have changed rule') + ': '}{' '}\r\n                        <strong>{this.state.localRule.name}</strong>\r\n                    </Typography>\r\n                    <DialogActions>{this.createConfirmModalActions()}</DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        ) : null;\r\n    }\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? (\r\n            <DialogSelectID\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={id => {\r\n                    console.log(id);\r\n                    this.setState({ showDialog: false });\r\n                }}\r\n                onOk={this.handleDialogSelectIdSubmit}\r\n            />\r\n        ) : null;\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            localRule,\r\n            isLocalStateWasUpdated,\r\n        } = this.state;\r\n        const { classes, isLeftBarHidden, toggleLeftBar } = this.props;\r\n        const name = localRule ? localRule.name : '';\r\n\r\n        if (!this.props.selectedRule) {\r\n            return null;\r\n        }\r\n\r\n\r\n        return (\r\n            <Box mt=\"30px\" className={classes.box} key={this.props.selectedRule ? this.props.selectedRule.id : 'emptyLeft'}>\r\n                {localRule ?\r\n                    <Paper className={classes.container} mx=\"auto\">\r\n                        <Typography\r\n                            variant=\"h4\"\r\n                            align=\"center\"\r\n                            className={!isLocalStateWasUpdated ? classes.mainTitle : ''}>\r\n                            {name}\r\n                        </Typography>\r\n\r\n                        {this.createSaveSettingsForm()}\r\n\r\n                        {this.createOptionsData().map(({title, item, id}) => {\r\n                            if (!item) return null;\r\n                            return (\r\n                                <Box\r\n                                    display=\"flex\"\r\n                                    justifyContent=\"space-between\"\r\n                                    mb=\"10px\"\r\n                                    key={id}\r\n                                    className={classes.row}>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        component=\"h6\"\r\n                                        align=\"left\"\r\n                                        className={classes.title}>\r\n                                        {title ? title + ':' : ''}\r\n                                    </Typography>\r\n                                    {item}\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </Paper>\r\n                    :\r\n                    <div className={classes.noRulesText}>{I18n.t('Create a new rule with a \"+\" on the left')}</div>\r\n                }\r\n\r\n                <Box className={classes.toggleIcon} onClick={toggleLeftBar}>\r\n                    {isLeftBarHidden || !this.props.isMdScreen ? <MenuIcon /> : <ArrowBackIcon />}\r\n                </Box>\r\n\r\n                {this.renderSelectIdDialog()}\r\n                {this.renderConfirmDialog()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RightBar);\r\n\r\nRightBar.propTypes = {\r\n    selectedRule: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        id: PropTypes.string,\r\n        rule: PropTypes.string,\r\n        ack: PropTypes.shape({\r\n            default: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n        }),\r\n        arg: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n                type: PropTypes.string,\r\n                default: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\r\n            })\r\n        ),\r\n        words: PropTypes.string,\r\n    }).isRequired,\r\n    socket: PropTypes.object.isRequired,\r\n    updateConfig: PropTypes.func.isRequired,\r\n    revertChangesFromConfig: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    pendingSelectedRuleId: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n    clearStateOnConfirmModalUnmount: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object.isRequired,\r\n    setUnsavedRule: PropTypes.func.isRequired,\r\n    removeUnsavedRule: PropTypes.func.isRequired,\r\n    toggleLeftBar: PropTypes.func.isRequired,\r\n    isLeftBarHidden: PropTypes.bool,\r\n    isMdScreen: PropTypes.bool.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { DialogActions, Button, Select, TextField, MenuItem, withStyles } from '@material-ui/core';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    select: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2.5),\r\n    },\r\n    TextField: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n});\r\n\r\nclass CreateRuleDialog extends Component {\r\n    defaultRule = {\r\n        rule: I18n.t('Select rule'),\r\n        name: I18n.t('New rule'),\r\n        id: '',\r\n    };\r\n\r\n    state = {\r\n        localRule: this.defaultRule,\r\n        isDisabled: true,\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.cleanState();\r\n    }\r\n\r\n    setRuleOnMount = () => {\r\n        const { isEdit, selectedRule } = this.props;\r\n        if (isEdit) {\r\n            this.setState({\r\n                localRule: selectedRule,\r\n            });\r\n        }\r\n    };\r\n\r\n    cleanState = () => {\r\n        if (this.props.isEdit) {\r\n            this.props.finishEdit(this.state.localRule);\r\n        }\r\n        this.setState({\r\n            localRule: this.defaultRule,\r\n        });\r\n    };\r\n\r\n    getAvailableOptions = () => {\r\n        const { commands, currentRules, selectedRule, isEdit } = this.props;\r\n\r\n        const uniqueOptions = commands?.filter(\r\n            option => !(option.unique && currentRules.find(item => item?.rule === option.rule))\r\n        );\r\n\r\n        return selectedRule?.unique && isEdit ? uniqueOptions.concat(selectedRule) : uniqueOptions;\r\n    };\r\n\r\n    getUniqueName = ruleName => {\r\n        const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n        const matchingNames = existingNames.filter(\r\n            name => name.slice(0, name.length - 2) === ruleName\r\n        );\r\n        const isUnique = this.props.commands.find(\r\n            ({ rule, unique }) => rule === ruleName && unique\r\n        );\r\n\r\n        if (matchingNames.length) {\r\n            let name = matchingNames[matchingNames.length - 1];\r\n            let lastChar = name.slice(name.length - 1);\r\n\r\n            return name.slice(0, name.length - 1) + ++lastChar;\r\n        }\r\n\r\n        return isUnique ? ruleName : `${ruleName} 1`;\r\n    };\r\n\r\n    createForm = () => {\r\n        const { localRule } = this.state;\r\n        const { classes } = this.props;\r\n        const commands = this.getAvailableOptions();\r\n\r\n        const handleSelectChange = event =>\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    rule: event.target.value,\r\n                    name: this.getUniqueName(event.target.value),\r\n                    isError: '',\r\n                },\r\n            });\r\n\r\n        const handleInputChange = event => {\r\n            const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    name: event.target.value,\r\n                    isError: existingNames.includes(event.target.value)\r\n                        ? `${I18n.t('Name already exist')}`\r\n                        : '',\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <FormGroup>\r\n                <FormControl fullWidth>\r\n                    <InputLabel shrink id=\"rule\">\r\n                        {I18n.t('Rule')}\r\n                    </InputLabel>\r\n                    <Select\r\n                        onChange={handleSelectChange}\r\n                        value={localRule.rule}\r\n                        labelId={'rule'}\r\n                        className={classes.select}>\r\n                        {commands?.map(option => (\r\n                            <MenuItem key={option.rule} value={option.rule}>\r\n                                {option.rule}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label={this.state.localRule.isError || I18n.t('Name')}\r\n                    value={localRule.name}\r\n                    onChange={handleInputChange}\r\n                    error={!!this.state.localRule.isError}\r\n                    className={classes.TextField}/>\r\n            </FormGroup>\r\n        );\r\n    };\r\n\r\n    setDialogContent = () => {\r\n        const { handleClose, handleSubmitOnCreate, handleSubmitOnEdit, isEdit } = this.props;\r\n        const onSubmitHandler = !isEdit ? handleSubmitOnCreate : handleSubmitOnEdit;\r\n        return (\r\n            <DialogContent>\r\n                {this.createForm()}\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={onSubmitHandler.bind(\r\n                            this,\r\n                            this.state.localRule,\r\n                            this.state.localRule.isError\r\n                        )}\r\n                        disabled={!this.state.localRule.name || !this.state.localRule.rule || (this.state.localRule.name === this.defaultRule.name && this.state.localRule.rule === this.defaultRule.rule) ||\r\n                        (this.state.localRule.name === this.props.selectedRule?.name && this.state.localRule.rule === this.props.selectedRule?.rule)}>\r\n                        { I18n.t('Ok') }\r\n                    </Button>\r\n                    <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                </DialogActions>\r\n            </DialogContent>\r\n        );\r\n    };\r\n    render() {\r\n        return (\r\n            <Dialog\r\n                open={this.props.isOpen}\r\n                onClose={this.props.handleClose}\r\n                onExited={this.cleanState}\r\n                onEnter={this.setRuleOnMount}\r\n                fullWidth>\r\n                <DialogTitle>\r\n                    {I18n.t(!this.props.isEdit ? 'Create new rule' : 'Edit rule')}\r\n                </DialogTitle>\r\n                {this.setDialogContent()}\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(CreateRuleDialog);\r\n\r\nCreateRuleDialog.propTypes = {\r\n    handleClose: PropTypes.func.isRequired,\r\n    handleSubmitOnCreate: PropTypes.func.isRequired,\r\n    handleSubmitOnEdit: PropTypes.func.isRequired,\r\n    isEdit: PropTypes.bool.isRequired,\r\n    commands: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool.isRequired,\r\n        }).isRequired\r\n    ),\r\n    isOpen: PropTypes.bool.isRequired,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        rule: PropTypes.string.isRequired,\r\n        unique: PropTypes.bool,\r\n    }),\r\n    currentRules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool,\r\n        })\r\n    ).isRequired,\r\n    finishEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\r\nimport 'react-splitter-layout/lib/index.css';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport LeftBar from './LeftBar';\r\nimport RightBar from './RightBar';\r\nimport CreateRuleDialog from './CreateRuleDialog';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    layout: {\r\n        '& .layout-pane:first': {\r\n            overflow: 'hidden',\r\n        },\r\n    },\r\n    hidden: {\r\n        '& .layout-pane:first-child': {\r\n            width: '0 !important',\r\n        },\r\n        background: theme.palette.background.default,\r\n    },\r\n    opened: {\r\n        '& .layout-pane-primary': {\r\n            width: '',\r\n        },\r\n        overflow: 'hidden',\r\n        background: theme.palette.background.default,\r\n    },\r\n    noRulesText: {\r\n        fontSize: 24,\r\n        color: theme.palette.primary.light,\r\n        textAlign: 'center',\r\n        paddingTop: theme.spacing(2),\r\n    },\r\n});\r\n\r\nclass Layout extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.menuSize = parseFloat(window.localStorage.getItem('App.menuSize')) || 350;\r\n        this.state = {\r\n            currentRules: [],\r\n            isOpen: false,\r\n            isEdit: false,\r\n            selectedRule: null,\r\n            unsavedRules: {},\r\n            isLeftBarOpen: window.localStorage.getItem('App.menuHidden') === 'true',\r\n        };\r\n        this.commands = this.getSelectedLanguageCommands();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataFromConfig()\r\n            .then(({ rules, ...settings }) => {\r\n                const rulesWithId = rules.map(rule =>\r\n                    !rule.id || !rule.name\r\n                        ? {\r\n                              ...rule,\r\n                              id: rule.id || uuid(),\r\n                              name: rule.name || window.commands[rule.template]?.name[I18n.getLanguage()] || window.commands[rule.template]?.name.en,\r\n                          }\r\n                        : rule\r\n                );\r\n\r\n                if (!isEqual(rules, rulesWithId)) {\r\n                    this.props.saveConfig({ rules: rulesWithId, ...settings });\r\n                    setTimeout(() => this.setState({currentRules: rulesWithId}), 50);\r\n                }\r\n            });\r\n\r\n        if (!this.isMdScreen) {\r\n            this.setState({\r\n                isLeftBarOpen: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.settings?.language !== this.state.lang && this.state.settings?.language) {\r\n            const lang = this.state.settings?.language;\r\n            I18n.setLanguage(lang);\r\n\r\n            this.commands = this.getSelectedLanguageCommands();\r\n        }\r\n\r\n        if (\r\n            prevState.selectedRule?.id !== this.state.selectedRule?.id &&\r\n            prevState.selectedRule?.id && this.state.selectedRule\r\n        ) {\r\n            localStorage.setItem('selectedRule', this.state.selectedRule.id);\r\n        }\r\n    }\r\n\r\n    getSelectedLanguageCommands = () => {\r\n        const lang = this.state?.settings?.language || I18n.getLanguage();\r\n\r\n        return [\r\n            { rule: I18n.t('Select rule'), unique: false },\r\n            ...Object.entries(window.commands).map(item => {\r\n                const [key, command] = item;\r\n                const { name, ...rest } = command;\r\n                const obj = {\r\n                    ...rest,\r\n                    rule: command?.name[lang],\r\n                    template: key,\r\n                    unique: command.unique,\r\n                    words: command.words && command.words[lang],\r\n                    args: command.args?.map(arg => ({\r\n                        ...arg,\r\n                        name: arg.name[lang] || '',\r\n                        default: arg.default || (arg.type === 'checkbox' ? false : ''),\r\n                    })),\r\n                    ack: command.ack && {\r\n                        ...command.ack,\r\n                        name: command.ack.name[lang],\r\n                        default: !command.ack?.default\r\n                            ? command.ack?.type === 'checkbox'\r\n                                ? false\r\n                                : ''\r\n                            : command.ack.default[lang],\r\n                    },\r\n                };\r\n\r\n                return obj;\r\n            }),\r\n        ];\r\n    };\r\n\r\n    commands = this.getSelectedLanguageCommands();\r\n\r\n    moveRule = (dragIndex, hoverIndex) => {\r\n        const { currentRules } = this.state;\r\n        const sourceRule = currentRules.find((_, index) => index === hoverIndex);\r\n        const sortRules = currentRules.filter((_, index) => index !== hoverIndex);\r\n        sortRules.splice(dragIndex, 0, sourceRule);\r\n        this.setState({ currentRules: sortRules });\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.setState({\r\n            isOpen: true,\r\n        });\r\n    };\r\n    handleClose = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    handleSubmitOnCreate = (selectedRule, isError) => {\r\n        if (isError) {\r\n            return;\r\n        }\r\n\r\n        const id = uuid();\r\n        const shortDataRule = {\r\n            ...selectedRule,\r\n            id,\r\n            _break: true,\r\n        };\r\n\r\n        const rule = {\r\n            ...this.commands.find(command => command.rule === shortDataRule.rule),\r\n            ...shortDataRule,\r\n        };\r\n        const isUnsavedChanges = Object.values(this.state.unsavedRules).length;\r\n\r\n        this.setState(\r\n            {\r\n                currentRules: [...this.state.currentRules, rule],\r\n                unsavedRules: {\r\n                    ...this.state.unsavedRules,\r\n                    [id]: {\r\n                        id,\r\n                        wasChangedGlobally: true,\r\n                    },\r\n                },\r\n                selectedRule: !isUnsavedChanges ? rule : this.state.selectedRule,\r\n            },\r\n            () => {\r\n                if (isUnsavedChanges) {\r\n                    this.selectRule(rule.id);\r\n                }\r\n            }\r\n        );\r\n\r\n        this.handleClose();\r\n    };\r\n\r\n    handleSubmitOnEdit = (selectedRule, isError) => {\r\n        if (isError) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [selectedRule.id]: {\r\n                    id: selectedRule.id,\r\n                    wasChangedGlobally: true,\r\n                },\r\n            },\r\n            currentRules: this.updateCurrentRules(selectedRule),\r\n        });\r\n        this.handleClose();\r\n    };\r\n\r\n    selectRule = id => {\r\n        const { selectedRule, currentRules } = this.state;\r\n\r\n        if (selectedRule.id === id) {\r\n            // ignore\r\n        } else if (this.state.unsavedRules[selectedRule.id]) {\r\n            this.setState({\r\n                pendingSelectedRuleId: id,\r\n            });\r\n        } else {\r\n            const rule = currentRules.find(item => item.id === id);\r\n\r\n            this.setState({\r\n                selectedRule: rule,\r\n                isLeftBarOpen: !this.isMdScreen ? false : this.state.isLeftBarOpen\r\n            });\r\n        }\r\n    };\r\n\r\n    updateCurrentRules = selectedRule => {\r\n        return this.state.currentRules.map(item =>\r\n            item.id === selectedRule.id ? selectedRule : item\r\n        );\r\n    };\r\n\r\n    handleEdit = () => {\r\n        this.setState({\r\n            isEdit: true,\r\n        });\r\n        this.handleOpen();\r\n    };\r\n\r\n    finishEdit = editableRule => {\r\n        let updatedRule;\r\n\r\n        const { rule, id, name, _break, template } = editableRule;\r\n        const initialSelectedRule = this.state.selectedRule;\r\n\r\n        if (initialSelectedRule.rule !== rule) {\r\n            const updatedRuleOptions = this.commands.find(command => command.rule === rule);\r\n            updatedRule = {\r\n                ...updatedRuleOptions,\r\n                name,\r\n                rule,\r\n                id,\r\n                _break,\r\n                template,\r\n            };\r\n        } else {\r\n            updatedRule = editableRule;\r\n        }\r\n\r\n        this.setState({\r\n            isEdit: false,\r\n            selectedRule: updatedRule,\r\n        });\r\n    };\r\n\r\n    removeRule = id => {\r\n        const deleteRuleFromConfig = async () => {\r\n            const config = await this.props.readConfig();\r\n            const { rules, ...settings } = config;\r\n            const newConfig = { rules: rules.filter(rule => rule.id !== id), ...settings };\r\n            this.props.saveConfig(newConfig);\r\n        };\r\n        const updatedRules = this.state.currentRules.filter(rule => rule.id !== id);\r\n        this.setState(\r\n            {\r\n                currentRules: updatedRules,\r\n                selectedRule: updatedRules.length ? updatedRules[updatedRules.length - 1] : null,\r\n            },\r\n            deleteRuleFromConfig\r\n        );\r\n    };\r\n\r\n    updateConfig = async currentSelectedRule => {\r\n        const { [currentSelectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === currentSelectedRule.id);\r\n        const updatedCurrentRules = this.updateCurrentRules(currentSelectedRule)\r\n\r\n        let updatedRules;\r\n        if (matchingRule) {\r\n            updatedRules = rules.map(rule =>\r\n                rule.id === currentSelectedRule.id\r\n                    ? this.getRuleShortData(currentSelectedRule)\r\n                    : rule\r\n            );\r\n        } else {\r\n            updatedRules = [...rules, this.getRuleShortData(currentSelectedRule)];\r\n        }\r\n\r\n        const newConfig = { rules: updatedRules, ...settings };\r\n        await this.props.saveConfig(newConfig);\r\n\r\n        this.setState({\r\n            selectedRule: currentSelectedRule || this.state.selectedRule || null,\r\n            currentRules: updatedCurrentRules,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n    getDataFromConfig = async () => {\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n        const lang = I18n.getLanguage();\r\n\r\n        const rulesFullData = rules.map(rule => {\r\n            const obj = window.commands[rule.template];\r\n\r\n            return {\r\n                ...obj,\r\n                rule: obj?.name[lang],\r\n                ack: {\r\n                    ...obj.ack,\r\n                    default: rule.ack || (obj.ack?.type === 'checkbox' ? false : ''),\r\n                    name: obj.ack?.name[lang],\r\n                },\r\n                args: obj.args?.map((arg, index) => ({\r\n                    ...arg,\r\n                    default: rule.args[index] || (arg?.type === 'checkbox' ? false : ''),\r\n                    name: arg?.name[lang] || '',\r\n                })),\r\n                name: rule.name || obj?.name[lang],\r\n                words: rule.words,\r\n                _break: rule._break,\r\n                id: rule.id || uuid(),\r\n                template: rule.template,\r\n            };\r\n        });\r\n        await this.setState({\r\n            currentRules: rulesFullData,\r\n            selectedRule:\r\n                rulesFullData.find(rule => rule.id === localStorage.getItem('selectedRule')) ||\r\n                rulesFullData[rulesFullData.length - 1] ||\r\n                null,\r\n            settings,\r\n        });\r\n        return config;\r\n    };\r\n\r\n    revertChangesFromConfig = async selectedRule => {\r\n        const { currentRules } = this.state;\r\n        const { [selectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === selectedRule.id);\r\n        const isRuleWasUpdatedGlobally = this.state.unsavedRules[selectedRule.id]\r\n            ?.wasChangedGlobally;\r\n\r\n        let updatedRules;\r\n        if (matchingRule && isRuleWasUpdatedGlobally) {\r\n            updatedRules = currentRules.map(rule =>\r\n                rule.id === matchingRule.id\r\n                    ? {\r\n                          ...rule,\r\n                          ack: {\r\n                              ...rule.ack,\r\n                              default: matchingRule.ack || '',\r\n                          },\r\n                          args: rule.args?.map(arg => ({\r\n                              ...arg,\r\n                              default: matchingRule.arg || '',\r\n                          })),\r\n                          rule: window.commands[matchingRule.template].name[I18n.getLanguage()],\r\n                          words: matchingRule.words || '',\r\n                          name: matchingRule.name || '',\r\n                          _break: matchingRule._break || true,\r\n                      }\r\n                    : rule\r\n            );\r\n        } else if (!matchingRule) {\r\n            updatedRules = currentRules.filter(rule => rule.id !== selectedRule.id);\r\n        }\r\n\r\n        await this.setState({\r\n            currentRules: updatedRules || currentRules,\r\n            selectedRule:\r\n                (isRuleWasUpdatedGlobally\r\n                    ? updatedRules.find(rule => rule.id === selectedRule.id)\r\n                    : this.state.selectedRule) || null,\r\n            settings,\r\n            unsavedRules: ids,\r\n        });\r\n\r\n        if (this.state.currentRules.length !== currentRules.length) {\r\n            this.setState({\r\n                selectedRule: this.state.currentRules[this.state.currentRules.length - 1] || null,\r\n            });\r\n        }\r\n    };\r\n\r\n    saveSettings = async (localeSettings, closeModal) => {\r\n        const config = await this.props.readConfig();\r\n        const { rules } = config;\r\n        this.setState({\r\n            settings: localeSettings,\r\n        });\r\n        const newConfig = { rules, ...localeSettings };\r\n        await this.props.saveConfig(newConfig);\r\n        closeModal();\r\n    };\r\n\r\n    setUnsavedRule = id => {\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [id]: {\r\n                    id,\r\n                    wasChangedGlobally: false,\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    removeUnsavedRule = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n        this.setState({\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    getRuleShortData = ({ _break, template, words, ack, args, name, id }) => ({\r\n        words: words || '',\r\n        ack: ack?.default || '',\r\n        args: args?.map(arg => arg.default) || [],\r\n        _break,\r\n        template,\r\n        name,\r\n        id,\r\n    });\r\n\r\n    clearStateOnConfirmModalUnmount = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n\r\n        this.setState({\r\n            pendingSelectedRuleId: false,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    isLargeScreen = isWidthUp('lg', this.props.width);\r\n    isMdScreen = isWidthUp('md', this.props.width);\r\n    isSmScreen = isWidthUp('sm', this.props.width);\r\n    isMobileScreen = isWidthUp('xs', this.props.width);\r\n\r\n    toggleLeftBar = () => {\r\n        window.localStorage.setItem('App.menuHidden', !this.state.isLeftBarOpen);\r\n        this.setState({\r\n            isLeftBarOpen: !this.state.isLeftBarOpen,\r\n        });\r\n    };\r\n\r\n    closeDrawer = () => {\r\n        this.setState({\r\n            isLeftBarOpen: false,\r\n        });\r\n    };\r\n\r\n    renderModalDialog() {\r\n        return this.state.isOpen ?\r\n            <CreateRuleDialog\r\n                key=\"modal\"\r\n                commands={this.commands}\r\n                isEdit={this.state.isEdit}\r\n                handleSubmitOnCreate={this.handleSubmitOnCreate}\r\n                handleSubmitOnEdit={this.handleSubmitOnEdit}\r\n                handleClose={this.handleClose}\r\n                isOpen={this.state.isOpen}\r\n                currentRules={this.state.currentRules}\r\n                selectedRule={this.state.selectedRule}\r\n                finishEdit={this.finishEdit}\r\n            />\r\n         : null;\r\n    }\r\n    render() {\r\n        console.log(this.state);\r\n        const { classes } = this.props;\r\n        const { currentRules, selectedRule, isLeftBarOpen } = this.state;\r\n\r\n        if (!this.isMdScreen) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Drawer\r\n                        anchor=\"left\"\r\n                        open={this.state.isLeftBarOpen}\r\n                        onClose={this.closeDrawer}>\r\n                        <LeftBar\r\n                            handleOpen={this.handleOpen}\r\n                            rules={currentRules}\r\n                            moveRule={this.moveRule}\r\n                            handleEdit={this.handleEdit}\r\n                            selectRule={this.selectRule}\r\n                            selectedRule={selectedRule}\r\n                            removeRule={this.removeRule}\r\n                            settings={this.state.settings}\r\n                            socket={this.props.socket}\r\n                            saveSettings={this.saveSettings}\r\n                            theme={this.props.theme}\r\n                            toggleLeftBar={this.toggleLeftBar}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            isMdScreen={this.isMdScreen}\r\n                            closeDrawer={this.closeDrawer}\r\n                        />\r\n                    </Drawer>\r\n                    {this.state.settings && selectedRule ?\r\n                        <RightBar\r\n                            key={selectedRule.id}\r\n                            selectedRule={selectedRule}\r\n                            socket={this.props.socket}\r\n                            updateConfig={this.updateConfig}\r\n                            revertChangesFromConfig={this.revertChangesFromConfig}\r\n                            pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            selectRule={this.selectRule}\r\n                            clearStateOnConfirmModalUnmount={this.clearStateOnConfirmModalUnmount}\r\n                            lang={this.state.settings.language}\r\n                            setUnsavedRule={this.setUnsavedRule}\r\n                            removeUnsavedRule={this.removeUnsavedRule}\r\n                            toggleLeftBar={this.toggleLeftBar}\r\n                            isLeftBarOpen={this.state.isLeftBarOpen}\r\n                            isMdScreen={this.isMdScreen}\r\n                        />\r\n                        :\r\n                        <div className={classes.noRulesText}>{I18n.t('Create a new rule with a \"+\" on the left')}</div>}\r\n\r\n                    {this.renderModalDialog()}\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <React.Fragment>\r\n                    <SplitterLayout\r\n                        key=\"splitterLayout\"\r\n                        customClassName={clsx(\r\n                            isLeftBarOpen ? classes.hidden : classes.opened,\r\n                            classes.layout\r\n                        )}\r\n                        primaryMinSize={350}\r\n                        primaryIndex={1}\r\n                        secondaryMinSize={350}\r\n                        onSecondaryPaneSizeChange={size => (this.menuSize = parseFloat(size))}\r\n                        onDragEnd={() => {\r\n                            window.localStorage.setItem('App.menuSize', this.menuSize.toString());\r\n                        }}\r\n                        secondaryInitialSize={this.menuSize}>\r\n                        <LeftBar\r\n                            handleOpen={this.handleOpen}\r\n                            rules={currentRules}\r\n                            moveRule={this.moveRule}\r\n                            handleEdit={this.handleEdit}\r\n                            selectRule={this.selectRule}\r\n                            selectedRule={selectedRule}\r\n                            removeRule={this.removeRule}\r\n                            settings={this.state.settings}\r\n                            socket={this.props.socket}\r\n                            saveSettings={this.saveSettings}\r\n                            theme={this.props.theme}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            isMdScreen={this.isMdScreen}\r\n                        />\r\n                        {this.state.settings && selectedRule ?\r\n                            <RightBar\r\n                                selectedRule={selectedRule}\r\n                                socket={this.props.socket}\r\n                                updateCurrentRules={this.updateCurrentRules}\r\n                                updateConfig={this.updateConfig}\r\n                                revertChangesFromConfig={this.revertChangesFromConfig}\r\n                                pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                                unsavedRules={this.state.unsavedRules}\r\n                                selectRule={this.selectRule}\r\n                                clearStateOnConfirmModalUnmount={\r\n                                    this.clearStateOnConfirmModalUnmount\r\n                                }\r\n                                lang={this.state.settings.language}\r\n                                setUnsavedRule={this.setUnsavedRule}\r\n                                removeUnsavedRule={this.removeUnsavedRule}\r\n                                toggleLeftBar={this.toggleLeftBar}\r\n                                isLeftBarOpen={this.state.isLeftBarOpen}\r\n                                isMdScreen={this.isMdScreen}\r\n                            />\r\n                            :\r\n                            <div className={classes.noRulesText}>{I18n.t('Create a new rule with a \"+\" on the left')}</div>}\r\n                    </SplitterLayout>\r\n                    {this.renderModalDialog()}\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nLayout.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    readConfig: PropTypes.func.isRequired,\r\n    saveConfig: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(withWidth()(Layout));\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Layout from './components/Layout';\r\nimport isEqual from 'lodash.isequal';\r\n\r\n// Icons\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    logo: {\r\n        width: 32,\r\n        height: 32,\r\n        padding: theme.spacing(1),\r\n        display: 'inline-block',\r\n    },\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            en: require('./i18n/en'),\r\n            de: require('./i18n/de'),\r\n            ru: require('./i18n/ru'),\r\n            pt: require('./i18n/pt'),\r\n            nl: require('./i18n/nl'),\r\n            fr: require('./i18n/fr'),\r\n            it: require('./i18n/it'),\r\n            es: require('./i18n/es'),\r\n            pl: require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage(\r\n            (navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase()\r\n        );\r\n    }\r\n\r\n    onConnectionReady() {\r\n        const newState = {};\r\n\r\n        this.socket\r\n            .getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n                return this.readConfig();\r\n            })\r\n            .then(config => {\r\n                console.log(config);\r\n                this.setState({ config, ready: true });\r\n                if (config.language !== I18n.getLanguage() && config.language) {\r\n                    I18n.setLanguage(config.language);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    readConfig() {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(config => {\r\n                const native = config.native || {};\r\n                native.rules = native.rules || [];\r\n                native.sayitInstance = native.sayitInstance || '';\r\n                native.language = native.language || '';\r\n                native.processorId = native.processorId || '';\r\n                native.processorTimeout = native.processorTimeout || 1000;\r\n                return native;\r\n            });\r\n    }\r\n\r\n    saveConfig(config) {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(obj => {\r\n                if (!isEqual(obj.native, config)) {\r\n                    obj.native = config;\r\n                    return this.socket.setObject(\r\n                        'system.adapter.' + this.adapterName + '.' + this.instance,\r\n                        obj\r\n                    );\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.config) {\r\n            return (\r\n                <MuiThemeProvider theme={this.state.theme}>\r\n                    <Loader theme={this.state.themeType} />\r\n                </MuiThemeProvider>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <MuiThemeProvider theme={this.state.theme}>\r\n                <div className=\"App\">\r\n                    <Layout\r\n                        theme={this.state.theme}\r\n                        socket={this.socket}\r\n                        readConfig={this.readConfig.bind(this)}\r\n                        saveConfig={this.saveConfig.bind(this)}\r\n                    />\r\n                    {this.renderError()}\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport { version } from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'text2command';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log('iobroker.' + window.adapterName + '@' + version + ' using theme \"' + themeName + '\"');\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\n\r\n// if not local development\r\nif (window.location.host !== 'localhost:3000') {\r\n    Sentry.init({\r\n        dsn: 'https://9806f910556240219f831ecfe2ee3ad1@sentry.iobroker.net/87',\r\n        release: 'iobroker.' + window.adapterName + '@' + version,\r\n        integrations: [new SentryIntegrations.Dedupe()],\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}