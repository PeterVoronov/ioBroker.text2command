{"version":3,"sources":["serviceWorker.js","components/Rule.js","components/LeftBar.js","components/RightBar.js","components/CreateRuleDialog.js","components/Layout.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Rule","React","forwardRef","props","ref","name","handleEdit","rule","isDragging","connectDragSource","connectDropTarget","id","selectRule","selectedRule","_break","matchingRules","unsavedRules","index","theme","removeMatched","words","classes","makeStyles","listItem","cursor","transition","position","listItemText","color","palette","text","primary","secondary","textOverflow","overflow","dot","backgroundColor","top","right","width","height","borderRadius","maximize","dark","marginBottom","spacing","elementRef","useRef","opacity","useImperativeHandle","getNode","current","selectRuleMemo","useCallback","handleEditMemo","icons","icon","className","handleClick","useState","bg","setBg","useEffect","length","matchingRule","find","item","indexOf","setTimeout","timer","background","default","style","ListItem","onClick","selected","ListItemText","ListItemIcon","Children","toArray","map","IconButton","disabled","Box","ItemTypes","DropTarget","hover","monitor","component","node","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","hoverClientY","getClientOffset","y","moveRule","connect","dropTarget","DragSource","beginDrag","dragSource","CustomTooltip","withStyles","tooltip","fontSize","Tooltip","LeftBar","textCommand","isSettingsDialogOpen","isConfirmRemoveDialogOpen","isSearchActive","filteredRules","searchedValue","localSettings","language","processorId","processorTimeout","sayitInstance","getDefaultSettings","setState","settings","handleTextCommand","event","target","value","handleSubmit","iconPlay","key","matched","findMatchingRules","number","handleOpenSettingsModal","handleDialogSelectIdSubmit","selectedSettingsName","handleDelete","removeRule","handleCloseConfirmRemoveDialog","handleSearch","matchedRules","rules","filter","toLowerCase","includes","toggleSearch","a","createSettingsModal","t","I18n","handleClose","isSettingsWasNotSaved","handleChange","Dialog","open","onClose","fullWidth","onExited","DialogTitle","Typography","variant","align","DialogContent","noValidate","autoComplete","FormControl","root","settingsItem","InputLabel","Select","width100","onChange","MenuItem","option","TextField","label","showDialogSelectId","helperText","e","DialogActions","Button","saveSettings","mainIcons","handler","handleOpen","createIcons","iconsData","title","prevProps","prevState","this","findMatched","JSON","parse","stringify","socket","onOk","isMdScreen","closeDrawer","settingsDialog","renderedRules","additionalIcons","push","main","Toolbar","toolbar","search","InputProps","endAdornment","undefined","autoFocus","closeBtn","DndProvider","backend","HTML5Backend","List","list","test","size","clsx","onKeyDown","inputProps","padding","play","renderConfirmDialog","renderSelectIdDialog","Component","boxSizing","minWidth","overflowX","overflowY","transform","header","minHeight","border","divider","textInput","breakpoints","down","settingsTitle","maxWidth","settingsContent","flexDirection","display","common","white","flexBasis","RightBar","defaultState","editable","args","ack","localRule","showDialog","createConfirmModalActions","updateConfig","pendingSelectedRuleId","clearStateOnConfirmModalUnmount","revertChangesFromConfig","cancelSavingChanges","closeConfirmDialog","dontSaveAndGo","handleSaveAndGo","submitForm","saveAndGoBtn","btnDanger","createSaveSettingsForm","handleSave","isLocalStateWasUpdated","revertChanges","emptyButtons","confirmChanges","createInput","type","note","keywords","onSwitchChange","textField","switchControl","Switch","checked","createOptionsData","handlers","isKeyWordsDisabled","keywordsText","breakOnSwitch","handleSetDialogClick","bind","param1OnSwitch","param2Text","confirmText","confirmOnSwitch","createInputHandlers","_this","arg","unsavedRule","isEqual","wasChangedGlobally","removeUnsavedRule","setUnsavedRule","lang","forceUpdate","isLeftBarHidden","toggleLeftBar","mt","box","Paper","container","mx","mainTitle","justifyContent","mb","row","noRulesText","toggleIcon","PureComponent","marginTop","margin","alignItems","textAlign","marginLeft","marginRight","left","paddingTop","light","CreateRuleDialog","defaultRule","isDisabled","setRuleOnMount","isEdit","cleanState","finishEdit","getAvaliableOptions","commands","currentRules","uniqueOptions","unique","concat","getUniqueName","ruleName","matchingNames","slice","isUnique","lastChar","createForm","FormGroup","shrink","isError","labelId","select","existingNames","setDialogContent","handleSubmitOnCreate","handleSubmitOnEdit","onSubmitHandler","isOpen","onEnter","Layout","getSelectedLanguageCommands","getLanguage","Object","entries","command","rest","template","sourceRule","_","sortRules","splice","uuid","shortDataRule","isUnsavedChanges","values","updateCurrentRules","isLeftBarOpen","editableRule","updatedRule","updatedRuleOptions","deleteRuleFromConfig","readConfig","newConfig","saveConfig","updatedRules","currentSelectedRule","ids","updatedCurrentRules","getRuleShortData","getDataFromConfig","rulesFullData","obj","localStorage","isRuleWasUpdatedGlobally","localeSettings","closeModal","isLargeScreen","isWidthUp","isSmScreen","isMobileScreen","setItem","menuSize","parseFloat","rulesWithId","setLanguage","customClassName","hidden","opened","layout","primaryMinSize","primaryIndex","secondaryMinSize","onSecondaryPaneSizeChange","onDragEnd","toString","secondaryInitialSize","renderModalDialog","Drawer","anchor","withWidth","App","translations","en","require","de","ru","pt","nl","fr","it","es","pl","setTranslations","userLanguage","substring","newState","getSystemConfig","systemConfig","ready","showError","getObject","adapterName","instance","native","setObject","renderError","themeType","GenericApp","logo","themeName","Utils","getThemeName","version","host","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.404ae38f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React, {\r\n    useRef,\r\n    useImperativeHandle,\r\n    useCallback,\r\n    Children,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { ListItemIcon, IconButton, Box } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport MaximizeIcon from '@material-ui/icons/Maximize';\r\n\r\nimport { DropTarget, DragSource } from 'react-dnd';\r\n\r\nconst Rule = React.forwardRef((props, ref) => {\r\n    const {\r\n        name,\r\n        handleEdit,\r\n        rule,\r\n        isDragging,\r\n        connectDragSource,\r\n        connectDropTarget,\r\n        id,\r\n        selectRule,\r\n        selectedRule,\r\n        _break,\r\n        matchingRules,\r\n        unsavedRules,\r\n        index,\r\n        theme,\r\n        removeMatched,\r\n        words,\r\n    } = props;\r\n\r\n    const classes = makeStyles({\r\n        listItem: {\r\n            cursor: 'pointer',\r\n            transition: 'background-color 0.3s linear',\r\n            position: 'relative',\r\n        },\r\n        listItemText: {\r\n            '& span': {\r\n                color: theme.palette.text.primary,\r\n            },\r\n            '& p': {\r\n                color: theme.palette.text.secondary,\r\n                textOverflow: 'ellipsis',\r\n                overflow: 'hidden',\r\n            },\r\n        },\r\n        dot: {\r\n            position: 'absolute',\r\n            backgroundColor: 'red',\r\n            top: 5,\r\n            right: 15,\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: '50%',\r\n        },\r\n        maximize: {\r\n            color: theme.palette.error?.dark,\r\n            marginBottom: -theme.spacing(2),\r\n        },\r\n    })();\r\n\r\n    const elementRef = useRef(null);\r\n    connectDragSource(elementRef);\r\n    connectDropTarget(elementRef);\r\n    const opacity = isDragging ? 0 : 1;\r\n    useImperativeHandle(ref, () => ({\r\n        getNode: () => elementRef.current,\r\n    }));\r\n\r\n    const selectRuleMemo = useCallback(() => selectRule(id), [id, selectRule]);\r\n    const handleEditMemo = useCallback(() => handleEdit(id), [id, handleEdit]);\r\n\r\n    const icons = [\r\n        {\r\n            icon: _break ? (\r\n                <MaximizeIcon className={classes.maximize} />\r\n            ) : (\r\n                <ArrowDownwardIcon color=\"primary\" />\r\n            ),\r\n        },\r\n        { icon: <EditIcon />, handleClick: handleEditMemo },\r\n    ];\r\n\r\n    const [bg, setBg] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (matchingRules.length) {\r\n            const matchingRule = matchingRules.find(item => item.indexOf === index);\r\n            if (matchingRule) {\r\n                setTimeout(() => setBg(theme?.palette?.secondary.dark), matchingRule.timer);\r\n                setTimeout(() => {\r\n                    setBg(selectedRule.id === id ? theme?.palette?.background?.default : '');\r\n                    if (_break || index === matchingRules[matchingRules.length - 1].indexOf) removeMatched();\r\n                }, 1500 * (matchingRule.index + 1));\r\n            } // only when matching rules have been changed\r\n        } // eslint-disable-next-line\r\n    }, [matchingRules]);\r\n\r\n    let secondary = rule !== name ? rule : '';\r\n    secondary += `${secondary ? ' ' : ''}[${words}]`;\r\n    return (\r\n        <div\r\n            ref={elementRef}\r\n            style={{\r\n                opacity,\r\n                backgroundColor: bg,\r\n            }}>\r\n            <ListItem\r\n                onClick={selectRuleMemo}\r\n                selected={selectedRule?.id === id}\r\n                className={classes.listItem}>\r\n                <ListItemText\r\n                    primary={name}\r\n                    secondary={secondary}\r\n                    className={classes.listItemText}\r\n                />\r\n                <ListItemIcon>\r\n                    {Children.toArray(\r\n                        icons.map(({ icon, handleClick }, index) => (\r\n                            <IconButton disabled={!index} onClick={handleClick}>\r\n                                {icon}\r\n                            </IconButton>\r\n                        ))\r\n                    )}\r\n                </ListItemIcon>\r\n                {unsavedRules[id] && <Box className={classes.dot} />}\r\n            </ListItem>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst ItemTypes = {\r\n    RULE: 'rule',\r\n};\r\n\r\nexport default DropTarget(\r\n    ItemTypes.RULE,\r\n    {\r\n        hover(props, monitor, component) {\r\n            if (!component) return null;\r\n\r\n            const node = component.getNode();\r\n            if (!node) {\r\n                return null;\r\n            }\r\n            const dragIndex = monitor.getItem().index;\r\n            const hoverIndex = props.index;\r\n            if (dragIndex === hoverIndex) return;\r\n\r\n            const hoverBoundingRect = node.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            props.moveRule(dragIndex, hoverIndex);\r\n\r\n            monitor.getItem().index = hoverIndex;\r\n        },\r\n    },\r\n    connect => ({ connectDropTarget: connect.dropTarget() })\r\n)(\r\n    DragSource(\r\n        ItemTypes.RULE,\r\n        {\r\n            beginDrag: props => ({\r\n                id: props.id,\r\n                index: props.index,\r\n            }),\r\n        },\r\n        (connect, monitor) => ({\r\n            connectDragSource: connect.dragSource(),\r\n            isDragging: monitor.isDragging(),\r\n        })\r\n    )(Rule)\r\n);\r\n\r\nRule.propTypes = {\r\n    removeRule: PropTypes.func,\r\n    name: PropTypes.string.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    isDragging: PropTypes.bool,\r\n    connectDropTarget: PropTypes.func,\r\n    connectDragTarget: PropTypes.func,\r\n    _break: PropTypes.bool.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    matchingRules: PropTypes.array,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    unsavedRules: PropTypes.object,\r\n};\r\n","import React, { Component, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\n// Material UI Components\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport List from '@material-ui/core/List';\r\nimport {\r\n    TextField,\r\n    Typography,\r\n    Box,\r\n    withStyles,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Button,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\n// icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FormatClearIcon from '@material-ui/icons/FormatClear';\r\nimport ClearIcon from '@material-ui/icons/Close';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\n\r\nimport Rule from './Rule';\r\n\r\nconst styles = theme => ({\r\n    test: {\r\n        width: '100%',\r\n        boxSizing: 'border-box',\r\n        height: 64,\r\n    },\r\n    main: {\r\n        minWidth: 330,\r\n        overflow: 'hidden',\r\n        height: '100%',\r\n    },\r\n    toolbar: {\r\n        background: theme.palette.primary.main,\r\n        position: 'relative',\r\n    },\r\n    list: {\r\n        height: 'calc(100% - 64px - 64px - 18px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'auto',\r\n    },\r\n    root: {\r\n        width: 'calc(100% - 48px)',\r\n        '& .MuiInputLabel-outlined-70.MuiInputLabel-marginDense-66': {\r\n            transform: '',\r\n        },\r\n    },\r\n    header: {\r\n        minHeight: 44,\r\n        height: 'auto',\r\n        padding: theme.spacing(1.3),\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    textInput: {\r\n        width: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n        },\r\n    },\r\n    settingsTitle: {\r\n        fontSize: '20px',\r\n        maxWidth: 145,\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    settingsContent: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            display: 'flex',\r\n        },\r\n    },\r\n    closeBtn: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        color: theme.palette.common.white,\r\n    },\r\n    search: {\r\n        flexBasis: '80%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexBasis: '70%',\r\n        },\r\n    },\r\n    settingsItem: {\r\n        marginBottom: theme.spacing(3),\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n});\r\n\r\nconst tooltipStyles = theme => ({\r\n    tooltip: {\r\n        fontSize: 14,\r\n    },\r\n});\r\n\r\nconst CustomTooltip = withStyles(tooltipStyles)(Tooltip);\r\n\r\nclass LeftBar extends Component {\r\n    state = {\r\n        textCommand: '',\r\n        matchingRules: [],\r\n        isSettingsDialogOpen: false,\r\n        isConfirmRemoveDialogOpen: false,\r\n        isSearchActive: false,\r\n        filteredRules: [],\r\n        searchedValue: '',\r\n        localSettings: {\r\n            language: '',\r\n            processorId: '',\r\n            processorTimeout: 1000,\r\n            sayitInstance: '',\r\n        },\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.settings !== prevProps.settings && this.props.settings) {\r\n            this.getDefaultSettings();\r\n        }\r\n    }\r\n\r\n    getDefaultSettings = () => {\r\n        this.setState({\r\n            localSettings: {\r\n                ...this.props.settings,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleTextCommand = event => {\r\n        this.setState({\r\n            textCommand: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event, iconPlay) => {\r\n        if (event.key === 'Enter' || iconPlay) {\r\n            const matched = this.findMatchingRules();\r\n            this.setState({\r\n                matchingRules: matched.map((number, index) => ({\r\n                    indexOf: number,\r\n                    timer: index * 1500,\r\n                    index,\r\n                })),\r\n            });\r\n        }\r\n    };\r\n\r\n    removeMatched = () => {\r\n        this.setState({\r\n            matchingRules: [],\r\n        });\r\n    };\r\n\r\n    findMatchingRules() {\r\n        const text = this.state.textCommand;\r\n        return text ? window.findMatched(text, JSON.parse(JSON.stringify(this.props.rules))) : [];\r\n    }\r\n\r\n    handleOpenSettingsModal = () => {\r\n        this.setState({\r\n            isSettingsDialogOpen: true,\r\n        });\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = (selected, selectedSettingsName) => {\r\n        this.setState({\r\n            localSettings: {\r\n                ...this.state.localSettings,\r\n                [selectedSettingsName]: selected,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleDelete = () => {\r\n        this.props.removeRule(this.props.selectedRule.id);\r\n        this.handleCloseConfirmRemoveDialog();\r\n    };\r\n\r\n    handleCloseConfirmRemoveDialog = () => {\r\n        this.setState({\r\n            isConfirmRemoveDialogOpen: false,\r\n        });\r\n    };\r\n\r\n    handleSearch = event => {\r\n        const matchedRules = this.props.rules.filter(rule =>\r\n            rule.name.toLowerCase().includes(event.target.value.toLowerCase())\r\n        );\r\n        this.setState({\r\n            filteredRules: matchedRules || [],\r\n            searchedValue: event.target.value,\r\n        });\r\n    };\r\n\r\n    toggleSearch = async () => {\r\n        await this.setState({\r\n            isSearchActive: !this.state.isSearchActive,\r\n        });\r\n    };\r\n\r\n    createSettingsModal = () => {\r\n        const { t } = I18n;\r\n        const options = ['en', 'de', 'ru'];\r\n        const { classes } = this.props;\r\n\r\n        const handleClose = () => {\r\n            this.setState({\r\n                isSettingsDialogOpen: false,\r\n                isSettingsWasNotSaved: true,\r\n            });\r\n        };\r\n\r\n        const submitSettings = () => {\r\n            this.props.saveSettings(this.state.localSettings, handleClose);\r\n        };\r\n\r\n        const handleChange = (event, name) => {\r\n            let value = event.target.value;\r\n            if (name === 'language' && value === 'system') {\r\n                value = '';\r\n            }\r\n\r\n            this.setState({\r\n                localSettings: {\r\n                    ...this.state.localSettings,\r\n                    [name]: value,\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <Dialog\r\n                open={this.state.isSettingsDialogOpen}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                onExited={this.getDefaultSettings}>\r\n                <DialogTitle>\r\n                    <Typography variant=\"h4\" component=\"span\" align=\"center\">\r\n                        {t('Settings')}\r\n                    </Typography>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">{t('Language')}</InputLabel>\r\n                            <Select\r\n                                classes={{ root: classes.width100 }}\r\n                                onChange={event => handleChange(event, 'language')}\r\n                                value={\r\n                                    !this.state.localSettings.language\r\n                                        ? 'system'\r\n                                        : this.state.localSettings.language\r\n                                }>\r\n                                <MenuItem value=\"system\">{t('System')}</MenuItem>\r\n                                {Children.toArray(\r\n                                    options.map(option => (\r\n                                        <MenuItem value={option}>{t('lang_' + option)}</MenuItem>\r\n                                    ))\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t('Answer in id')}\r\n                                value={this.state.localSettings.sayitInstance}\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        showDialogSelectId: true,\r\n                                        selectedSettingsName: 'sayitInstance',\r\n                                    })\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t(`Processor's id`)}\r\n                                value={this.state.localSettings.processorId}\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        showDialogSelectId: true,\r\n                                        selectedSettingsName: 'processorId',\r\n                                    })\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t('Timeout for processor')}\r\n                                helperText={t('ms')}\r\n                                value={this.state.localSettings.processorTimeout}\r\n                                onChange={e => handleChange(e, 'processorTimeout')}\r\n                            />\r\n                        </FormControl>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={submitSettings}>Ok</Button>\r\n                    <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    mainIcons = [\r\n        {\r\n            icon: <AddIcon />,\r\n            handler: () => this.props.handleOpen(),\r\n            tooltip: I18n.t('Create rule'),\r\n        },\r\n        {\r\n            icon: <SettingsIcon />,\r\n            handler: () => this.handleOpenSettingsModal(),\r\n            tooltip: I18n.t('Settings'),\r\n        },\r\n        {\r\n            icon: <CachedIcon />,\r\n            handler: () => console.log('refresh'),\r\n            tooltip: I18n.t('Refresh'),\r\n        },\r\n    ];\r\n\r\n    createIcons = iconsData =>\r\n        iconsData.map(({ icon, handler, tooltip }, index) => (\r\n            <CustomTooltip title={tooltip} key={index}>\r\n                <IconButton onClick={handler}>{icon}</IconButton>\r\n            </CustomTooltip>\r\n        ));\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialogSelectId ? (\r\n            <DialogSelectID\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={() => this.setState({ showDialogSelectId: false })}\r\n                onOk={selected =>\r\n                    this.handleDialogSelectIdSubmit(selected, this.state.selectedSettingsName)\r\n                }\r\n            />\r\n        ) : null;\r\n    }\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.isConfirmRemoveDialogOpen ? (\r\n            <Dialog\r\n                open={this.state.isConfirmRemoveDialogOpen}\r\n                onClose={this.handleCloseConfirmRemoveDialog}\r\n                fullWidth>\r\n                <DialogTitle>{I18n.t('Are you sure?')}</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant=\"h5\" component=\"h5\">\r\n                        {I18n.t('You want to delete') + ': '}\r\n                        <strong>{this.props.selectedRule.name}</strong>\r\n                    </Typography>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleDelete}>{I18n.t('Ok')}</Button>\r\n                        <Button onClick={this.handleCloseConfirmRemoveDialog} color=\"primary\">\r\n                            {I18n.t('Cancel')}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        ) : null;\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedRule,\r\n            moveRule,\r\n            handleEdit,\r\n            rules,\r\n            selectRule,\r\n            classes,\r\n            isMdScreen,\r\n            closeDrawer,\r\n        } = this.props;\r\n        const { filteredRules, isSearchActive, searchedValue } = this.state;\r\n        const settingsDialog = this.createSettingsModal();\r\n        const renderedRules = isSearchActive && searchedValue.length ? filteredRules : rules;\r\n        const additionalIcons = [];\r\n\r\n        selectedRule &&\r\n            selectedRule.id &&\r\n            additionalIcons.push({\r\n                icon: !isSearchActive && <DeleteIcon />,\r\n                handler: () =>\r\n                    this.setState({\r\n                        isConfirmRemoveDialogOpen: true,\r\n                    }),\r\n                tooltip: I18n.t('Remove rule'),\r\n                key: 'delete',\r\n            });\r\n        rules.length &&\r\n            additionalIcons.push({\r\n                icon: isSearchActive ? <FormatClearIcon /> : <SearchIcon />,\r\n                handler: () => this.toggleSearch(),\r\n                tooltip: I18n.t('Search rule'),\r\n                key: 'search',\r\n            });\r\n\r\n        return (\r\n            <Box className={classes.main}>\r\n                <Toolbar position=\"static\" classes={{ root: classes.toolbar }}>\r\n                    {isSearchActive ? (\r\n                        <TextField\r\n                            className={classes.search}\r\n                            onChange={this.handleSearch}\r\n                            value={this.state.searchedValue}\r\n                            InputProps={{\r\n                                endAdornment: this.state.searchedValue ? (\r\n                                    <IconButton onClick={() => this.setState({ searchedValue: '' })}>\r\n                                        <ClearIcon />\r\n                                    </IconButton>\r\n                                ) : undefined,\r\n                            }}\r\n                            autoFocus\r\n                        />\r\n                    ) : (\r\n                        <div>{this.createIcons(this.mainIcons)}</div>\r\n                    )}\r\n                    <div>{this.createIcons(additionalIcons)}</div>\r\n                    {!isMdScreen && (\r\n                        <IconButton className={classes.closeBtn} onClick={closeDrawer}>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    )}\r\n                </Toolbar>\r\n\r\n                <DndProvider backend={HTML5Backend}>\r\n                    <List className={classes.list}>\r\n                        {renderedRules.map((rule, index) => (\r\n                            <Rule\r\n                                theme={this.props.theme}\r\n                                handleEdit={handleEdit}\r\n                                {...rule}\r\n                                index={index}\r\n                                moveRule={moveRule}\r\n                                key={rule.id}\r\n                                selectRule={selectRule}\r\n                                selectedRule={selectedRule}\r\n                                matchingRules={this.state.matchingRules}\r\n                                unsavedRules={this.props.unsavedRules}\r\n                                removeMatched={this.removeMatched}\r\n                            />\r\n                        ))}\r\n                    </List>\r\n                </DndProvider>\r\n\r\n                <Toolbar className={classes.test} variant=\"dense\">\r\n                    <TextField\r\n                        onChange={this.handleTextCommand}\r\n                        label={I18n.t('Test phrase')}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        className={clsx('outlined-basic', classes.root)}\r\n                        onKeyDown={this.handleSubmit}\r\n                        value={this.state.textCommand}\r\n                        inputProps={{\r\n                            style: {\r\n                                padding: '10px 10px',\r\n                            },\r\n                        }}\r\n                        InputProps={{\r\n                            endAdornment: this.state.textCommand ? (\r\n                                <IconButton onClick={() => this.setState({ textCommand: '' })}>\r\n                                    <ClearIcon />\r\n                                </IconButton>\r\n                            ) : undefined,\r\n                        }}\r\n                    />\r\n                    <IconButton\r\n                        variant=\"outlined\"\r\n                        onClick={event => this.handleSubmit(event, true)}>\r\n                        <PlayArrowIcon className={classes.play} />\r\n                    </IconButton>\r\n                </Toolbar>\r\n\r\n                {settingsDialog}\r\n\r\n                {this.renderConfirmDialog()}\r\n\r\n                {this.renderSelectIdDialog()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(LeftBar);\r\n\r\nLeftBar.propTypes = {\r\n    handleOpen: PropTypes.func.isRequired,\r\n    rules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n        })\r\n    ),\r\n    moveRule: PropTypes.func.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    removeRule: PropTypes.func,\r\n    handleEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    settings: PropTypes.object,\r\n    socket: PropTypes.object.isRequired,\r\n    saveSettings: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object,\r\n    toggleLeftBar: PropTypes.func,\r\n    isMdScreen: PropTypes.bool.isRequired,\r\n    closeDrawer: PropTypes.func,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport { TextField, Switch, Typography, withStyles, Box } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    box: {\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-around',\r\n        padding: theme.spacing(2),\r\n        width: 'calc(100% - ' + theme.spacing(4) + 'px)',\r\n        position: 'relative',\r\n        '& .outlined-basic': {\r\n            padding: '12px 10px',\r\n            //border: `2px solid ${theme.palette.grey[700]}`,\r\n        },\r\n        [theme.breakpoints.down('md')]: {\r\n            '& .outlined-basic': {\r\n                padding: 0,\r\n            },\r\n        },\r\n    },\r\n    container: {\r\n        width: '70%',\r\n        // minWidth: 340,\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.down('md')]: {\r\n            width: '90%',\r\n        },\r\n        [theme.breakpoints.down('lg')]: {\r\n            width: '80%',\r\n        },\r\n    },\r\n    textField: {\r\n        flexBasis: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    },\r\n    submitForm: {\r\n        flexDirection: 'row',\r\n        margin: '10px auto 20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%',\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexDirection: 'column',\r\n        },\r\n    },\r\n    mainTitle: {\r\n        marginBottom: '30px',\r\n    },\r\n    title: {\r\n        marginTop: 16,\r\n        [theme.breakpoints.down('md')]: {\r\n            maxWidth: 200,\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            maxWidth: 'none',\r\n        },\r\n    },\r\n    row: {\r\n        [theme.breakpoints.down('md')]: {\r\n            alignItems: 'center',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-start',\r\n            textAlign: 'center',\r\n        },\r\n    },\r\n    btnDanger: {\r\n        marginLeft: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginLeft: 0,\r\n            marginTop: theme.spacing(0.5),\r\n        },\r\n        //backgroundColor: theme.palette.error?.dark,\r\n    },\r\n    saveAndGoBtn: {\r\n        marginRight: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginRight: 0,\r\n            marginBottom: theme.spacing(0.5),\r\n        },\r\n    },\r\n    toggleIcon: {\r\n        position: 'absolute',\r\n        top: -15,\r\n        left: 0,\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: 20,\r\n        height: 25,\r\n        cursor: 'pointer',\r\n        padding: theme.spacing(1),\r\n        borderRadius: '0 5px 5px 0',\r\n    },\r\n    switchControl: {\r\n        paddingTop: theme.spacing(1),\r\n        flexBasis: '60%',\r\n    },\r\n    emptyButtons: {\r\n        height: 36,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 0,\r\n        },\r\n    },\r\n    noRulesText: {\r\n        fontSize: 24,\r\n        color: theme.palette.primary.light\r\n    },\r\n});\r\n\r\nclass RightBar extends PureComponent {\r\n    defaultState = {\r\n        words: I18n.t('Create Rule'),\r\n        name: I18n.t('Create Rule'),\r\n        _break: false,\r\n        editable: false,\r\n        args: [\r\n            {\r\n                default: I18n.t('Argument') + ' 1',\r\n            },\r\n            {\r\n                default: I18n.t('Argument') + ' 2',\r\n            },\r\n        ],\r\n        ack: {\r\n            name: '',\r\n            default: `${I18n.t('Confirmation text')}`,\r\n        },\r\n        id: 0,\r\n    };\r\n\r\n    state = {\r\n        localRule: null,\r\n        showDialog: false,\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            prevProps.selectedRule?.name !== this.props.selectedRule?.name ||\r\n            prevState.localRule?.name !== this.state.localRule?.name\r\n        ) {\r\n            if (!this.props.selectedRule || !this.props.selectedRule.name) {\r\n                this.setState({\r\n                    localRule: null,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    localRule: {\r\n                        ...this.props.selectedRule,\r\n                    },\r\n                });\r\n            }\r\n        } else if (this.state.isLocalStateWasUpdated) {\r\n            const unsavedRule = this.props.unsavedRules[this.state.localRule.id];\r\n\r\n            if (\r\n                isEqual(this.props.selectedRule, this.state.localRule) &&\r\n                !unsavedRule?.wasChangedGlobally\r\n            ) {\r\n                this.setState({\r\n                    isLocalStateWasUpdated: false,\r\n                });\r\n\r\n                if (!unsavedRule?.wasChangedGlobally) {\r\n                    this.props.removeUnsavedRule(this.state.localRule.id);\r\n                }\r\n            } else if (!unsavedRule && !this.props.pendingSelectedRuleId) {\r\n                this.props.setUnsavedRule(this.state.localRule.id);\r\n            }\r\n        } else if (\r\n            !this.state.isLocalStateWasUpdated &&\r\n            this.props.unsavedRules[this.state.localRule.id]\r\n        ) {\r\n            this.setState({\r\n                isLocalStateWasUpdated: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.pendingSelectedRuleId && this.state.isLocalStateWasUpdated) {\r\n            if (this.props.pendingSelectedRuleId === this.state.localRule.id) return;\r\n            this.setState({\r\n                confirmChanges: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.lang !== prevProps.lang) {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.localRule && this.props.selectedRule) {\r\n            this.setState({\r\n                localRule: this.props.selectedRule,\r\n            });\r\n        }\r\n    }\r\n\r\n    createConfirmModalActions = () => {\r\n        const { t } = I18n;\r\n        const {\r\n            updateConfig,\r\n            classes,\r\n            selectRule,\r\n            pendingSelectedRuleId,\r\n            clearStateOnConfirmModalUnmount,\r\n            revertChangesFromConfig,\r\n        } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const cancelSavingChanges = async () => {\r\n            await clearStateOnConfirmModalUnmount();\r\n            this.closeConfirmDialog();\r\n        };\r\n\r\n        const dontSaveAndGo = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount(localRule.id);\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        const handleSaveAndGo = async () => {\r\n            await updateConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount();\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        return (\r\n            <FormControl className={classes.submitForm}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={handleSaveAndGo}\r\n                    color=\"primary\"\r\n                    className={classes.saveAndGoBtn}>\r\n                    {t('Save and go')}\r\n                </Button>\r\n                <Button onClick={dontSaveAndGo} variant=\"contained\" color=\"secondary\">\r\n                    {t(`Don't save and go`)}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.btnDanger}\r\n                    onClick={cancelSavingChanges}>\r\n                    {t('Cancel')}\r\n                </Button>\r\n            </FormControl>\r\n        );\r\n    };\r\n\r\n    createSaveSettingsForm = () => {\r\n        const { t } = I18n;\r\n        const { updateConfig, classes, revertChangesFromConfig, selectedRule } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const handleSave = async () => {\r\n            await updateConfig(localRule);\r\n            this.setState({\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        const revertChanges = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n\r\n            await this.setState({\r\n                localRule: selectedRule,\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        if (!this.state.isLocalStateWasUpdated) {\r\n            return <div className={this.props.classes.emptyButtons} />;\r\n        } else {\r\n            return (\r\n                <FormControl className={classes.submitForm}>\r\n                    <Button onClick={handleSave} variant=\"contained\" color=\"primary\">\r\n                        {t('Save')}\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className={classes.btnDanger}\r\n                        onClick={revertChanges}>\r\n                        {t('Cancel')}\r\n                    </Button>\r\n                </FormControl>\r\n            );\r\n        }\r\n    };\r\n\r\n    closeConfirmDialog = () => {\r\n        this.setState({\r\n            isLocalStateWasUpdated: false,\r\n            confirmChanges: false,\r\n        });\r\n    };\r\n\r\n    createInput = ({\r\n        value,\r\n        label,\r\n        onChange,\r\n        type,\r\n        onClick,\r\n        note,\r\n        disabled = !this.state.localRule,\r\n        keywords,\r\n        key,\r\n        onSwitchChange,\r\n    }) => {\r\n        if ((value === undefined || value === null) && !label && !keywords) {\r\n            return;\r\n        }\r\n        const { classes } = this.props;\r\n\r\n        return type !== 'checkbox' ? (\r\n            <TextField\r\n                //label={label}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                disabled={disabled}\r\n                value={value}\r\n                helperText={note || ''}\r\n                onClick={onClick}\r\n                onChange={onChange}\r\n                key={key}\r\n                className={clsx('outlined-basic', classes.textField)}\r\n            />\r\n        ) : (\r\n            <FormControl classes={{ root: classes.switchControl }}>\r\n                <Switch\r\n                    key={key}\r\n                    onClick={onSwitchChange}\r\n                    color={'primary'}\r\n                    disabled={disabled}\r\n                    checked={!!value}\r\n                />\r\n            </FormControl>\r\n        );\r\n    };\r\n\r\n    createOptionsData = (state = this.state) => {\r\n        const {\r\n            localRule: { args, ack, editable, _break },\r\n        } = state;\r\n        const { t } = I18n;\r\n\r\n        const createInput = this.createInput;\r\n        const handlers = this.handlers;\r\n\r\n        const isKeyWordsDisabled = () => {\r\n            if (editable === undefined) {\r\n                return false;\r\n            } else if (editable === false) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        return [\r\n            {\r\n                title: t('Keywords'),\r\n                item: createInput({\r\n                    value: this.state.localRule?.words || '',\r\n                    onChange: handlers.keywordsText,\r\n                    keywords: true,\r\n                    disabled: isKeyWordsDisabled(),\r\n                    key: 'keywords',\r\n                }),\r\n                id: 1,\r\n            },\r\n            {\r\n                title: t('Interrupt processing'), //`${t('Break')}:`,\r\n                item: createInput({\r\n                    type: 'checkbox',\r\n                    value: _break,\r\n                    onSwitchChange: handlers.breakOnSwitch,\r\n                    key: 'break',\r\n                }),\r\n                id: 2,\r\n            },\r\n            {\r\n                title: args && args[0]?.name, //`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[0]?.default,\r\n                    label: args && args[0]?.name,\r\n                    type: args && args[0]?.type,\r\n                    onClick: this.handleSetDialogClick.bind(this, args && args[0]),\r\n                    onSwitchChange: handlers.param1OnSwitch,\r\n                    key: 'Param1',\r\n                }),\r\n                id: 3,\r\n            },\r\n            {\r\n                title: args && args[1]?.name, //`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[1]?.default,\r\n                    label: args && args[1]?.name,\r\n                    onChange: handlers.param2Text,\r\n                    key: 'Param2',\r\n                }),\r\n                id: 4,\r\n            },\r\n            {\r\n                title: t('Confirmation text'),\r\n                item: createInput({\r\n                    value: ack && ack.default,\r\n                    label: ack && ack.name,\r\n                    note: t(\r\n                        'You can use %s, that will be replaced with current value of state. %u will be replaced by unit'\r\n                    ),\r\n                    type: ack && ack.type,\r\n                    key: 'confirmationText',\r\n                    onChange: handlers.confirmText,\r\n                    onSwitchChange: handlers.confirmOnSwitch,\r\n                }),\r\n                id: 5,\r\n            },\r\n        ];\r\n    };\r\n\r\n    createInputHandlers = () => {\r\n        const _this = this;\r\n\r\n        return {\r\n            keywordsText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        words: event.target.value,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param2Text(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            index > 0\r\n                                ? {\r\n                                      ...arg,\r\n                                      default: event.target.value,\r\n                                  }\r\n                                : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: event.target.value,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param1OnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            !index ? { ...arg, default: !arg.default ? true : !arg.default } : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmOnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: !_this.state.localRule.ack.default,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            async breakOnSwitch() {\r\n                await _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        _break: !_this.state.localRule._break,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n        };\r\n    };\r\n\r\n    handlers = this.createInputHandlers();\r\n\r\n    handleSetDialogClick = arg => {\r\n        if (arg.type === 'id') {\r\n            this.setState({\r\n                showDialog: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = selected => {\r\n        this.setState({\r\n            localRule: {\r\n                ...this.state.localRule,\r\n                args: this.state.localRule.args.map((arg, index) =>\r\n                    !index\r\n                        ? {\r\n                              ...arg,\r\n                              default: selected,\r\n                          }\r\n                        : arg\r\n                ),\r\n            },\r\n            isLocalStateWasUpdated: true,\r\n        });\r\n    };\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.confirmChanges ? (\r\n            <Dialog fullWidth open={this.state.confirmChanges} maxWidth={'md'}>\r\n                <DialogTitle>\r\n                    {I18n.t('Please confirm or cancel changes before leaving')}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {I18n.t('You have changed rule') + ': '}{' '}\r\n                        <strong>{this.state.localRule.name}</strong>\r\n                    </Typography>\r\n                    <DialogActions>{this.createConfirmModalActions()}</DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        ) : null;\r\n    }\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ? (\r\n            <DialogSelectID\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={id => {\r\n                    console.log(id);\r\n                    this.setState({ showDialog: false });\r\n                }}\r\n                onOk={this.handleDialogSelectIdSubmit}\r\n            />\r\n        ) : null;\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            localRule,\r\n            isLocalStateWasUpdated,\r\n        } = this.state;\r\n        const { classes, isLeftBarHidden, toggleLeftBar } = this.props;\r\n        const name = localRule ? localRule.name : '';\r\n\r\n        return (\r\n            <Box mt=\"30px\" className={classes.box}>\r\n                {localRule ?\r\n                    <Paper className={classes.container} mx=\"auto\">\r\n                        <Typography\r\n                            variant=\"h4\"\r\n                            align=\"center\"\r\n                            className={!isLocalStateWasUpdated ? classes.mainTitle : ''}>\r\n                            {name}\r\n                        </Typography>\r\n\r\n                        {this.createSaveSettingsForm()}\r\n\r\n                        {this.createOptionsData().map(({title, item, id}) => {\r\n                            if (!item) return null;\r\n                            return (\r\n                                <Box\r\n                                    display=\"flex\"\r\n                                    justifyContent=\"space-between\"\r\n                                    mb=\"10px\"\r\n                                    key={id}\r\n                                    className={classes.row}>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        component=\"h6\"\r\n                                        align=\"left\"\r\n                                        className={classes.title}>\r\n                                        {title ? title + ':' : ''}\r\n                                    </Typography>\r\n                                    {item}\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </Paper>\r\n                    :\r\n                    <div className={classes.noRulesText}>{I18n.t('Create a new rule with a \"+\" on the left')}</div>\r\n                }\r\n\r\n                <Box className={classes.toggleIcon} onClick={toggleLeftBar}>\r\n                    {isLeftBarHidden || !this.props.isMdScreen ? <MenuIcon /> : <ArrowBackIcon />}\r\n                </Box>\r\n\r\n                {this.renderSelectIdDialog()}\r\n                {this.renderConfirmDialog()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RightBar);\r\n\r\nRightBar.propTypes = {\r\n    selectedRule: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        id: PropTypes.string,\r\n        rule: PropTypes.string,\r\n        ack: PropTypes.shape({\r\n            default: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n        }),\r\n        arg: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n                type: PropTypes.string,\r\n                default: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\r\n            })\r\n        ),\r\n        words: PropTypes.string,\r\n    }).isRequired,\r\n    socket: PropTypes.object.isRequired,\r\n    updateConfig: PropTypes.func.isRequired,\r\n    revertChangesFromConfig: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    pendingSelectedRuleId: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n    clearStateOnConfirmModalUnmount: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object.isRequired,\r\n    setUnsavedRule: PropTypes.func.isRequired,\r\n    removeUnsavedRule: PropTypes.func.isRequired,\r\n    toggleLeftBar: PropTypes.func.isRequired,\r\n    isLeftBarHidden: PropTypes.bool,\r\n    isMdScreen: PropTypes.bool.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { DialogActions, Button, Select, TextField, MenuItem, withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    select: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2.5),\r\n    },\r\n    TextField: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n});\r\n\r\nclass CreateRuleDialog extends Component {\r\n    defaultRule = {\r\n        rule: I18n.t('Select rule'),\r\n        name: I18n.t('New rule'),\r\n        id: '',\r\n    };\r\n\r\n    state = {\r\n        localRule: this.defaultRule,\r\n        isDisabled: true,\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.cleanState();\r\n    }\r\n\r\n    setRuleOnMount = () => {\r\n        const { isEdit, selectedRule } = this.props;\r\n        if (isEdit) {\r\n            this.setState({\r\n                localRule: selectedRule,\r\n            });\r\n        }\r\n    };\r\n\r\n    cleanState = () => {\r\n        if (this.props.isEdit) {\r\n            this.props.finishEdit(this.state.localRule);\r\n        }\r\n        this.setState({\r\n            localRule: this.defaultRule,\r\n        });\r\n    };\r\n\r\n    getAvaliableOptions = () => {\r\n        const { commands, currentRules, selectedRule, isEdit } = this.props;\r\n\r\n        const uniqueOptions = commands?.filter(\r\n            option => !(option.unique && currentRules.find(item => item?.rule === option.rule))\r\n        );\r\n\r\n        return selectedRule?.unique && isEdit ? uniqueOptions.concat(selectedRule) : uniqueOptions;\r\n    };\r\n\r\n    getUniqueName = ruleName => {\r\n        const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n        const matchingNames = existingNames.filter(\r\n            name => name.slice(0, name.length - 2) === ruleName\r\n        );\r\n        const isUnique = this.props.commands.find(\r\n            ({ rule, unique }) => rule === ruleName && unique\r\n        );\r\n\r\n        if (matchingNames.length) {\r\n            let name = matchingNames[matchingNames.length - 1];\r\n            let lastChar = name.slice(name.length - 1);\r\n\r\n            return name.slice(0, name.length - 1) + ++lastChar;\r\n        }\r\n\r\n        return isUnique ? ruleName : `${ruleName} 1`;\r\n    };\r\n\r\n    createForm = () => {\r\n        const { localRule } = this.state;\r\n        const { classes } = this.props;\r\n        const commands = this.getAvaliableOptions();\r\n\r\n        const handleSelectChange = event =>\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    rule: event.target.value,\r\n                    name: this.getUniqueName(event.target.value),\r\n                    isError: '',\r\n                },\r\n                isDisabled: event.target.value === this.defaultRule.rule,\r\n            });\r\n\r\n        const handleInputChange = event => {\r\n            const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    name: event.target.value,\r\n                    isError: existingNames.includes(event.target.value)\r\n                        ? `${I18n.t('Name already exist')}`\r\n                        : '',\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <FormGroup>\r\n                <FormControl fullWidth>\r\n                    <InputLabel shrink id=\"rule\">\r\n                        {I18n.t('Rule')}\r\n                    </InputLabel>\r\n                    <Select\r\n                        onChange={handleSelectChange}\r\n                        value={localRule.rule}\r\n                        labelId={'rule'}\r\n                        className={classes.select}>\r\n                        {commands?.map(option => (\r\n                            <MenuItem key={option.rule} value={option.rule}>\r\n                                {option.rule}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label={this.state.localRule.isError || I18n.t('Name')}\r\n                    value={localRule.name}\r\n                    onChange={handleInputChange}\r\n                    error={!!this.state.localRule.isError}\r\n                    className={classes.TextField}/>\r\n            </FormGroup>\r\n        );\r\n    };\r\n\r\n    setDialogContent = () => {\r\n        const { handleClose, handleSubmitOnCreate, handleSubmitOnEdit, isEdit } = this.props;\r\n        const onSubmitHandler = !isEdit ? handleSubmitOnCreate : handleSubmitOnEdit;\r\n        return (\r\n            <DialogContent>\r\n                {this.createForm()}\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={onSubmitHandler.bind(\r\n                            this,\r\n                            this.state.localRule,\r\n                            this.state.localRule.isError\r\n                        )}\r\n                        disabled={this.state.isDisabled}>\r\n                        Ok\r\n                    </Button>\r\n                    <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                </DialogActions>\r\n            </DialogContent>\r\n        );\r\n    };\r\n    render() {\r\n        return (\r\n            <Dialog\r\n                open={this.props.isOpen}\r\n                onClose={this.props.handleClose}\r\n                onExited={this.cleanState}\r\n                onEnter={this.setRuleOnMount}\r\n                fullWidth>\r\n                <DialogTitle>\r\n                    {I18n.t(!this.props.isEdit ? 'Create new rule' : 'Edit rule')}\r\n                </DialogTitle>\r\n                {this.setDialogContent()}\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(CreateRuleDialog);\r\n\r\nCreateRuleDialog.propTypes = {\r\n    handleClose: PropTypes.func.isRequired,\r\n    handleSubmitOnCreate: PropTypes.func.isRequired,\r\n    handleSubmitOnEdit: PropTypes.func.isRequired,\r\n    isEdit: PropTypes.bool.isRequired,\r\n    commands: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool.isRequired,\r\n        }).isRequired\r\n    ),\r\n    isOpen: PropTypes.bool.isRequired,\r\n    currentRules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool,\r\n        })\r\n    ).isRequired,\r\n    finishEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\r\nimport 'react-splitter-layout/lib/index.css';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport LeftBar from './LeftBar';\r\nimport RightBar from './RightBar';\r\nimport CreateRuleDialog from './CreateRuleDialog';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    layout: {\r\n        '& .layout-pane:first': {\r\n            overflow: 'hidden',\r\n        },\r\n    },\r\n    hidden: {\r\n        '& .layout-pane:first-child': {\r\n            width: '0 !important',\r\n        },\r\n        background: theme.palette.background.default,\r\n    },\r\n    opened: {\r\n        '& .layout-pane-primary': {\r\n            width: '',\r\n        },\r\n        overflow: 'hidden',\r\n        background: theme.palette.background.default,\r\n    },\r\n});\r\n\r\nclass Layout extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.menuSize = parseFloat(window.localStorage.getItem('App.menuSize')) || 350;\r\n        this.state = {\r\n            currentRules: [],\r\n            isOpen: false,\r\n            isEdit: false,\r\n            selectedRule: null,\r\n            unsavedRules: {},\r\n            isLeftBarOpen: window.localStorage.getItem('App.menuHidden') === 'true',\r\n        };\r\n        this.commands = this.getSelectedLanguageCommands();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataFromConfig()\r\n            .then(({ rules, ...settings }) => {\r\n                const rulesWithId = rules.map(rule =>\r\n                    !rule.id || !rule.name\r\n                        ? {\r\n                              ...rule,\r\n                              id: !rule.id ? uuid() : rule.id,\r\n                              name: !rule.name\r\n                                  ? window.commands[rule.template]?.name[I18n.getLanguage()]\r\n                                  : rule.name,\r\n                          }\r\n                        : rule\r\n                );\r\n                if (!isEqual(rules, rulesWithId)) {\r\n                    this.props.saveConfig({ rules: rulesWithId, ...settings });\r\n                }\r\n            });\r\n\r\n        if (!this.isMdScreen) {\r\n            this.setState({\r\n                isLeftBarOpen: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.settings?.language !== this.state.lang && this.state.settings?.language) {\r\n            const lang = this.state.settings?.language;\r\n            I18n.setLanguage(lang);\r\n\r\n            this.commands = this.getSelectedLanguageCommands();\r\n        }\r\n\r\n        if (\r\n            prevState.selectedRule?.id !== this.state.selectedRule?.id &&\r\n            prevState.selectedRule?.id && this.state.selectedRule\r\n        ) {\r\n            localStorage.setItem('selectedRule', this.state.selectedRule.id);\r\n        }\r\n    }\r\n\r\n    getSelectedLanguageCommands = () => {\r\n        const lang = this.state?.settings?.language || I18n.getLanguage();\r\n\r\n        return [\r\n            { rule: I18n.t('Select rule'), unique: false },\r\n            ...Object.entries(window.commands).map(item => {\r\n                const [key, command] = item;\r\n                const { name, ...rest } = command;\r\n                const obj = {\r\n                    ...rest,\r\n                    rule: command?.name[lang],\r\n                    template: key,\r\n                    unique: command.unique,\r\n                    words: command.words && command.words[lang],\r\n                    args: command.args?.map(arg => ({\r\n                        ...arg,\r\n                        name: arg.name[lang] || '',\r\n                        default: arg.default || (arg.type === 'checkbox' ? false : ''),\r\n                    })),\r\n                    ack: command.ack && {\r\n                        ...command.ack,\r\n                        name: command.ack.name[lang],\r\n                        default: !command.ack?.default\r\n                            ? command.ack?.type === 'checkbox'\r\n                                ? false\r\n                                : ''\r\n                            : command.ack.default[lang],\r\n                    },\r\n                };\r\n\r\n                return obj;\r\n            }),\r\n        ];\r\n    };\r\n\r\n    commands = this.getSelectedLanguageCommands();\r\n\r\n    moveRule = (dragIndex, hoverIndex) => {\r\n        const { currentRules } = this.state;\r\n        const sourceRule = currentRules.find((_, index) => index === hoverIndex);\r\n        const sortRules = currentRules.filter((_, index) => index !== hoverIndex);\r\n        sortRules.splice(dragIndex, 0, sourceRule);\r\n        this.setState({ currentRules: sortRules });\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.setState({\r\n            isOpen: true,\r\n        });\r\n    };\r\n    handleClose = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    handleSubmitOnCreate = (selectedRule, isError) => {\r\n        if (isError) {\r\n            return;\r\n        }\r\n\r\n        const id = uuid();\r\n        const shortDataRule = {\r\n            ...selectedRule,\r\n            id,\r\n            _break: true,\r\n        };\r\n\r\n        const rule = {\r\n            ...this.commands.find(command => command.rule === shortDataRule.rule),\r\n            ...shortDataRule,\r\n        };\r\n        const isUnsavedChanges = Object.values(this.state.unsavedRules).length;\r\n\r\n        this.setState(\r\n            {\r\n                currentRules: [...this.state.currentRules, rule],\r\n                unsavedRules: {\r\n                    ...this.state.unsavedRules,\r\n                    [id]: {\r\n                        id,\r\n                        wasChangedGlobally: true,\r\n                    },\r\n                },\r\n                selectedRule: !isUnsavedChanges ? rule : this.state.selectedRule,\r\n            },\r\n            () => {\r\n                if (isUnsavedChanges) {\r\n                    this.selectRule(rule.id);\r\n                }\r\n            }\r\n        );\r\n\r\n        this.handleClose();\r\n    };\r\n\r\n    handleSubmitOnEdit = (selectedRule, isError) => {\r\n        if (isError) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [selectedRule.id]: {\r\n                    id: selectedRule.id,\r\n                    wasChangedGlobally: true,\r\n                },\r\n            },\r\n            currentRules: this.updateCurrentRules(selectedRule),\r\n        });\r\n        this.handleClose();\r\n    };\r\n\r\n    selectRule = id => {\r\n        const { selectedRule, currentRules } = this.state;\r\n\r\n        if (selectedRule.id === id) {\r\n            // ignore\r\n        } else if (this.state.unsavedRules[selectedRule.id]) {\r\n            this.setState({\r\n                pendingSelectedRuleId: id,\r\n            });\r\n        } else {\r\n            const rule = currentRules.find(item => item.id === id);\r\n\r\n            this.setState({\r\n                selectedRule: rule,\r\n                isLeftBarOpen: !this.isMdScreen ? false : this.state.isLeftBarOpen\r\n            });\r\n        }\r\n    };\r\n\r\n    updateCurrentRules = selectedRule => {\r\n        return this.state.currentRules.map(item =>\r\n            item.id === selectedRule.id ? selectedRule : item\r\n        );\r\n    };\r\n\r\n    handleEdit = () => {\r\n        this.setState({\r\n            isEdit: true,\r\n        });\r\n        this.handleOpen();\r\n    };\r\n\r\n    finishEdit = editableRule => {\r\n        let updatedRule;\r\n\r\n        const { rule, id, name, _break, template } = editableRule;\r\n        const initialSelectedRule = this.state.selectedRule;\r\n\r\n        if (initialSelectedRule.rule !== rule) {\r\n            const updatedRuleOptions = this.commands.find(command => command.rule === rule);\r\n            updatedRule = {\r\n                ...updatedRuleOptions,\r\n                name,\r\n                rule,\r\n                id,\r\n                _break,\r\n                template,\r\n            };\r\n        } else {\r\n            updatedRule = editableRule;\r\n        }\r\n\r\n        this.setState({\r\n            isEdit: false,\r\n            selectedRule: updatedRule,\r\n        });\r\n    };\r\n\r\n    removeRule = id => {\r\n        const deleteRuleFromConfig = async () => {\r\n            const config = await this.props.readConfig();\r\n            const { rules, ...settings } = config;\r\n            const newConfig = { rules: rules.filter(rule => rule.id !== id), ...settings };\r\n            this.props.saveConfig(newConfig);\r\n        };\r\n        const updatedRules = this.state.currentRules.filter(rule => rule.id !== id);\r\n        this.setState(\r\n            {\r\n                currentRules: updatedRules,\r\n                selectedRule: updatedRules.length ? updatedRules[updatedRules.length - 1] : null,\r\n            },\r\n            deleteRuleFromConfig\r\n        );\r\n    };\r\n\r\n    updateConfig = async currentSelectedRule => {\r\n        const { [currentSelectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === currentSelectedRule.id);\r\n        const updatedCurrentRules = this.updateCurrentRules(currentSelectedRule)\r\n\r\n        let updatedRules;\r\n        if (matchingRule) {\r\n            updatedRules = rules.map(rule =>\r\n                rule.id === currentSelectedRule.id\r\n                    ? this.getRuleShortData(currentSelectedRule)\r\n                    : rule\r\n            );\r\n        } else {\r\n            updatedRules = [...rules, this.getRuleShortData(currentSelectedRule)];\r\n        }\r\n\r\n        const newConfig = { rules: updatedRules, ...settings };\r\n        await this.props.saveConfig(newConfig);\r\n\r\n        this.setState({\r\n            selectedRule: currentSelectedRule || this.state.selectedRule || null,\r\n            currentRules: updatedCurrentRules,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n    getDataFromConfig = async () => {\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n        const lang = I18n.getLanguage();\r\n\r\n        const rulesFullData = rules.map(rule => {\r\n            const obj = window.commands[rule.template];\r\n\r\n            return {\r\n                ...obj,\r\n                rule: obj?.name[lang],\r\n                ack: {\r\n                    ...obj.ack,\r\n                    default: rule.ack || (obj.ack?.type === 'checkbox' ? false : ''),\r\n                    name: obj.ack?.name[lang],\r\n                },\r\n                args: obj.args?.map((arg, index) => ({\r\n                    ...arg,\r\n                    default: rule.args[index] || (arg?.type === 'checkbox' ? false : ''),\r\n                    name: arg?.name[lang] || '',\r\n                })),\r\n                name: rule.name || obj?.name[lang],\r\n                words: rule.words,\r\n                _break: rule._break,\r\n                id: rule.id || uuid(),\r\n                template: rule.template,\r\n            };\r\n        });\r\n        await this.setState({\r\n            currentRules: rulesFullData,\r\n            selectedRule:\r\n                rulesFullData.find(rule => rule.id === localStorage.getItem('selectedRule')) ||\r\n                rulesFullData[rulesFullData.length - 1] ||\r\n                null,\r\n            settings,\r\n        });\r\n        return config;\r\n    };\r\n\r\n    revertChangesFromConfig = async selectedRule => {\r\n        const { currentRules } = this.state;\r\n        const { [selectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === selectedRule.id);\r\n        const isRuleWasUpdatedGlobally = this.state.unsavedRules[selectedRule.id]\r\n            ?.wasChangedGlobally;\r\n\r\n        let updatedRules;\r\n        if (matchingRule && isRuleWasUpdatedGlobally) {\r\n            updatedRules = currentRules.map(rule =>\r\n                rule.id === matchingRule.id\r\n                    ? {\r\n                          ...rule,\r\n                          ack: {\r\n                              ...rule.ack,\r\n                              default: matchingRule.ack || '',\r\n                          },\r\n                          args: rule.args?.map(arg => ({\r\n                              ...arg,\r\n                              default: matchingRule.arg || '',\r\n                          })),\r\n                          rule: window.commands[matchingRule.template].name[I18n.getLanguage()],\r\n                          words: matchingRule.words || '',\r\n                          name: matchingRule.name || '',\r\n                          _break: matchingRule._break || true,\r\n                      }\r\n                    : rule\r\n            );\r\n        } else if (!matchingRule) {\r\n            updatedRules = currentRules.filter(rule => rule.id !== selectedRule.id);\r\n        }\r\n\r\n        await this.setState({\r\n            currentRules: updatedRules || currentRules,\r\n            selectedRule:\r\n                (isRuleWasUpdatedGlobally\r\n                    ? updatedRules.find(rule => rule.id === selectedRule.id)\r\n                    : this.state.selectedRule) || null,\r\n            settings,\r\n            unsavedRules: ids,\r\n        });\r\n\r\n        if (this.state.currentRules.length !== currentRules.length) {\r\n            this.setState({\r\n                selectedRule: this.state.currentRules[this.state.currentRules.length - 1] || null,\r\n            });\r\n        }\r\n    };\r\n\r\n    saveSettings = async (localeSettings, closeModal) => {\r\n        const config = await this.props.readConfig();\r\n        const { rules } = config;\r\n        this.setState({\r\n            settings: localeSettings,\r\n        });\r\n        const newConfig = { rules, ...localeSettings };\r\n        await this.props.saveConfig(newConfig);\r\n        closeModal();\r\n    };\r\n\r\n    setUnsavedRule = id => {\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [id]: {\r\n                    id,\r\n                    wasChangedGlobally: false,\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    removeUnsavedRule = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n        this.setState({\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    getRuleShortData = ({ _break, template, words, ack, args, name, id }) => ({\r\n        words: words || '',\r\n        ack: ack?.default || '',\r\n        args: args?.map(arg => arg.default) || [],\r\n        _break,\r\n        template,\r\n        name,\r\n        id,\r\n    });\r\n\r\n    clearStateOnConfirmModalUnmount = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n\r\n        this.setState({\r\n            pendingSelectedRuleId: false,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    isLargeScreen = isWidthUp('lg', this.props.width);\r\n    isMdScreen = isWidthUp('md', this.props.width);\r\n    isSmScreen = isWidthUp('sm', this.props.width);\r\n    isMobileScreen = isWidthUp('xs', this.props.width);\r\n\r\n    toggleLeftBar = () => {\r\n        window.localStorage.setItem('App.menuHidden', !this.state.isLeftBarOpen);\r\n        this.setState({\r\n            isLeftBarOpen: !this.state.isLeftBarOpen,\r\n        });\r\n    };\r\n\r\n    closeDrawer = () => {\r\n        this.setState({\r\n            isLeftBarOpen: false,\r\n        });\r\n    };\r\n\r\n    renderModalDialog() {\r\n        return this.state.isOpen ? (\r\n            <CreateRuleDialog\r\n                key=\"modal\"\r\n                commands={this.commands}\r\n                isEdit={this.state.isEdit}\r\n                handleSubmitOnCreate={this.handleSubmitOnCreate}\r\n                handleSubmitOnEdit={this.handleSubmitOnEdit}\r\n                handleClose={this.handleClose}\r\n                isOpen={this.state.isOpen}\r\n                currentRules={this.state.currentRules}\r\n                selectedRule={this.state.selectedRule}\r\n                finishEdit={this.finishEdit}\r\n            />\r\n        ) : null;\r\n    }\r\n    render() {\r\n        console.log(this.state);\r\n        const { classes } = this.props;\r\n        const { currentRules, selectedRule, isLeftBarOpen } = this.state;\r\n\r\n        if (!this.isMdScreen) {\r\n            return (\r\n                <>\r\n                    <Drawer\r\n                        anchor=\"left\"\r\n                        open={this.state.isLeftBarOpen}\r\n                        onClose={this.closeDrawer}>\r\n                        <LeftBar\r\n                            handleOpen={this.handleOpen}\r\n                            rules={currentRules}\r\n                            moveRule={this.moveRule}\r\n                            handleEdit={this.handleEdit}\r\n                            selectRule={this.selectRule}\r\n                            selectedRule={selectedRule}\r\n                            removeRule={this.removeRule}\r\n                            settings={this.state.settings}\r\n                            socket={this.props.socket}\r\n                            saveSettings={this.saveSettings}\r\n                            theme={this.props.theme}\r\n                            toggleLeftBar={this.toggleLeftBar}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            isMdScreen={this.isMdScreen}\r\n                            closeDrawer={this.closeDrawer}\r\n                        />\r\n                    </Drawer>\r\n                    {this.state.settings ?\r\n                        <RightBar\r\n                            selectedRule={selectedRule}\r\n                            socket={this.props.socket}\r\n                            updateConfig={this.updateConfig}\r\n                            revertChangesFromConfig={this.revertChangesFromConfig}\r\n                            pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            selectRule={this.selectRule}\r\n                            clearStateOnConfirmModalUnmount={this.clearStateOnConfirmModalUnmount}\r\n                            lang={this.state.settings.language}\r\n                            setUnsavedRule={this.setUnsavedRule}\r\n                            removeUnsavedRule={this.removeUnsavedRule}\r\n                            toggleLeftBar={this.toggleLeftBar}\r\n                            isLeftBarOpen={this.state.isLeftBarOpen}\r\n                            isMdScreen={this.isMdScreen}\r\n                        /> : null}\r\n                    {this.renderModalDialog()}\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    <SplitterLayout\r\n                        key=\"splitterLayout\"\r\n                        customClassName={clsx(\r\n                            isLeftBarOpen ? classes.hidden : classes.opened,\r\n                            classes.layout\r\n                        )}\r\n                        primaryMinSize={350}\r\n                        primaryIndex={1}\r\n                        secondaryMinSize={350}\r\n                        onSecondaryPaneSizeChange={size => (this.menuSize = parseFloat(size))}\r\n                        onDragEnd={() => {\r\n                            window.localStorage.setItem('App.menuSize', this.menuSize.toString());\r\n                        }}\r\n                        secondaryInitialSize={this.menuSize}>\r\n                        <LeftBar\r\n                            handleOpen={this.handleOpen}\r\n                            rules={currentRules}\r\n                            moveRule={this.moveRule}\r\n                            handleEdit={this.handleEdit}\r\n                            selectRule={this.selectRule}\r\n                            selectedRule={selectedRule}\r\n                            removeRule={this.removeRule}\r\n                            settings={this.state.settings}\r\n                            socket={this.props.socket}\r\n                            saveSettings={this.saveSettings}\r\n                            theme={this.props.theme}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            isMdScreen={this.isMdScreen}\r\n                        />\r\n                        {this.state.settings ?\r\n                            <RightBar\r\n                                selectedRule={selectedRule}\r\n                                socket={this.props.socket}\r\n                                updateCurrentRules={this.updateCurrentRules}\r\n                                updateConfig={this.updateConfig}\r\n                                revertChangesFromConfig={this.revertChangesFromConfig}\r\n                                pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                                unsavedRules={this.state.unsavedRules}\r\n                                selectRule={this.selectRule}\r\n                                clearStateOnConfirmModalUnmount={\r\n                                    this.clearStateOnConfirmModalUnmount\r\n                                }\r\n                                lang={this.state.settings.language}\r\n                                setUnsavedRule={this.setUnsavedRule}\r\n                                removeUnsavedRule={this.removeUnsavedRule}\r\n                                toggleLeftBar={this.toggleLeftBar}\r\n                                isLeftBarOpen={this.state.isLeftBarOpen}\r\n                                isMdScreen={this.isMdScreen}\r\n                            /> : null}\r\n                    </SplitterLayout>\r\n                    {this.renderModalDialog()}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nLayout.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    readConfig: PropTypes.func.isRequired,\r\n    saveConfig: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(withWidth()(Layout));\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Layout from './components/Layout';\r\nimport isEqual from 'lodash.isequal';\r\n\r\n// Icons\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    logo: {\r\n        width: 32,\r\n        height: 32,\r\n        padding: theme.spacing(1),\r\n        display: 'inline-block',\r\n    },\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            en: require('./i18n/en'),\r\n            de: require('./i18n/de'),\r\n            ru: require('./i18n/ru'),\r\n            pt: require('./i18n/pt'),\r\n            nl: require('./i18n/nl'),\r\n            fr: require('./i18n/fr'),\r\n            it: require('./i18n/it'),\r\n            es: require('./i18n/es'),\r\n            pl: require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage(\r\n            (navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase()\r\n        );\r\n    }\r\n\r\n    onConnectionReady() {\r\n        const newState = {};\r\n\r\n        this.socket\r\n            .getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n                return this.readConfig();\r\n            })\r\n            .then(config => {\r\n                console.log(config);\r\n                this.setState({ config, ready: true });\r\n                if (config.language !== I18n.getLanguage() && config.language) {\r\n                    I18n.setLanguage(config.language);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    readConfig() {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(config => {\r\n                const native = config.native || {};\r\n                native.rules = native.rules || [];\r\n                native.sayitInstance = native.sayitInstance || '';\r\n                native.language = native.language || '';\r\n                native.processorId = native.processorId || '';\r\n                native.processorTimeout = native.processorTimeout || 1000;\r\n                return native;\r\n            });\r\n    }\r\n\r\n    saveConfig(config) {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(obj => {\r\n                if (!isEqual(obj.native, config)) {\r\n                    obj.native = config;\r\n                    return this.socket.setObject(\r\n                        'system.adapter.' + this.adapterName + '.' + this.instance,\r\n                        obj\r\n                    );\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.config) {\r\n            return (\r\n                <MuiThemeProvider theme={this.state.theme}>\r\n                    <Loader theme={this.state.themeType} />\r\n                </MuiThemeProvider>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <MuiThemeProvider theme={this.state.theme}>\r\n                <div className=\"App\">\r\n                    <Layout\r\n                        theme={this.state.theme}\r\n                        socket={this.socket}\r\n                        readConfig={this.readConfig.bind(this)}\r\n                        saveConfig={this.saveConfig.bind(this)}\r\n                    />\r\n                    {this.renderError()}\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport { version } from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'text2command';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log('iobroker.' + window.adapterName + '@' + version + ' using theme \"' + themeName + '\"');\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\n\r\n// if not local development\r\nif (window.location.host !== 'localhost:3000') {\r\n    Sentry.init({\r\n        dsn: 'https://9806f910556240219f831ecfe2ee3ad1@sentry.iobroker.net/87',\r\n        release: 'iobroker.' + window.adapterName + '@' + version,\r\n        integrations: [new SentryIntegrations.Dedupe()],\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}