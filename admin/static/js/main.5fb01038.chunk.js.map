{"version":3,"sources":["serviceWorker.js","components/Rule.js","components/LeftBar.js","components/RightBar.js","components/Modal.js","components/Layout.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Rule","React","forwardRef","props","ref","name","handleEdit","rule","isDragging","connectDragSource","connectDropTarget","id","selectRule","selectedRule","_break","matchingRules","unsavedRules","index","theme","removeMatched","words","classes","makeStyles","listItem","cursor","transition","position","listItemText","color","palette","text","primary","secondary","textOverflow","overflow","dot","backgroundColor","top","right","width","height","borderRadius","maximize","error","dark","marginBottom","spacing","elementRef","useRef","opacity","useImperativeHandle","getNode","current","selectRuleMemo","useCallback","handleEditMemo","icons","icon","className","handleClick","useState","bg","setBg","useEffect","length","matchingRule","find","item","indexOf","setTimeout","timer","background","default","style","ListItem","onClick","selected","ListItemText","ListItemIcon","Children","toArray","map","IconButton","disabled","Box","ItemTypes","DropTarget","hover","monitor","component","node","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","hoverClientY","getClientOffset","y","moveRule","connect","dropTarget","DragSource","beginDrag","dragSource","LeftBar","state","textCommand","isSettingsDialogOpen","isConfirmRemoveDialogOpen","isSearchActive","filteredRules","localeSettings","language","processorId","processorTimeout","sayitInstance","handleTextCommand","event","setState","target","value","handleSubmit","iconPlay","key","matched","findMatchingRules","number","handleOpenSettingsModal","handleDialogSelectIdSubmit","selectedSettingsName","handleDelete","removeRule","handleCloseConfirmRemoveDialog","handleSearch","matchedRules","rules","filter","toLowerCase","includes","toggleSearch","createSettingsModal","t","I18n","options","handleClose","handleChange","createInput","handler","type","TextField","variant","textInput","showDialogSelectId","onChange","size","settingsItems","Select","select","autoWidth","option","MenuItem","title","Dialog","open","onClose","fullWidth","DialogTitle","Typography","align","DialogContent","display","justifyContent","mb","settingsContent","settingsTitle","DialogActions","Button","saveSettings","mainIcons","handleOpen","console","log","createIcons","iconsData","prevProps","prevState","this","settings","findMatched","JSON","parse","stringify","socket","onOk","settingsDialog","additionalIcons","renderedRules","main","Toolbar","root","toolbar","search","DndProvider","backend","HTML5Backend","List","list","test","label","clsx","onKeyDown","play","renderConfirmDialog","renderSelectIdDialog","Component","withStyles","minWidth","overflowX","overflowY","padding","border","grey","header","minHeight","divider","breakpoints","down","fontSize","maxWidth","flexDirection","flexBasis","RightBar","defaultState","editable","args","ack","localRule","showDialog","createConfirmModalActions","updateConfig","pendingSelectedRuleId","clearStateOnConfirmModalUnmount","revertChangesFromConfig","cancelSavingChanges","a","closeConfirmDialog","dontSaveAndGo","handleSaveAndGo","FormControl","submitForm","saveAndGoBtn","btnDanger","createSaveSettingsForm","handleSave","isLocalStateWasUpdated","revertChanges","emptyButtons","confirmChanges","note","keywords","onSwitchChange","undefined","helperText","textField","switchControl","Switch","checked","createOptionsData","handlers","isKeyWordsDisabled","keywordsText","breakOnSwitch","handleSetDialogClick","bind","param1OnSwitch","param2Text","confirmText","confirmOnSwitch","createInputHandlers","_this","arg","unsavedRule","isEqual","wasChangedGlobally","removeUnsavedRule","setUnsavedRule","lang","forceUpdate","isLeftBarHidden","toggleLeftBar","mt","box","Paper","container","mx","mainTitle","row","toggleIcon","PureComponent","marginTop","margin","alignItems","textAlign","marginLeft","marginRight","left","paddingTop","Modal","defaultRule","setRuleOnMount","isEdit","cleanState","finishEdit","getAvaliableOptions","commands","currentRules","uniqueOptions","unique","concat","getUniqueName","ruleName","matchingNames","slice","isUnique","lastChar","createForm","FormGroup","InputLabel","shrink","isError","labelId","existingNames","setDialogContent","handleSubmitOnCreate","handleSubmitOnEdit","onSubmitHandler","isOpen","onExited","onEnter","Layout","getSelectedLanguageCommands","getLanguage","Object","entries","command","rest","template","sourceRule","_","sortRules","splice","uuid","shortDataRule","isUnsavedChanges","values","updateCurrentRules","editableRule","updatedRule","updatedRuleOptions","deleteRuleFromConfig","readConfig","config","newConfig","saveConfig","updatedRules","currentSelectedRule","ids","updatedCurrentRules","getRuleShortData","getDataFromConfig","rulesFullData","obj","localStorage","isRuleWasUpdatedGlobally","closeModal","isLargeScreen","isWidthUp","isMdScreen","isSmScreen","isMobileScreen","setItem","menuSize","parseFloat","then","rulesWithId","setLanguage","customClassName","hidden","opened","layout","primaryMinSize","primaryIndex","secondaryMinSize","onSecondaryPaneSizeChange","onDragEnd","toString","secondaryInitialSize","renderModalDialog","withWidth","App","translations","en","require","de","ru","pt","nl","fr","it","es","pl","setTranslations","navigator","userLanguage","substring","newState","getSystemConfig","systemConfig","ready","catch","e","showError","getObject","adapterName","instance","native","setObject","renderError","themeType","GenericApp","logo","themeName","Utils","getThemeName","version","host","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.5fb01038.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React, {\r\n    useRef,\r\n    useImperativeHandle,\r\n    useCallback,\r\n    Children,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { ListItemIcon, IconButton, Box } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport MaximizeIcon from '@material-ui/icons/Maximize';\r\n\r\nimport { DropTarget, DragSource } from 'react-dnd';\r\n\r\nconst Rule = React.forwardRef((props, ref) => {\r\n    const {\r\n        name,\r\n        handleEdit,\r\n        rule,\r\n        isDragging,\r\n        connectDragSource,\r\n        connectDropTarget,\r\n        id,\r\n        selectRule,\r\n        selectedRule,\r\n        _break,\r\n        matchingRules,\r\n        unsavedRules,\r\n        index,\r\n        theme,\r\n        removeMatched,\r\n        words,\r\n    } = props;\r\n\r\n    const classes = makeStyles({\r\n        listItem: {\r\n            cursor: 'pointer',\r\n            transition: 'background-color 0.3s linear',\r\n            position: 'relative',\r\n        },\r\n        listItemText: {\r\n            '& span': {\r\n                color: theme.palette.text.primary,\r\n            },\r\n            '& p': {\r\n                color: theme.palette.text.secondary,\r\n                textOverflow: 'ellipsis',\r\n                overflow: 'hidden',\r\n            },\r\n        },\r\n        dot: {\r\n            position: 'absolute',\r\n            backgroundColor: 'red',\r\n            top: 5,\r\n            right: 15,\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: '50%',\r\n        },\r\n        maximize: {\r\n            color: theme.palette.error?.dark,\r\n            marginBottom: -theme.spacing(2),\r\n        },\r\n    })();\r\n\r\n    const elementRef = useRef(null);\r\n    connectDragSource(elementRef);\r\n    connectDropTarget(elementRef);\r\n    const opacity = isDragging ? 0 : 1;\r\n    useImperativeHandle(ref, () => ({\r\n        getNode: () => elementRef.current,\r\n    }));\r\n\r\n    const selectRuleMemo = useCallback(() => selectRule(id), [id, selectRule]);\r\n    const handleEditMemo = useCallback(() => handleEdit(id), [id, handleEdit]);\r\n\r\n    const icons = [\r\n        {\r\n            icon: _break ? (\r\n                <MaximizeIcon className={classes.maximize} />\r\n            ) : (\r\n                <ArrowDownwardIcon color=\"primary\" />\r\n            ),\r\n        },\r\n        { icon: <EditIcon />, handleClick: handleEditMemo },\r\n    ];\r\n\r\n    const [bg, setBg] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (matchingRules.length) {\r\n            const matchingRule = matchingRules.find(item => item.indexOf === index);\r\n            if (matchingRule) {\r\n                setTimeout(() => setBg(theme?.palette?.secondary.dark), matchingRule.timer);\r\n                setTimeout(() => {\r\n                    setBg(selectedRule.id === id ? theme?.palette?.background?.default : '');\r\n                    if (_break) removeMatched();\r\n                }, 500 * (matchingRule.index + 1));\r\n            } // only when matching rules have been changed\r\n        } // eslint-disable-next-line\r\n    }, [matchingRules]);\r\n\r\n    let secondary = rule !== name ? rule : '';\r\n    secondary += `${secondary ? ' ' : ''}[${words}]`;\r\n    return (\r\n        <div\r\n            ref={elementRef}\r\n            style={{\r\n                opacity,\r\n                backgroundColor: bg,\r\n            }}>\r\n            <ListItem\r\n                onClick={selectRuleMemo}\r\n                selected={selectedRule?.id === id}\r\n                className={classes.listItem}>\r\n                <ListItemText\r\n                    primary={name}\r\n                    secondary={secondary}\r\n                    className={classes.listItemText}\r\n                />\r\n                <ListItemIcon>\r\n                    {Children.toArray(\r\n                        icons.map(({ icon, handleClick }, index) => (\r\n                            <IconButton disabled={!index} onClick={handleClick}>\r\n                                {icon}\r\n                            </IconButton>\r\n                        ))\r\n                    )}\r\n                </ListItemIcon>\r\n                {unsavedRules[id] && <Box className={classes.dot} />}\r\n            </ListItem>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst ItemTypes = {\r\n    RULE: 'rule',\r\n};\r\n\r\nexport default DropTarget(\r\n    ItemTypes.RULE,\r\n    {\r\n        hover(props, monitor, component) {\r\n            if (!component) return null;\r\n\r\n            const node = component.getNode();\r\n            if (!node) {\r\n                return null;\r\n            }\r\n            const dragIndex = monitor.getItem().index;\r\n            const hoverIndex = props.index;\r\n            if (dragIndex === hoverIndex) return;\r\n\r\n            const hoverBoundingRect = node.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            props.moveRule(dragIndex, hoverIndex);\r\n\r\n            monitor.getItem().index = hoverIndex;\r\n        },\r\n    },\r\n    connect => ({ connectDropTarget: connect.dropTarget() })\r\n)(\r\n    DragSource(\r\n        ItemTypes.RULE,\r\n        {\r\n            beginDrag: props => ({\r\n                id: props.id,\r\n                index: props.index,\r\n            }),\r\n        },\r\n        (connect, monitor) => ({\r\n            connectDragSource: connect.dragSource(),\r\n            isDragging: monitor.isDragging(),\r\n        })\r\n    )(Rule)\r\n);\r\n\r\nRule.propTypes = {\r\n    removeRule: PropTypes.func,\r\n    name: PropTypes.string.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    isDragging: PropTypes.bool,\r\n    connectDropTarget: PropTypes.func,\r\n    connectDragTarget: PropTypes.func,\r\n    _break: PropTypes.bool.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    matchingRules: PropTypes.array,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    unsavedRules: PropTypes.object,\r\n};\r\n","import React, { Component, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FormatClearIcon from '@material-ui/icons/FormatClear';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport List from '@material-ui/core/List';\r\nimport {\r\n    TextField,\r\n    Typography,\r\n    Box,\r\n    withStyles,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    Button,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core';\r\n\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport Rule from './Rule';\r\n\r\nconst styles = theme => ({\r\n    test: {\r\n        //position: 'absolute',\r\n        //bottom: '20px',\r\n        //width: '100%',\r\n        //display: 'flex',\r\n        //justifyContent: 'center',\r\n        //boxSizing: 'border-box',\r\n    },\r\n    main: {\r\n        minWidth: 330,\r\n        overflow: 'hidden',\r\n        height: '100%',\r\n    },\r\n    toolbar: {\r\n        background: theme.palette.secondary.main,\r\n    },\r\n    list: {\r\n        height: 'calc(100% - 64px - 64px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'auto'\r\n    },\r\n    root: {\r\n        width: '92%',\r\n        '& .outlined-basic': {\r\n            padding: '12px 10px',\r\n            border: `2px solid ${theme.palette.grey[700]}`,\r\n        },\r\n    },\r\n    header: {\r\n        minHeight: 44,\r\n        height: 'auto',\r\n        padding: theme.spacing(1.3),\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    textInput: {\r\n        width: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n        },\r\n    },\r\n    select: {\r\n        width: '60%',\r\n        '& .MuiOutlinedInput-input-68': {\r\n            padding: 10.5,\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n        },\r\n    },\r\n    settingsTitle: {\r\n        fontSize: '20px',\r\n        maxWidth: 145,\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    settingsContent: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            display: 'flex',\r\n        },\r\n    },\r\n    /*play: {\r\n        padding: 8,\r\n        border: `2px solid ${theme.palette.grey[700]}`,\r\n        marginLeft: 5,\r\n        cursor: 'pointer',\r\n        borderRadius: 5,\r\n    },*/\r\n    search: {\r\n        flexBasis: '80%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexBasis: '70%',\r\n        },\r\n    },\r\n});\r\n\r\nclass LeftBar extends Component {\r\n    state = {\r\n        textCommand: '',\r\n        matchingRules: [],\r\n        isSettingsDialogOpen: false,\r\n        isConfirmRemoveDialogOpen: false,\r\n        isSearchActive: false,\r\n        filteredRules: [],\r\n        localeSettings: {\r\n            language: '',\r\n            processorId: '',\r\n            processorTimeout: 1000,\r\n            sayitInstance: '',\r\n        },\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.settings !== prevProps.settings && this.props.settings) {\r\n            this.setState({\r\n                localeSettings: {\r\n                    ...this.props.settings,\r\n                    language: this.props.settings.language || I18n.t('System'),\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTextCommand = event => {\r\n        this.setState({\r\n            textCommand: event.target.value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event, iconPlay) => {\r\n        if (event.key === 'Enter' || iconPlay) {\r\n            const matched = this.findMatchingRules();\r\n            this.setState({\r\n                matchingRules: matched.map((number, index) => ({\r\n                    indexOf: number,\r\n                    timer: index * 500,\r\n                    index,\r\n                })),\r\n                textCommand: '',\r\n            });\r\n        }\r\n    };\r\n\r\n    removeMatched = () => {\r\n        this.setState({\r\n            matchingRules: [],\r\n        });\r\n    };\r\n\r\n    findMatchingRules() {\r\n        const text = this.state.textCommand;\r\n        return text ? window.findMatched(text, JSON.parse(JSON.stringify(this.props.rules))) : [];\r\n    }\r\n\r\n    handleOpenSettingsModal = () => {\r\n        this.setState({\r\n            isSettingsDialogOpen: true,\r\n        });\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = (selected, selectedSettingsName) => {\r\n        this.setState({\r\n            localeSettings: {\r\n                ...this.state.localeSettings,\r\n                [selectedSettingsName]: selected,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleDelete = () => {\r\n        this.props.removeRule(this.props.selectedRule.id);\r\n        this.handleCloseConfirmRemoveDialog();\r\n    };\r\n\r\n    handleCloseConfirmRemoveDialog = () => {\r\n        this.setState({\r\n            isConfirmRemoveDialogOpen: false,\r\n        });\r\n    };\r\n\r\n    handleSearch = event => {\r\n        const matchedRules = this.props.rules.filter(rule =>\r\n            rule.name.toLowerCase().includes(event.target.value.toLowerCase())\r\n        );\r\n        this.setState({\r\n            filteredRules: matchedRules || [],\r\n        });\r\n    };\r\n\r\n    toggleSearch = () => {\r\n        this.setState({\r\n            isSearchActive: !this.state.isSearchActive,\r\n        });\r\n    };\r\n\r\n    createSettingsModal = () => {\r\n        const { t } = I18n;\r\n        const options = [t('System'), 'en', 'de', 'ru'];\r\n        const { classes } = this.props;\r\n\r\n        const handleClose = () => {\r\n            this.setState({\r\n                isSettingsDialogOpen: false,\r\n            });\r\n        };\r\n\r\n        const submitSettings = () => {\r\n            this.props.saveSettings(this.state.localeSettings, handleClose);\r\n        };\r\n\r\n        const handleChange = (event, name) => {\r\n            this.setState({\r\n                localeSettings: {\r\n                    ...this.state.localeSettings,\r\n                    [name]: event.target.value,\r\n                },\r\n            });\r\n        };\r\n\r\n        const createInput = ({ value, handler, type, selectedSettingsName }) => {\r\n            const onClickHandler = () => {\r\n                if (type !== 'id') return;\r\n                this.setState({\r\n                    showDialogSelectId: true,\r\n                    selectedSettingsName,\r\n                });\r\n            };\r\n            if (!handler) {\r\n                handler = () => {\r\n                    return;\r\n                };\r\n            }\r\n            return (\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    className={this.props.classes.textInput}\r\n                    onClick={onClickHandler}\r\n                    value={value}\r\n                    onChange={handler}\r\n                    size=\"small\"\r\n                />\r\n            );\r\n        };\r\n\r\n        const settingsItems = [\r\n            {\r\n                item: (\r\n                    <Select\r\n                        onChange={event => handleChange(event, 'language')}\r\n                        value={this.state.localeSettings.language}\r\n                        className={classes.select}\r\n                        variant=\"outlined\"\r\n                        autoWidth>\r\n                        {Children.toArray(\r\n                            options.map(option => <MenuItem value={option}>{option}</MenuItem>)\r\n                        )}\r\n                    </Select>\r\n                ),\r\n                title: t('Language'),\r\n                id: 1,\r\n            },\r\n            {\r\n                item: createInput({\r\n                    value: this.state.localeSettings.sayitInstance,\r\n                    type: 'id',\r\n                    selectedSettingsName: 'sayitInstance',\r\n                }),\r\n                title: t('Answer in id'),\r\n                id: 2,\r\n            },\r\n            {\r\n                item: createInput({\r\n                    value: this.state.localeSettings.processorId,\r\n                    type: 'id',\r\n                    selectedSettingsName: 'processorId',\r\n                }),\r\n                title: t(`Processor's id`),\r\n                id: 3,\r\n            },\r\n            {\r\n                item: createInput({\r\n                    value: this.state.localeSettings.processorTimeout,\r\n                    type: 'text',\r\n                    handler: event => handleChange(event, 'processorTimeout'),\r\n                }),\r\n                title: t('Timeout for processor') + '(ms)',\r\n                id: 4,\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Dialog open={this.state.isSettingsDialogOpen} onClose={handleClose} fullWidth>\r\n                <DialogTitle>\r\n                    <Typography variant=\"h4\" component=\"span\" align=\"center\">\r\n                        {t('Settings')}\r\n                    </Typography>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {settingsItems.map(({ item, title, id }) => (\r\n                        <Box\r\n                            display=\"flex\"\r\n                            justifyContent=\"space-between\"\r\n                            mb=\"10px\"\r\n                            key={id}\r\n                            className={classes.settingsContent}>\r\n                            <Typography\r\n                                variant=\"h5\"\r\n                                component=\"h5\"\r\n                                align=\"left\"\r\n                                className={classes.settingsTitle}>\r\n                                {title}\r\n                            </Typography>\r\n                            {item}\r\n                        </Box>\r\n                    ))}\r\n                    <DialogActions>\r\n                        <Button onClick={submitSettings}>Ok</Button>\r\n                        <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    mainIcons = [\r\n        {\r\n            icon: <AddIcon />,\r\n            handler: () => this.props.handleOpen(),\r\n        },\r\n        {\r\n            icon: <SettingsIcon />,\r\n            handler: () => this.handleOpenSettingsModal(),\r\n        },\r\n        {\r\n            icon: <CachedIcon />,\r\n            handler: () => console.log('refresh'),\r\n        },\r\n    ];\r\n\r\n    createIcons = iconsData =>\r\n        iconsData.map(({ icon, handler }, index) => (\r\n            <IconButton onClick={handler} key={index}>\r\n                {icon}\r\n            </IconButton>\r\n        ));\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialogSelectId ?\r\n            <DialogSelectID\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={() => this.setState({ showDialogSelectId: false })}\r\n                onOk={selected =>\r\n                    this.handleDialogSelectIdSubmit(\r\n                        selected,\r\n                        this.state.selectedSettingsName\r\n                    )\r\n                }\r\n            /> : null;\r\n    }\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.isConfirmRemoveDialogOpen ? <Dialog\r\n            open={this.state.isConfirmRemoveDialogOpen}\r\n            onClose={this.handleCloseConfirmRemoveDialog}\r\n            fullWidth>\r\n            <DialogTitle>{I18n.t('Are you sure?')}</DialogTitle>\r\n            <DialogContent>\r\n                <Typography variant=\"h5\" component=\"h5\">\r\n                    {I18n.t('You want to delete') + ': '}\r\n                    <strong>{this.props.selectedRule.name}</strong>\r\n                </Typography>\r\n                <DialogActions>\r\n                    <Button onClick={this.handleDelete}>{I18n.t('Ok')}</Button>\r\n                    <Button onClick={this.handleCloseConfirmRemoveDialog}  color=\"primary\">\r\n                        {I18n.t('Cancel')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </DialogContent>\r\n        </Dialog> : null;\r\n    }\r\n\r\n    render() {\r\n        const { selectedRule, moveRule, handleEdit, rules, selectRule, classes } = this.props;\r\n        const { filteredRules, isSearchActive } = this.state;\r\n        const settingsDialog = this.createSettingsModal();\r\n        const additionalIcons = [\r\n            {\r\n                icon: !isSearchActive && <DeleteIcon />,\r\n                handler: () =>\r\n                    this.setState({\r\n                        isConfirmRemoveDialogOpen: true,\r\n                    }),\r\n            },\r\n            {\r\n                icon: isSearchActive ? <FormatClearIcon /> : <SearchIcon />,\r\n                handler: () => this.toggleSearch(),\r\n            },\r\n        ];\r\n        const renderedRules = filteredRules.length ? filteredRules : rules;\r\n\r\n        return (\r\n            <Box className={classes.main}>\r\n                <Toolbar position=\"static\" classes={{root: classes.toolbar}} >\r\n                    {isSearchActive ?\r\n                        <TextField className={classes.search} onChange={this.handleSearch} />\r\n                     :\r\n                        <div>{this.createIcons(this.mainIcons)}</div>\r\n                    }\r\n                    <div>{this.createIcons(additionalIcons)}</div>\r\n                </Toolbar>\r\n\r\n                <DndProvider backend={HTML5Backend}>\r\n                    <List className={classes.list}>\r\n                        {renderedRules.map((rule, index) => (\r\n                            <Rule\r\n                                theme={this.props.theme}\r\n                                handleEdit={handleEdit}\r\n                                {...rule}\r\n                                index={index}\r\n                                moveRule={moveRule}\r\n                                key={rule.id}\r\n                                selectRule={selectRule}\r\n                                selectedRule={selectedRule}\r\n                                matchingRules={this.state.matchingRules}\r\n                                unsavedRules={this.props.unsavedRules}\r\n                                removeMatched={this.removeMatched}\r\n                            />\r\n                        ))}\r\n                    </List>\r\n                </DndProvider>\r\n\r\n                <Toolbar className={classes.test} variant=\"dense\">\r\n                    <TextField\r\n                        onChange={this.handleTextCommand}\r\n                        label={I18n.t('Test phrase')}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        className={clsx('outlined-basic', classes.root)}\r\n                        onKeyDown={this.handleSubmit}\r\n                        value={this.state.textCommand}\r\n                    />\r\n                    <IconButton variant=\"outlined\" onClick={event => this.handleSubmit(event, true)}>\r\n                        <PlayArrowIcon className={classes.play}/>\r\n                    </IconButton>\r\n                </Toolbar>\r\n\r\n                {settingsDialog}\r\n\r\n                {this.renderConfirmDialog()}\r\n\r\n                {this.renderSelectIdDialog()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(LeftBar);\r\n\r\nLeftBar.propTypes = {\r\n    handleOpen: PropTypes.func.isRequired,\r\n    rules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n        })\r\n    ),\r\n    moveRule: PropTypes.func.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    removeRule: PropTypes.func,\r\n    handleEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    settings: PropTypes.object,\r\n    socket: PropTypes.object.isRequired,\r\n    saveSettings: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object,\r\n    toggleLeftBar: PropTypes.func,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport { TextField, Switch, Typography, withStyles, Box } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    box: {\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-around',\r\n        padding: theme.spacing(2),\r\n        width: 'calc(100% - ' + theme.spacing(4) + 'px)',\r\n        position: 'relative',\r\n        '& .outlined-basic': {\r\n            padding: '12px 10px',\r\n            //border: `2px solid ${theme.palette.grey[700]}`,\r\n        },\r\n    },\r\n    container: {\r\n        width: '70%',\r\n        // minWidth: 340,\r\n        padding: theme.spacing(2),\r\n        [theme.breakpoints.down('md')]: {\r\n            width: '90%',\r\n        },\r\n        [theme.breakpoints.down('lg')]: {\r\n            width: '80%',\r\n        },\r\n    },\r\n    textField: {\r\n        flexBasis: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    },\r\n    submitForm: {\r\n        flexDirection: 'row',\r\n        margin: '10px auto 20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%',\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexDirection: 'column',\r\n        },\r\n    },\r\n    mainTitle: {\r\n        marginBottom: '30px',\r\n    },\r\n    title: {\r\n        marginTop: 16,\r\n        [theme.breakpoints.down('md')]: {\r\n            maxWidth: 200,\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n        },\r\n    },\r\n    row: {\r\n        [theme.breakpoints.down('md')]: {\r\n            alignItems: 'center',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-start',\r\n            textAlign: 'center',\r\n        },\r\n    },\r\n    btnDanger: {\r\n        marginLeft: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginLeft: 0,\r\n            marginTop: theme.spacing(0.5),\r\n        },\r\n        //backgroundColor: theme.palette.error?.dark,\r\n    },\r\n    saveAndGoBtn: {\r\n        marginRight: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginRight: 0,\r\n            marginBottom: theme.spacing(0.5),\r\n        },\r\n    },\r\n    toggleIcon: {\r\n        position: 'absolute',\r\n        top: -15,\r\n        left: 0,\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: 20,\r\n        height: 25,\r\n        cursor: 'pointer',\r\n        padding: theme.spacing(1),\r\n        borderRadius: '0 5px 5px 0',\r\n    },\r\n    switchControl: {\r\n        paddingTop: theme.spacing(1),\r\n        flexBasis: '60%'\r\n    },\r\n    emptyButtons: {\r\n        height: 36,\r\n    }\r\n});\r\n\r\nclass RightBar extends PureComponent {\r\n    defaultState = {\r\n        words: I18n.t('Create Rule'),\r\n        name: I18n.t('Create Rule'),\r\n        _break: false,\r\n        editable: false,\r\n        args: [\r\n            {\r\n                default: I18n.t('Argument') + ' 1',\r\n            },\r\n            {\r\n                default: I18n.t('Argument') + ' 2',\r\n            },\r\n        ],\r\n        ack: {\r\n            name: '',\r\n            default: `${I18n.t('Confirmation text')}`,\r\n        },\r\n        id: 0,\r\n    };\r\n\r\n    state = {\r\n        localRule: this.defaultState,\r\n        showDialog: false,\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.selectedRule?.name !== this.props.selectedRule?.name ||\r\n            prevState.localRule?.name !== this.state.localRule?.name) {\r\n            if (!this.props.selectedRule.name) {\r\n                this.setState({\r\n                    localRule: this.defaultState,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    localRule: {\r\n                        ...this.props.selectedRule,\r\n                    },\r\n                });\r\n            }\r\n        } else if (this.state.isLocalStateWasUpdated) {\r\n            const unsavedRule = this.props.unsavedRules[this.state.localRule.id];\r\n\r\n            if (\r\n                isEqual(this.props.selectedRule, this.state.localRule) &&\r\n                !unsavedRule?.wasChangedGlobally\r\n            ) {\r\n                this.setState({\r\n                    isLocalStateWasUpdated: false,\r\n                });\r\n\r\n                if (!unsavedRule?.wasChangedGlobally) {\r\n                    this.props.removeUnsavedRule(this.state.localRule.id);\r\n                }\r\n            } else if (!unsavedRule && !this.props.pendingSelectedRuleId) {\r\n                this.props.setUnsavedRule(this.state.localRule.id);\r\n            }\r\n        } else if (\r\n            !this.state.isLocalStateWasUpdated &&\r\n            this.props.unsavedRules[this.state.localRule.id]\r\n        ) {\r\n            this.setState({\r\n                isLocalStateWasUpdated: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.pendingSelectedRuleId && this.state.isLocalStateWasUpdated) {\r\n            if (this.props.pendingSelectedRuleId === this.state.localRule.id) return;\r\n            this.setState({\r\n                confirmChanges: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.lang !== prevProps.lang) {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.localRule === this.defaultState && this.props.selectedRule) {\r\n            this.setState({\r\n                localRule: this.props.selectedRule,\r\n            });\r\n        }\r\n    }\r\n\r\n    createConfirmModalActions = () => {\r\n        const { t } = I18n;\r\n        const {\r\n            updateConfig,\r\n            classes,\r\n            selectRule,\r\n            pendingSelectedRuleId,\r\n            clearStateOnConfirmModalUnmount,\r\n            revertChangesFromConfig,\r\n        } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const cancelSavingChanges = async () => {\r\n            await clearStateOnConfirmModalUnmount();\r\n            this.closeConfirmDialog();\r\n        };\r\n\r\n        const dontSaveAndGo = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount(localRule.id);\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        const handleSaveAndGo = async () => {\r\n            await updateConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount();\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        return (\r\n            <FormControl className={classes.submitForm}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={handleSaveAndGo}\r\n                    color=\"primary\"\r\n                    className={classes.saveAndGoBtn}>\r\n                    {t('Save and go')}\r\n                </Button>\r\n                <Button onClick={dontSaveAndGo} variant=\"contained\" color=\"secondary\">\r\n                    {t(`Don't save and go`)}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.btnDanger}\r\n                    onClick={cancelSavingChanges}>\r\n                    {t('Cancel')}\r\n                </Button>\r\n            </FormControl>\r\n        );\r\n    };\r\n\r\n    createSaveSettingsForm = () => {\r\n        const { t } = I18n;\r\n        const { updateConfig, classes, revertChangesFromConfig, selectedRule } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const handleSave = async () => {\r\n            await updateConfig(localRule);\r\n            this.setState({\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        const revertChanges = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n\r\n            await this.setState({\r\n                localRule: selectedRule,\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        if (!this.state.isLocalStateWasUpdated) {\r\n            return <div className={ this.props.classes.emptyButtons }/>\r\n        } else {\r\n            return <FormControl className={classes.submitForm}>\r\n                <Button onClick={handleSave} variant=\"contained\" color=\"primary\">\r\n                    {t('Save')}\r\n                </Button>\r\n                <Button variant=\"contained\" className={classes.btnDanger} onClick={revertChanges}>\r\n                    {t('Cancel')}\r\n                </Button>\r\n            </FormControl>;\r\n        }\r\n    };\r\n\r\n    closeConfirmDialog = () => {\r\n        this.setState({\r\n            isLocalStateWasUpdated: false,\r\n            confirmChanges: false,\r\n        });\r\n    };\r\n\r\n    createInput = ({\r\n        value,\r\n        label,\r\n        onChange,\r\n        type,\r\n        onClick,\r\n        note,\r\n        disabled = this.state.localRule === this.defaultState,\r\n        keywords,\r\n        key,\r\n        onSwitchChange,\r\n    }) => {\r\n        if ((value === undefined || value === null) && !label && !keywords) {\r\n            return;\r\n        }\r\n        const { classes } = this.props;\r\n\r\n        return type !== 'checkbox' ?\r\n            <TextField\r\n                //label={label}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                disabled={disabled}\r\n                value={value}\r\n                helperText={note || ''}\r\n                onClick={onClick}\r\n                onChange={onChange}\r\n                key={key}\r\n                className={clsx('outlined-basic', classes.textField)}\r\n            />\r\n            :\r\n            <FormControl classes={{ root: classes.switchControl }}>\r\n                <Switch\r\n                    key={key}\r\n                    onClick={onSwitchChange}\r\n                    color={'primary'}\r\n                    disabled={disabled}\r\n                    checked={!!value}\r\n                />\r\n            </FormControl>;\r\n    };\r\n\r\n    createOptionsData = (state = this.state) => {\r\n        const {\r\n            localRule: { args, ack, editable, _break },\r\n        } = state;\r\n        const { t } = I18n;\r\n\r\n        const createInput = this.createInput;\r\n        const handlers = this.handlers;\r\n\r\n        const isKeyWordsDisabled = () => {\r\n            if (editable === undefined) {\r\n                return false;\r\n            } else if (editable === false) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        return [\r\n            {\r\n                title: t('Keywords'),\r\n                item: createInput({\r\n                    value: this.state.localRule?.words || '',\r\n                    onChange: handlers.keywordsText,\r\n                    keywords: true,\r\n                    disabled: isKeyWordsDisabled(),\r\n                    key: 'keywords',\r\n                }),\r\n                id: 1,\r\n            },\r\n            {\r\n                title: t('Interrupt processing'),//`${t('Break')}:`,\r\n                item: createInput({\r\n                    type: 'checkbox',\r\n                    value: _break,\r\n                    onSwitchChange: handlers.breakOnSwitch,\r\n                    key: 'break',\r\n                }),\r\n                id: 2,\r\n            },\r\n            {\r\n                title: args && args[0]?.name,//`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[0]?.default,\r\n                    label: args && args[0]?.name,\r\n                    type: args && args[0]?.type,\r\n                    onClick: this.handleSetDialogClick.bind(this, args && args[0]),\r\n                    onSwitchChange: handlers.param1OnSwitch,\r\n                    key: 'Param1',\r\n                }),\r\n                id: 3,\r\n            },\r\n            {\r\n                title: args && args[1]?.name,//`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[1]?.default,\r\n                    label: args && args[1]?.name,\r\n                    onChange: handlers.param2Text,\r\n                    key: 'Param2',\r\n                }),\r\n                id: 4,\r\n            },\r\n            {\r\n                title: t('Confirmation text'),\r\n                item: createInput({\r\n                    value: ack && ack.default,\r\n                    label: ack && ack.name,\r\n                    note: t('You can use %s, that will be replaced with current value of state. %u will be replaced by unit'),\r\n                    type: ack && ack.type,\r\n                    key: 'confirmationText',\r\n                    onChange: handlers.confirmText,\r\n                    onSwitchChange: handlers.confirmOnSwitch,\r\n                }),\r\n                id: 5,\r\n            },\r\n        ];\r\n    };\r\n\r\n    createInputHandlers = () => {\r\n        const _this = this;\r\n\r\n        return {\r\n            keywordsText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        words: event.target.value,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param2Text(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            index > 0\r\n                                ? {\r\n                                      ...arg,\r\n                                      default: event.target.value,\r\n                                  }\r\n                                : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: event.target.value,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param1OnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            !index ? { ...arg, default: !arg.default ? true : !arg.default } : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmOnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: !_this.state.localRule.ack.default,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            async breakOnSwitch() {\r\n                await _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        _break: !_this.state.localRule._break,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n        };\r\n    };\r\n\r\n    handlers = this.createInputHandlers();\r\n\r\n    handleSetDialogClick = arg => {\r\n        if (arg.type === 'id') {\r\n            this.setState({\r\n                showDialog: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = selected => {\r\n        this.setState({\r\n            localRule: {\r\n                ...this.state.localRule,\r\n                args: this.state.localRule.args.map((arg, index) =>\r\n                    !index\r\n                        ? {\r\n                              ...arg,\r\n                              default: selected,\r\n                          }\r\n                        : arg\r\n                ),\r\n            },\r\n            isLocalStateWasUpdated: true,\r\n        });\r\n    };\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.confirmChanges ?\r\n            <Dialog fullWidth open={this.state.confirmChanges} maxWidth={'md'}>\r\n                <DialogTitle>\r\n                    {I18n.t('Please confirm or cancel changes before leaving')}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {I18n.t('You have changed rule') + ': '} <strong>{this.state.localRule.name}</strong>\r\n                    </Typography>\r\n                    <DialogActions>{this.createConfirmModalActions()}</DialogActions>\r\n                </DialogContent>\r\n            </Dialog> : null;\r\n    }\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ?\r\n            <DialogSelectID\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={id => {\r\n                    console.log(id);\r\n                    this.setState({ showDialog: false });\r\n                }}\r\n                onOk={this.handleDialogSelectIdSubmit}\r\n            /> : null;\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            localRule: { name },\r\n            isLocalStateWasUpdated\r\n        } = this.state;\r\n        const { classes, isLeftBarHidden, toggleLeftBar } = this.props;\r\n\r\n        return (\r\n            <Box mt=\"30px\" className={classes.box}>\r\n                <Paper className={classes.container} mx=\"auto\">\r\n                    <Typography\r\n                        variant=\"h4\"\r\n                        align=\"center\"\r\n                        className={!isLocalStateWasUpdated ? classes.mainTitle : ''}>\r\n                        {name}\r\n                    </Typography>\r\n\r\n                    {this.createSaveSettingsForm()}\r\n\r\n                    {this.createOptionsData().map(({ title, item, id }) => {\r\n                        if (!item) return null;\r\n                        return (\r\n                            <Box\r\n                                display=\"flex\"\r\n                                justifyContent=\"space-between\"\r\n                                mb=\"10px\"\r\n                                key={id}\r\n                                className={classes.row}>\r\n                                <Typography\r\n                                    variant=\"h6\"\r\n                                    component=\"h6\"\r\n                                    align=\"left\"\r\n                                    className={classes.title}>\r\n                                    {title ? title + ':' : ''}\r\n                                </Typography>\r\n                                {item}\r\n                            </Box>\r\n                        );\r\n                    })}\r\n                </Paper>\r\n\r\n                <Box className={classes.toggleIcon} onClick={toggleLeftBar}>\r\n                    {isLeftBarHidden ? <MenuIcon /> : <ArrowBackIcon />}\r\n                </Box>\r\n\r\n                {this.renderSelectIdDialog()}\r\n                {this.renderConfirmDialog()}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RightBar);\r\n\r\nRightBar.propTypes = {\r\n    selectedRule: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        id: PropTypes.string,\r\n        rule: PropTypes.string,\r\n        ack: PropTypes.shape({\r\n            default: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n        }),\r\n        arg: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n                type: PropTypes.string,\r\n                default: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\r\n            })\r\n        ),\r\n        words: PropTypes.string,\r\n    }).isRequired,\r\n    socket: PropTypes.object.isRequired,\r\n    updateCurrentRules: PropTypes.func.isRequired,\r\n    updateConfig: PropTypes.func.isRequired,\r\n    revertChangesFromConfig: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    pendingSelectedRuleId: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n    clearStateOnConfirmModalUnmount: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object.isRequired,\r\n    setUnsavedRule: PropTypes.func.isRequired,\r\n    removeUnsavedRule: PropTypes.func.isRequired,\r\n    toggleLeftBar: PropTypes.func.isRequired,\r\n    isLeftBarHidden: PropTypes.bool,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { DialogActions, Button, Select, TextField, MenuItem, withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    select: {\r\n        width: '50%',\r\n        marginBottom: theme.spacing(2.5),\r\n    },\r\n    TextField: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n});\r\n\r\nclass Modal extends Component {\r\n    defaultRule = {\r\n        rule: I18n.t('Select rule'),\r\n        name: I18n.t('New rule'),\r\n        id: '',\r\n    };\r\n\r\n    state = {\r\n        localRule: this.defaultRule,\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.currentRules !== this.props.currentRules) {\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.cleanState();\r\n    }\r\n\r\n    setRuleOnMount = () => {\r\n        const { isEdit, selectedRule } = this.props;\r\n        if (isEdit) {\r\n            this.setState({\r\n                localRule: selectedRule,\r\n            });\r\n        }\r\n    };\r\n\r\n    cleanState = () => {\r\n        if (this.props.isEdit) {\r\n            this.props.finishEdit(this.state.localRule);\r\n        }\r\n        this.setState({\r\n            localRule: this.defaultRule,\r\n        });\r\n    };\r\n\r\n    getAvaliableOptions = () => {\r\n        const { commands, currentRules, selectedRule, isEdit } = this.props;\r\n\r\n        const uniqueOptions = commands?.filter(\r\n            option => !(option.unique && currentRules.find(item => item?.rule === option.rule))\r\n        );\r\n\r\n        return selectedRule?.unique && isEdit ? uniqueOptions.concat(selectedRule) : uniqueOptions;\r\n    };\r\n\r\n    getUniqueName = ruleName => {\r\n        const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n        const matchingNames = existingNames.filter(\r\n            name => name.slice(0, name.length - 2) === ruleName\r\n        );\r\n        const isUnique = this.props.commands.find(\r\n            ({ rule, unique }) => rule === ruleName && unique\r\n        );\r\n\r\n        if (matchingNames.length) {\r\n            let name = matchingNames[matchingNames.length - 1];\r\n            let lastChar = name.slice(name.length - 1);\r\n\r\n            return name.slice(0, name.length - 1) + ++lastChar;\r\n        }\r\n\r\n        return isUnique ? ruleName : `${ruleName} 1`;\r\n    };\r\n\r\n    createForm = () => {\r\n        const { localRule } = this.state;\r\n        const { classes } = this.props;\r\n        const commands = this.getAvaliableOptions();\r\n\r\n        const handleSelectChange = event =>\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    rule: event.target.value,\r\n                    name: this.getUniqueName(event.target.value),\r\n                    isError: '',\r\n                },\r\n            });\r\n\r\n        const handleInputChange = event => {\r\n            const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    name: event.target.value,\r\n                    isError: existingNames.includes(event.target.value)\r\n                        ? `${I18n.t('Name already exist')}`\r\n                        : '',\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <FormGroup>\r\n                <FormControl>\r\n                    <InputLabel shrink id=\"rule\">\r\n                        {I18n.t('Rule')}\r\n                    </InputLabel>\r\n                    <Select\r\n                        onChange={handleSelectChange}\r\n                        value={localRule.rule}\r\n                        labelId={'rule'}\r\n                        className={classes.select}>\r\n                        {commands?.map(option => (\r\n                            <MenuItem key={option.rule} value={option.rule}>\r\n                                {option.rule}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    id=\"standard-basic\"\r\n                    label={this.state.localRule.isError || I18n.t('Name')}\r\n                    value={localRule.name}\r\n                    onChange={handleInputChange}\r\n                    error={!!this.state.localRule.isError}\r\n                    className={classes.TextField}></TextField>\r\n            </FormGroup>\r\n        );\r\n    };\r\n\r\n    setDialogContent = () => {\r\n        const { handleClose, handleSubmitOnCreate, handleSubmitOnEdit, isEdit } = this.props;\r\n        const onSubmitHandler = !isEdit ? handleSubmitOnCreate : handleSubmitOnEdit;\r\n        return (\r\n            <DialogContent>\r\n                {this.createForm()}\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={onSubmitHandler.bind(\r\n                            this,\r\n                            this.state.localRule,\r\n                            this.state.localRule.isError\r\n                        )}>\r\n                        Ok\r\n                    </Button>\r\n                    <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                </DialogActions>\r\n            </DialogContent>\r\n        );\r\n    };\r\n    render() {\r\n        return (\r\n            <Dialog\r\n                open={this.props.isOpen}\r\n                onClose={this.props.handleClose}\r\n                onExited={this.cleanState}\r\n                onEnter={this.setRuleOnMount}\r\n                fullWidth>\r\n                <DialogTitle>\r\n                    {I18n.t(!this.props.isEdit ? 'Create new rule' : 'Edit rule')}\r\n                </DialogTitle>\r\n                {this.setDialogContent()}\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Modal);\r\n\r\nModal.propTypes = {\r\n    handleClose: PropTypes.func.isRequired,\r\n    handleSubmitOnCreate: PropTypes.func.isRequired,\r\n    handleSubmitOnEdit: PropTypes.func.isRequired,\r\n    isEdit: PropTypes.bool.isRequired,\r\n    commands: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool.isRequired,\r\n        }).isRequired\r\n    ),\r\n    isOpen: PropTypes.bool.isRequired,\r\n    currentRules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool,\r\n        })\r\n    ).isRequired,\r\n    finishEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\r\nimport 'react-splitter-layout/lib/index.css';\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport LeftBar from './LeftBar';\r\nimport RightBar from './RightBar';\r\nimport Modal from './Modal';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    layout: {\r\n        '& .layout-pane:first': {\r\n            overflow: 'hidden',\r\n        },\r\n    },\r\n    hidden: {\r\n        '& .layout-pane:first-child': {\r\n            width: '0 !important',\r\n        },\r\n        background: theme.palette.background.default,\r\n    },\r\n    opened: {\r\n        '& .layout-pane-primary': {\r\n            width: '',\r\n        },\r\n        overflow: 'hidden',\r\n        background: theme.palette.background.default,\r\n    },\r\n});\r\n\r\nclass Layout extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.menuSize = parseFloat(window.localStorage.getItem('App.menuSize')) || 350;\r\n        this.state = {\r\n            currentRules: [],\r\n            isOpen: false,\r\n            isEdit: false,\r\n            selectedRule: {},\r\n            unsavedRules: {},\r\n            isLeftBarHidden: window.localStorage.getItem('App.menuHidden') === 'true',\r\n        };\r\n        this.commands = this.getSelectedLanguageCommands();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataFromConfig().then(({ rules, ...settings }) => {\r\n            const rulesWithId = rules.map(rule =>\r\n                !rule.id || !rule.name\r\n                    ? {\r\n                          ...rule,\r\n                          id: !rule.id ? uuid() : rule.id,\r\n                          name: !rule.name\r\n                              ? window.commands[rule.template]?.name[I18n.getLanguage()]\r\n                              : rule.name,\r\n                      }\r\n                    : rule\r\n            );\r\n            if (!isEqual(rules, rulesWithId)) {\r\n                this.props.saveConfig({ rules: rulesWithId, ...settings });\r\n            }\r\n        });\r\n        if (!this.isMdScreen) {\r\n            this.setState({\r\n                isLeftBarHidden: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.settings?.language !== this.state.lang && this.state.settings?.language) {\r\n            const lang = this.state.settings?.language;\r\n            I18n.setLanguage(lang);\r\n\r\n            this.commands = this.getSelectedLanguageCommands();\r\n        }\r\n        if (\r\n            prevState.selectedRule?.id !== this.state.selectedRule?.id &&\r\n            prevState.selectedRule?.id\r\n        ) {\r\n            localStorage.setItem('selectedRule', this.state.selectedRule.id);\r\n        }\r\n    }\r\n\r\n    getSelectedLanguageCommands = () => {\r\n        const lang = this.state?.settings?.language || I18n.getLanguage();\r\n\r\n        return [\r\n            { rule: I18n.t('Select rule'), unique: false },\r\n            ...Object.entries(window.commands).map(item => {\r\n                const [key, command] = item;\r\n                const { name, ...rest } = command;\r\n                const obj = {\r\n                    ...rest,\r\n                    rule: command?.name[lang],\r\n                    template: key,\r\n                    unique: command.unique,\r\n                    words: command.words && command.words[lang],\r\n                    args: command.args?.map(arg => ({\r\n                        ...arg,\r\n                        name: arg.name[lang] || '',\r\n                        default: arg.default || (arg.type === 'checkbox' ? false : ''),\r\n                    })),\r\n                    ack: command.ack && {\r\n                        ...command.ack,\r\n                        name: command.ack.name[lang],\r\n                        default: !command.ack?.default\r\n                            ? command.ack?.type === 'checkbox'\r\n                                ? false\r\n                                : ''\r\n                            : command.ack.default[lang],\r\n                    },\r\n                };\r\n\r\n                return obj;\r\n            }),\r\n        ];\r\n    };\r\n\r\n    commands = this.getSelectedLanguageCommands();\r\n\r\n    moveRule = (dragIndex, hoverIndex) => {\r\n        const { currentRules } = this.state;\r\n        const sourceRule = currentRules.find((_, index) => index === hoverIndex);\r\n        const sortRules = currentRules.filter((_, index) => index !== hoverIndex);\r\n        sortRules.splice(dragIndex, 0, sourceRule);\r\n        this.setState({ currentRules: sortRules });\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.setState({\r\n            isOpen: true,\r\n        });\r\n    };\r\n    handleClose = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    handleSubmitOnCreate = (selectedRule, isError) => {\r\n        if (isError) return;\r\n\r\n        const id = uuid();\r\n        const shortDataRule = {\r\n            ...selectedRule,\r\n            id,\r\n            _break: true,\r\n        };\r\n\r\n        const rule = {\r\n            ...this.commands.find(command => command.rule === shortDataRule.rule),\r\n            ...shortDataRule,\r\n        };\r\n        const isUnsavedChanges = Object.values(this.state.unsavedRules).length;\r\n\r\n        this.setState(\r\n            {\r\n                currentRules: [...this.state.currentRules, rule],\r\n                unsavedRules: {\r\n                    ...this.state.unsavedRules,\r\n                    [id]: {\r\n                        id,\r\n                        wasChangedGlobally: true,\r\n                    },\r\n                },\r\n                selectedRule: !isUnsavedChanges ? rule : this.state.selectedRule,\r\n            },\r\n            () => {\r\n                if (isUnsavedChanges) {\r\n                    this.selectRule(rule.id);\r\n                }\r\n            }\r\n        );\r\n\r\n        this.handleClose();\r\n    };\r\n\r\n    handleSubmitOnEdit = (selectedRule, isError) => {\r\n        if (isError) return;\r\n\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [selectedRule.id]: {\r\n                    id: selectedRule.id,\r\n                    wasChangedGlobally: true,\r\n                },\r\n            },\r\n            currentRules: this.updateCurrentRules(selectedRule),\r\n        });\r\n        this.handleClose();\r\n    };\r\n\r\n    selectRule = id => {\r\n        const { selectedRule, currentRules } = this.state;\r\n\r\n        if (selectedRule.id === id) {\r\n            // ignore\r\n        } else if (this.state.unsavedRules[selectedRule.id]) {\r\n            this.setState({\r\n                pendingSelectedRuleId: id,\r\n            });\r\n        } else {\r\n            const rule = currentRules.find(item => item.id === id);\r\n\r\n            this.setState({\r\n                selectedRule: rule,\r\n            });\r\n        }\r\n    };\r\n\r\n    updateCurrentRules = selectedRule => {\r\n        return this.state.currentRules.map(item =>\r\n            item.id === selectedRule.id ? selectedRule : item\r\n        );\r\n    };\r\n\r\n    handleEdit = () => {\r\n        this.setState({\r\n            isEdit: true,\r\n        });\r\n        this.handleOpen();\r\n    };\r\n\r\n    finishEdit = editableRule => {\r\n        let updatedRule;\r\n\r\n        const { rule, id, name, _break, template } = editableRule;\r\n        const initialSelectedRule = this.state.selectedRule;\r\n\r\n        if (initialSelectedRule.rule !== rule) {\r\n            const updatedRuleOptions = this.commands.find(command => command.rule === rule);\r\n            updatedRule = {\r\n                ...updatedRuleOptions,\r\n                name,\r\n                rule,\r\n                id,\r\n                _break,\r\n                template,\r\n            };\r\n        } else {\r\n            updatedRule = editableRule;\r\n        }\r\n        this.setState({\r\n            isEdit: false,\r\n            selectedRule: updatedRule,\r\n        });\r\n    };\r\n\r\n    removeRule = id => {\r\n        const deleteRuleFromConfig = async () => {\r\n            const config = await this.props.readConfig();\r\n            const { rules, ...settings } = config;\r\n            const newConfig = { rules: rules.filter(rule => rule.id !== id), ...settings };\r\n            this.props.saveConfig(newConfig);\r\n        };\r\n        const updatedRules = this.state.currentRules.filter(rule => rule.id !== id);\r\n        this.setState(\r\n            {\r\n                currentRules: updatedRules,\r\n                selectedRule: updatedRules.length ? updatedRules[updatedRules.length - 1] : {},\r\n            },\r\n            deleteRuleFromConfig\r\n        );\r\n    };\r\n\r\n    updateConfig = async currentSelectedRule => {\r\n        const { currentRules } = this.state;\r\n        const { [currentSelectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === currentSelectedRule.id);\r\n        const updatedCurrentRules = matchingRule\r\n            ? this.updateCurrentRules(currentSelectedRule)\r\n            : currentRules;\r\n\r\n        let updatedRules;\r\n        if (matchingRule) {\r\n            updatedRules = rules.map(rule =>\r\n                rule.id === currentSelectedRule.id\r\n                    ? this.getRuleShortData(currentSelectedRule)\r\n                    : rule\r\n            );\r\n        } else {\r\n            updatedRules = [...rules, this.getRuleShortData(currentSelectedRule)];\r\n        }\r\n\r\n        const newConfig = { rules: updatedRules, ...settings };\r\n        await this.props.saveConfig(newConfig);\r\n\r\n        this.setState({\r\n            selectedRule: currentSelectedRule || this.state.selectedRule || {},\r\n            currentRules: updatedCurrentRules,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n    getDataFromConfig = async () => {\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n        const lang = I18n.getLanguage();\r\n\r\n        const rulesFullData = rules.map(rule => {\r\n            const obj = window.commands[rule.template];\r\n\r\n            return {\r\n                ...obj,\r\n                rule: obj?.name[lang],\r\n                ack: {\r\n                    ...obj.ack,\r\n                    default: rule.ack || (obj.ack?.type === 'checkbox' ? false : ''),\r\n                    name: obj.ack?.name[lang],\r\n                },\r\n                args: obj.args?.map((arg, index) => ({\r\n                    ...arg,\r\n                    default: rule.args[index] || (arg?.type === 'checkbox' ? false : ''),\r\n                    name: arg?.name[lang] || '',\r\n                })),\r\n                name: rule.name || obj?.name[lang],\r\n                words: rule.words,\r\n                _break: rule._break,\r\n                id: rule.id || uuid(),\r\n                template: rule.template,\r\n            };\r\n        });\r\n        await this.setState({\r\n            currentRules: rulesFullData,\r\n            selectedRule:\r\n                rulesFullData.find(rule => rule.id === localStorage.getItem('selectedRule')) ||\r\n                rulesFullData[rulesFullData.length - 1] ||\r\n                {},\r\n            settings,\r\n        });\r\n        return config;\r\n    };\r\n\r\n    revertChangesFromConfig = async selectedRule => {\r\n        const { currentRules } = this.state;\r\n        const { [selectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === selectedRule.id);\r\n        const isRuleWasUpdatedGlobally = this.state.unsavedRules[selectedRule.id]\r\n            ?.wasChangedGlobally;\r\n\r\n        let updatedRules;\r\n        if (matchingRule && isRuleWasUpdatedGlobally) {\r\n            updatedRules = currentRules.map(rule =>\r\n                rule.id === matchingRule.id\r\n                    ? {\r\n                          ...rule,\r\n                          ack: {\r\n                              ...rule.ack,\r\n                              default: matchingRule.ack || '',\r\n                          },\r\n                          args: rule.args?.map(arg => ({\r\n                              ...arg,\r\n                              default: matchingRule.arg || '',\r\n                          })),\r\n                          rule: window.commands[matchingRule.template].name[I18n.getLanguage()],\r\n                          words: matchingRule.words || '',\r\n                          name: matchingRule.name || '',\r\n                          _break: matchingRule._break || true,\r\n                      }\r\n                    : rule\r\n            );\r\n        } else if (!matchingRule) {\r\n            updatedRules = currentRules.filter(rule => rule.id !== selectedRule.id);\r\n        }\r\n\r\n        await this.setState({\r\n            currentRules: updatedRules || currentRules,\r\n            selectedRule:\r\n                (isRuleWasUpdatedGlobally\r\n                    ? updatedRules.find(rule => rule.id === selectedRule.id)\r\n                    : this.state.selectedRule) || {},\r\n            settings,\r\n            unsavedRules: ids,\r\n        });\r\n\r\n        if (this.state.currentRules.length !== currentRules.length) {\r\n            this.setState({\r\n                selectedRule: this.state.currentRules[this.state.currentRules.length - 1] || {},\r\n            });\r\n        }\r\n    };\r\n\r\n    saveSettings = async (localeSettings, closeModal) => {\r\n        const config = await this.props.readConfig();\r\n        const { rules } = config;\r\n        this.setState({\r\n            settings: localeSettings,\r\n        });\r\n        const newConfig = { rules, ...localeSettings };\r\n        await this.props.saveConfig(newConfig);\r\n        closeModal();\r\n    };\r\n\r\n    setUnsavedRule = id => {\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [id]: {\r\n                    id,\r\n                    wasChangedGlobally: false,\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    removeUnsavedRule = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n        this.setState({\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    getRuleShortData = ({ _break, template, words, ack, args, name, id }) => ({\r\n        words: words || '',\r\n        ack: ack?.default || '',\r\n        args: args?.map(arg => arg.default) || [],\r\n        _break,\r\n        template,\r\n        name,\r\n        id,\r\n    });\r\n\r\n    clearStateOnConfirmModalUnmount = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n\r\n        this.setState({\r\n            pendingSelectedRuleId: false,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    isLargeScreen = isWidthUp('lg', this.props.width);\r\n    isMdScreen = isWidthUp('md', this.props.width);\r\n    isSmScreen = isWidthUp('sm', this.props.width);\r\n    isMobileScreen = isWidthUp('xs', this.props.width);\r\n\r\n    toggleLeftBar = () => {\r\n        window.localStorage.setItem('App.menuHidden', !this.state.isLeftBarHidden);\r\n        this.setState({\r\n            isLeftBarHidden: !this.state.isLeftBarHidden,\r\n        });\r\n    };\r\n\r\n    renderModalDialog() {\r\n        return this.state.isOpen ? (\r\n            <Modal\r\n                key=\"modal\"\r\n                commands={this.commands}\r\n                isEdit={this.state.isEdit}\r\n                handleSubmitOnCreate={this.handleSubmitOnCreate}\r\n                handleSubmitOnEdit={this.handleSubmitOnEdit}\r\n                handleClose={this.handleClose}\r\n                isOpen={this.state.isOpen}\r\n                currentRules={this.state.currentRules}\r\n                selectedRule={this.state.selectedRule}\r\n                finishEdit={this.finishEdit}\r\n            />\r\n        ) : null;\r\n    }\r\n    render() {\r\n        console.log(this.state);\r\n        const { classes } = this.props;\r\n        const { currentRules, selectedRule, isLeftBarHidden } = this.state;\r\n\r\n        if (false && this.isMobileScreen) {\r\n            return [\r\n                <Drawer\r\n                    anchor=\"left\"\r\n                    open={this.state.isLeftBarHidden}\r\n                    onClose={() => this.setState({ isLeftBarHidden: false })}>\r\n                    <LeftBar\r\n                        handleOpen={this.handleOpen}\r\n                        rules={currentRules}\r\n                        moveRule={this.moveRule}\r\n                        handleEdit={this.handleEdit}\r\n                        selectRule={this.selectRule}\r\n                        selectedRule={selectedRule}\r\n                        removeRule={this.removeRule}\r\n                        settings={this.state.settings}\r\n                        socket={this.props.socket}\r\n                        saveSettings={this.saveSettings}\r\n                        theme={this.props.theme}\r\n                        toggleLeftBar={this.toggleLeftBar}\r\n                        unsavedRules={this.state.unsavedRules}\r\n                    />\r\n                </Drawer>,\r\n                this.state.settings ? (\r\n                    <RightBar\r\n                        selectedRule={selectedRule}\r\n                        socket={this.props.socket}\r\n                        updateCurrentRules={this.updateCurrentRules}\r\n                        updateConfig={this.updateConfig}\r\n                        revertChangesFromConfig={this.revertChangesFromConfig}\r\n                        pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                        unsavedRules={this.state.unsavedRules}\r\n                        selectRule={this.selectRule}\r\n                        clearStateOnConfirmModalUnmount={this.clearStateOnConfirmModalUnmount}\r\n                        lang={this.state.settings.language}\r\n                        setUnsavedRule={this.setUnsavedRule}\r\n                        removeUnsavedRule={this.removeUnsavedRule}\r\n                        toggleLeftBar={this.toggleLeftBar}\r\n                        isLeftBarHidden={this.state.isLeftBarHidden}\r\n                    />\r\n                ) : null,\r\n            ];\r\n        } else {\r\n            return [\r\n                <SplitterLayout\r\n                    key=\"splitterLayout\"\r\n                    customClassName={clsx(\r\n                        isLeftBarHidden ? classes.hidden : classes.opened,\r\n                        classes.layout\r\n                    )}\r\n                    primaryMinSize={350}\r\n                    primaryIndex={1}\r\n                    secondaryMinSize={350}\r\n                    onSecondaryPaneSizeChange={size => (this.menuSize = parseFloat(size))}\r\n                    onDragEnd={() => {\r\n                        window.localStorage.setItem('App.menuSize', this.menuSize.toString());\r\n                    }}\r\n                    secondaryInitialSize={this.menuSize}>\r\n                    <LeftBar\r\n                        handleOpen={this.handleOpen}\r\n                        rules={currentRules}\r\n                        moveRule={this.moveRule}\r\n                        handleEdit={this.handleEdit}\r\n                        selectRule={this.selectRule}\r\n                        selectedRule={selectedRule}\r\n                        removeRule={this.removeRule}\r\n                        settings={this.state.settings}\r\n                        socket={this.props.socket}\r\n                        saveSettings={this.saveSettings}\r\n                        theme={this.props.theme}\r\n                        unsavedRules={this.state.unsavedRules}\r\n                    />\r\n                    {this.state.settings && (\r\n                        <RightBar\r\n                            selectedRule={selectedRule}\r\n                            socket={this.props.socket}\r\n                            updateCurrentRules={this.updateCurrentRules}\r\n                            updateConfig={this.updateConfig}\r\n                            revertChangesFromConfig={this.revertChangesFromConfig}\r\n                            pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            selectRule={this.selectRule}\r\n                            clearStateOnConfirmModalUnmount={this.clearStateOnConfirmModalUnmount}\r\n                            lang={this.state.settings.language}\r\n                            setUnsavedRule={this.setUnsavedRule}\r\n                            removeUnsavedRule={this.removeUnsavedRule}\r\n                            toggleLeftBar={this.toggleLeftBar}\r\n                            isLeftBarHidden={this.state.isLeftBarHidden}\r\n                        />\r\n                    )}\r\n                </SplitterLayout>,\r\n                this.renderModalDialog(),\r\n            ];\r\n        }\r\n    }\r\n}\r\n\r\nLayout.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    readConfig: PropTypes.func.isRequired,\r\n    saveConfig: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(withWidth()(Layout));\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Layout from './components/Layout';\r\nimport isEqual from 'lodash.isequal';\r\n\r\n// Icons\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    logo: {\r\n        width: 32,\r\n        height: 32,\r\n        padding: theme.spacing(1),\r\n        display: 'inline-block',\r\n    },\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        super(props);\r\n        this.translations = {\r\n            en: require('./i18n/en'),\r\n            de: require('./i18n/de'),\r\n            ru: require('./i18n/ru'),\r\n            pt: require('./i18n/pt'),\r\n            nl: require('./i18n/nl'),\r\n            fr: require('./i18n/fr'),\r\n            it: require('./i18n/it'),\r\n            es: require('./i18n/es'),\r\n            pl: require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        // init translations\r\n        I18n.setTranslations(this.translations);\r\n        I18n.setLanguage(\r\n            (navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase()\r\n        );\r\n    }\r\n\r\n    onConnectionReady() {\r\n        const newState = {};\r\n\r\n        this.socket\r\n            .getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n                return this.readConfig();\r\n            })\r\n            .then(config => {\r\n                console.log(config);\r\n                this.setState({ config, ready: true });\r\n                if (config.language !== I18n.getLanguage() && config.language) {\r\n                    I18n.setLanguage(config.language);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    readConfig() {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(config => {\r\n                const native = config.native || {};\r\n                native.rules = native.rules || [];\r\n                native.sayitInstance = native.sayitInstance || '';\r\n                native.language = native.language || '';\r\n                native.processorId = native.processorId || '';\r\n                native.processorTimeout = native.processorTimeout || 1000;\r\n                return native;\r\n            });\r\n    }\r\n\r\n    saveConfig(config) {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(obj => {\r\n                if (!isEqual(obj.native, config)) {\r\n                    obj.native = config;\r\n                    return this.socket.setObject(\r\n                        'system.adapter.' + this.adapterName + '.' + this.instance,\r\n                        obj\r\n                    );\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.config) {\r\n            return (\r\n                <MuiThemeProvider theme={this.state.theme}>\r\n                    <Loader theme={this.state.themeType} />\r\n                </MuiThemeProvider>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <MuiThemeProvider theme={this.state.theme}>\r\n                <div className=\"App\">\r\n                    {\r\n                        // just an example\r\n                        /*  this.state.config.rules.map(rule => (\r\n                            <div className={this.props.classes.rule}>{JSON.stringify(rule)}</div>\r\n                        )) */\r\n                    }\r\n                    <Layout\r\n                        theme={this.state.theme}\r\n                        socket={this.socket}\r\n                        readConfig={this.readConfig.bind(this)}\r\n                        saveConfig={this.saveConfig.bind(this)}\r\n                    />\r\n                    {this.renderError()}\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport { version } from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'text2command';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log('iobroker.' + window.adapterName + '@' + version + ' using theme \"' + themeName + '\"');\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nconsole.log(theme(themeName));\r\n\r\n// if not local development\r\nif (window.location.host !== 'localhost:3000' && false) {\r\n    Sentry.init({\r\n        dsn: 'https://needToGetTheNumber@sentry.iobroker.net/86',\r\n        release: 'iobroker.' + window.adapterName + '@' + version,\r\n        integrations: [new SentryIntegrations.Dedupe()],\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}