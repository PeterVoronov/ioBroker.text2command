{"version":3,"sources":["serviceWorker.js","components/Rule.js","components/LeftBar.js","components/RightBar.js","components/CreateRuleDialog.js","components/Layout.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Rule","React","forwardRef","props","ref","name","handleEdit","rule","isDragging","connectDragSource","connectDropTarget","id","selectRule","selectedRule","_break","matchingRules","unsavedRules","index","theme","removeMatched","words","classes","makeStyles","listItem","cursor","transition","position","listItemText","color","palette","text","primary","secondary","textOverflow","overflow","dot","backgroundColor","top","right","width","height","borderRadius","maximize","dark","marginTop","spacing","ruleButton","paddingTop","elementRef","useRef","opacity","useImperativeHandle","getNode","current","selectRuleMemo","useCallback","handleEditMemo","useState","bg","setBg","useEffect","length","matchingRule","find","item","indexOf","setTimeout","timer","background","default","style","ListItem","onClick","selected","className","clsx","ListItemText","ListItemIcon","Tooltip","title","I18n","t","IconButton","Box","ItemTypes","DropTarget","hover","monitor","component","node","dragIndex","getItem","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","hoverClientY","getClientOffset","y","moveRule","connect","dropTarget","DragSource","beginDrag","dragSource","CustomTooltip","withStyles","tooltip","fontSize","LeftBar","textCommand","isSettingsDialogOpen","isConfirmRemoveDialogOpen","isSearchActive","filteredRules","searchedValue","localSettings","language","processorId","processorTimeout","sayitInstance","toast","alive","getDefaultSettings","setState","settings","onAlive","val","onResponse","toastError","socket","getState","instance","handleTextCommand","event","target","value","testTimer","clearTimeout","matched","findMatchingRules","map","number","handleSubmit","iconPlay","key","err","handleOpenSettingsModal","handleDialogSelectIdSubmit","selectedSettingsName","handleDelete","removeRule","handleCloseConfirmRemoveDialog","handleSearch","matchedRules","rules","filter","toLowerCase","includes","toggleSearch","a","createSettingsModal","handleClose","isSettingsWasNotSaved","handleChange","undefined","checked","Dialog","open","onClose","fullWidth","onExited","DialogTitle","Typography","variant","align","DialogContent","noValidate","autoComplete","FormControl","root","settingsItem","InputLabel","Select","width100","onChange","MenuItem","Children","toArray","option","TextField","label","showDialogSelectId","helperText","e","FormControlLabel","control","Checkbox","writeEveryAnswer","DialogActions","Button","saveSettings","mainIcons","icon","handler","handleOpen","createIcons","iconsData","this","subscribeState","document","getElementsByClassName","scrollIntoView","unsubscribeState","prevProps","prevState","findMatched","JSON","parse","stringify","imagePrefix","onOk","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","elevation","severity","isMobile","closeDrawer","settingsDialog","renderedRules","additionalIcons","push","main","Toolbar","toolbar","search","InputProps","endAdornment","autoFocus","closeBtn","flexGrow","iconNotAlive","DndProvider","backend","HTML5Backend","List","list","test","size","onKeyDown","inputProps","padding","play","renderConfirmDialog","renderSelectIdDialog","renderToast","Component","boxSizing","minWidth","overflowX","overflowY","header","minHeight","border","divider","textInput","breakpoints","down","settingsTitle","maxWidth","marginBottom","settingsContent","flexDirection","display","common","white","float","flexBasis","RightBar","defaultState","editable","args","ack","localRule","showDialog","createConfirmModalActions","updateConfig","pendingSelectedRuleId","clearStateOnConfirmModalUnmount","revertChangesFromConfig","cancelSavingChanges","closeConfirmDialog","dontSaveAndGo","handleSaveAndGo","submitForm","saveAndGoBtn","btnDanger","createSaveSettingsForm","handleSave","isLocalStateWasUpdated","revertChanges","emptyButtons","confirmChanges","createInput","type","note","disabled","keywords","onSwitchChange","textField","switchControl","Switch","createOptionsData","handlers","isKeyWordsDisabled","keywordsText","breakOnSwitch","handleSetDialogClick","bind","param1OnSwitch","param2Text","param2OnSwitch","confirmText","confirmOnSwitch","createInputHandlers","_this","arg","unsavedRule","isEqual","wasChangedGlobally","removeUnsavedRule","setUnsavedRule","lang","forceUpdate","isLeftBarHidden","toggleLeftBar","mt","box","boxMobile","boxDesktop","Paper","container","mx","mainTitle","justifyContent","mb","row","toggleIcon","PureComponent","margin","alignItems","textAlign","marginLeft","marginRight","left","noRulesText","light","CreateRuleDialog","defaultRule","isDisabled","setRuleOnMount","isEdit","cleanState","finishEdit","getAvailableOptions","commands","currentRules","uniqueOptions","unique","concat","getUniqueName","ruleName","matchingNames","slice","isUnique","lastChar","createForm","FormGroup","shrink","isError","labelId","select","existingNames","setDialogContent","handleSubmitOnCreate","handleSubmitOnEdit","onSubmitHandler","isOpen","onEnter","Layout","getSelectedLanguageCommands","getLanguage","Object","entries","command","rest","template","sourceRule","_","sortRules","splice","uuid","shortDataRule","isUnsavedChanges","values","updateCurrentRules","isLeftBarOpen","editableRule","updatedRule","updatedRuleOptions","deleteRuleFromConfig","readConfig","newConfig","saveConfig","updatedRules","currentSelectedRule","ids","updatedCurrentRules","getRuleShortData","getDataFromConfig","obj","ready","localStorage","isRuleWasUpdatedGlobally","localeSettings","closeModal","setItem","menuSize","parseFloat","rulesWithId","en","setLanguage","Fragment","Drawer","anchor","renderModalDialog","customClassName","hidden","opened","layout","primaryMinSize","primaryIndex","secondaryMinSize","onSecondaryPaneSizeChange","onDragEnd","toString","secondaryInitialSize","withWidth","App","extendedProps","translations","require","newState","getSystemConfig","systemConfig","showError","getObject","adapterName","native","setObject","renderError","themeType","GenericApp","logo","themeName","Utils","getThemeName","version","host","Sentry","dsn","release","integrations","SentryIntegrations","build","ReactDOM","render","onThemeChange","_theme","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2d7b9f71.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === \"localhost\" ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === \"[::1]\" ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n);\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\twindow.addEventListener(\"load\", () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\r\n\t\t\t\t\t\t\t\"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n\t\t\t\t\t);\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing;\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\r\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t\t});\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get(\"content-type\");\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload();\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config);\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\r\n\t\t\t);\r\n\t\t});\r\n}\r\n\r\nexport function unregister() {\r\n\tif (\"serviceWorker\" in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister();\r\n\t\t});\r\n\t}\r\n}\r\n","import React, {\r\n    useRef,\r\n    useImperativeHandle,\r\n    useCallback,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { DropTarget, DragSource } from 'react-dnd';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Box from '@material-ui/core/Box';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport MaximizeIcon from '@material-ui/icons/Maximize';\r\n\r\nconst Rule = React.forwardRef((props, ref) => {\r\n    const {\r\n        name,\r\n        handleEdit,\r\n        rule,\r\n        isDragging,\r\n        connectDragSource,\r\n        connectDropTarget,\r\n        id,\r\n        selectRule,\r\n        selectedRule,\r\n        _break,\r\n        matchingRules,\r\n        unsavedRules,\r\n        index,\r\n        theme,\r\n        removeMatched,\r\n        words,\r\n    } = props;\r\n\r\n    const classes = makeStyles({\r\n        listItem: {\r\n            cursor: 'pointer',\r\n            transition: 'background-color 0.3s linear',\r\n            position: 'relative',\r\n        },\r\n        listItemText: {\r\n            '& span': {\r\n                color: theme.palette.text.primary,\r\n            },\r\n            '& p': {\r\n                color: theme.palette.text.secondary,\r\n                textOverflow: 'ellipsis',\r\n                overflow: 'hidden',\r\n            },\r\n        },\r\n        dot: {\r\n            position: 'absolute',\r\n            backgroundColor: 'red',\r\n            top: 5,\r\n            right: 15,\r\n            width: 10,\r\n            height: 10,\r\n            borderRadius: '50%',\r\n        },\r\n        maximize: {\r\n            color: theme.palette.error?.dark,\r\n            marginTop: theme.spacing(1),\r\n        },\r\n        ruleButton: {\r\n            paddingTop: theme.spacing(1.5),\r\n        }\r\n    })();\r\n\r\n    const elementRef = useRef(null);\r\n    connectDragSource(elementRef);\r\n    connectDropTarget(elementRef);\r\n    const opacity = isDragging ? 0 : 1;\r\n    useImperativeHandle(ref, () => ({\r\n        getNode: () => elementRef.current,\r\n    }));\r\n\r\n    const selectRuleMemo = useCallback(() => selectRule(id), [id, selectRule]);\r\n    const handleEditMemo = useCallback(() => handleEdit(id), [id, handleEdit]);\r\n\r\n    const [bg, setBg] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (matchingRules.length) {\r\n            const matchingRule = matchingRules.find(item => item.indexOf === index);\r\n            if (matchingRule) {\r\n                setTimeout(() => setBg(theme?.palette?.secondary.dark), matchingRule.timer);\r\n                setTimeout(() => {\r\n                    setBg(selectedRule.id === id ? theme?.palette?.background?.default : '');\r\n                    if (_break || index === matchingRules[matchingRules.length - 1].indexOf) removeMatched();\r\n                }, 1500 * (matchingRule.index + 1));\r\n            } // only when matching rules have been changed\r\n        } // eslint-disable-next-line\r\n    }, [matchingRules]);\r\n\r\n    let secondary = rule !== name ? rule || '' : '';\r\n    secondary += `${secondary ? ' ' : ''}[${words}]`;\r\n    return <div\r\n        ref={elementRef}\r\n        style={{\r\n            opacity,\r\n            backgroundColor: bg,\r\n        }}>\r\n        <ListItem\r\n            onClick={selectRuleMemo}\r\n            selected={selectedRule?.id === id}\r\n            className={clsx(classes.listItem, selectedRule?.id === id && 'rule-selected')}>\r\n            <ListItemText\r\n                primary={name}\r\n                secondary={secondary}\r\n                className={classes.listItemText}\r\n            />\r\n            <ListItemIcon>\r\n                {\r\n                    _break ?\r\n                        <Tooltip title={I18n.t('Interrupt processing')}>\r\n                            <MaximizeIcon className={clsx(classes.ruleButton, classes.maximize)} />\r\n                        </Tooltip>\r\n                    :\r\n                        <Tooltip title={I18n.t('Do not interrupt processing')}><ArrowDownwardIcon className={classes.ruleButton} color=\"primary\"/></Tooltip>\r\n                }\r\n                <Tooltip title={I18n.t('Edit name or type of rule')}><IconButton onClick={handleEditMemo}><EditIcon /></IconButton></Tooltip>\r\n            </ListItemIcon>\r\n            {unsavedRules[id] && <Box className={classes.dot} />}\r\n        </ListItem>\r\n    </div>;\r\n});\r\n\r\nconst ItemTypes = {\r\n    RULE: 'rule',\r\n};\r\n\r\nexport default DropTarget(\r\n    ItemTypes.RULE,\r\n    {\r\n        hover(props, monitor, component) {\r\n            if (!component) {\r\n                return null;\r\n            }\r\n\r\n            const node = component.getNode();\r\n            if (!node) {\r\n                return null;\r\n            }\r\n            const dragIndex = monitor.getItem().index;\r\n            const hoverIndex = props.index;\r\n            if (dragIndex === hoverIndex) {\r\n                return;\r\n            }\r\n\r\n            const hoverBoundingRect = node.getBoundingClientRect();\r\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n            const clientOffset = monitor.getClientOffset();\r\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n                return;\r\n            }\r\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n                return;\r\n            }\r\n            props.moveRule(dragIndex, hoverIndex);\r\n\r\n            monitor.getItem().index = hoverIndex;\r\n        },\r\n    },\r\n    connect => ({ connectDropTarget: connect.dropTarget() })\r\n)(\r\n    DragSource(\r\n        ItemTypes.RULE,\r\n        {\r\n            beginDrag: props => ({\r\n                id: props.id,\r\n                index: props.index,\r\n            }),\r\n        },\r\n        (connect, monitor) => ({\r\n            connectDragSource: connect.dragSource(),\r\n            isDragging: monitor.isDragging(),\r\n        })\r\n    )(Rule)\r\n);\r\n\r\nRule.propTypes = {\r\n    removeRule: PropTypes.func,\r\n    name: PropTypes.string.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    isDragging: PropTypes.bool,\r\n    connectDropTarget: PropTypes.func,\r\n    connectDragTarget: PropTypes.func,\r\n    _break: PropTypes.bool.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    matchingRules: PropTypes.array,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    unsavedRules: PropTypes.object,\r\n};\r\n","import React, { Component, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\n// Material UI Components\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport List from '@material-ui/core/List';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n// icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FormatClearIcon from '@material-ui/icons/FormatClear';\r\nimport ClearIcon from '@material-ui/icons/Close';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\n\r\nimport Rule from './Rule';\r\n\r\nconst styles = theme => ({\r\n    test: {\r\n        width: '100%',\r\n        boxSizing: 'border-box',\r\n        height: 64,\r\n    },\r\n    main: {\r\n        minWidth: 300,\r\n        overflow: 'hidden',\r\n        height: '100%',\r\n    },\r\n    toolbar: {\r\n        background: theme.palette.primary.main,\r\n        position: 'relative',\r\n    },\r\n    list: {\r\n        height: 'calc(100% - 64px - 64px - 18px)',\r\n        overflowX: 'hidden',\r\n        overflowY: 'auto',\r\n    },\r\n    root: {\r\n        width: 'calc(100% - 48px)',\r\n        // '& .MuiInputLabel-outlined-70.MuiInputLabel-marginDense-66': {\r\n        //     transform: '',\r\n        // },\r\n    },\r\n    header: {\r\n        minHeight: 44,\r\n        height: 'auto',\r\n        padding: theme.spacing(1.3),\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    textInput: {\r\n        width: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n        },\r\n    },\r\n    settingsTitle: {\r\n        fontSize: '20px',\r\n        maxWidth: 145,\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    settingsContent: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            display: 'flex',\r\n        },\r\n    },\r\n    closeBtn: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        color: theme.palette.common.white,\r\n    },\r\n    iconNotAlive: {\r\n        color: '#ffc10a',\r\n        float: 'right'\r\n    },\r\n    search: {\r\n        flexBasis: '80%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexBasis: '70%',\r\n        },\r\n    },\r\n    settingsItem: {\r\n        marginBottom: theme.spacing(3),\r\n    },\r\n    width100: {\r\n        width: '100%',\r\n    },\r\n});\r\n\r\nconst tooltipStyles = theme => ({\r\n    tooltip: {\r\n        fontSize: 14,\r\n    },\r\n});\r\n\r\nconst CustomTooltip = withStyles(tooltipStyles)(Tooltip);\r\n\r\nclass LeftBar extends Component {\r\n    state = {\r\n        textCommand: '',\r\n        matchingRules: [],\r\n        isSettingsDialogOpen: false,\r\n        isConfirmRemoveDialogOpen: false,\r\n        isSearchActive: false,\r\n        filteredRules: [],\r\n        searchedValue: '',\r\n        localSettings: {\r\n            language: '',\r\n            processorId: '',\r\n            processorTimeout: 1000,\r\n            sayitInstance: '',\r\n        },\r\n        toast: null,\r\n        alive: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.socket.subscribeState('text2command.' + this.props.instance + '.response', this.onResponse);\r\n        this.props.socket.subscribeState('system.adapter.text2command.' + this.props.instance + '.alive', this.onAlive);\r\n        if (this.props.selectedRule && this.props.selectedRule.id) {\r\n            //scroll to\r\n            setTimeout(() => {\r\n                const rules = window.document.getElementsByClassName('rule-selected');\r\n                if (rules.length) {\r\n                    rules[0].scrollIntoView()\r\n                }\r\n            }, 50);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.socket.unsubscribeState('text2command.' + this.props.instance + '.response', this.onResponse);\r\n        this.props.socket.unsubscribeState('system.adapter.text2command.' + this.props.instance + '.alive', this.onAlive);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.settings !== prevProps.settings && this.props.settings) {\r\n            this.getDefaultSettings();\r\n        }\r\n    }\r\n\r\n    getDefaultSettings = () => {\r\n        this.setState({\r\n            localSettings: {\r\n                ...this.props.settings,\r\n            },\r\n        });\r\n    };\r\n\r\n    onAlive = (id, state) => {\r\n        if (state && state.val) {\r\n            !this.state.alive && this.setState({alive: true});\r\n        } else {\r\n            this.state.alive && this.setState({alive: false});\r\n        }\r\n    };\r\n\r\n    onResponse = (id, state) => {\r\n        if (this.state.toast === null) {\r\n            this.setState({toast: '', toastError: false});\r\n        } else\r\n        if (state) {\r\n            if (state.val && state.val.match(/^Error\\.|^Fehler\\.|^Ошибка\\./)) {\r\n                this.props.socket.getState('text2command.' + this.props.instance + '.error')\r\n                    .then(state =>\r\n                        this.setState({toast: state && state.val ? state.val : (state.val || ''), toastError: true}));\r\n            } else {\r\n                this.setState({toast: state.val || '', toastError: false});\r\n            }\r\n        }\r\n    };\r\n\r\n    handleTextCommand = event => {\r\n        this.setState({textCommand: event.target.value}, () => {\r\n            this.testTimer && clearTimeout(this.testTimer);\r\n            this.testTimer = setTimeout(() => {\r\n                const matched = this.findMatchingRules();\r\n                this.setState({\r\n                    matchingRules: matched.map((number, index) => ({\r\n                        indexOf: number,\r\n                        timer: index * 1500,\r\n                        index,\r\n                    })),\r\n                });\r\n            }, 500);\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event, iconPlay) => {\r\n        if ((event && event.key === 'Enter') || iconPlay) {\r\n            this.props.socket.setState('text2command.' + this.props.instance + '.text', this.state.textCommand)\r\n                .catch(err => console.error(err));\r\n\r\n            if (!this.state.alive) {\r\n                this.setState({toast: I18n.t('Instance is not running'), toastError: true});\r\n            }\r\n        }\r\n    };\r\n\r\n    removeMatched = () => {\r\n        this.setState({\r\n            matchingRules: [],\r\n        });\r\n    };\r\n\r\n    findMatchingRules() {\r\n        const text = this.state.textCommand;\r\n        return text ? window.findMatched(text, JSON.parse(JSON.stringify(this.props.rules))) : [];\r\n    }\r\n\r\n    handleOpenSettingsModal = () => {\r\n        this.setState({\r\n            isSettingsDialogOpen: true,\r\n        });\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = (selected, selectedSettingsName) => {\r\n        this.setState({\r\n            localSettings: {\r\n                ...this.state.localSettings,\r\n                [selectedSettingsName]: selected,\r\n            },\r\n        });\r\n    };\r\n\r\n    handleDelete = () => {\r\n        this.props.removeRule(this.props.selectedRule.id);\r\n        this.handleCloseConfirmRemoveDialog();\r\n    };\r\n\r\n    handleCloseConfirmRemoveDialog = () => {\r\n        this.setState({\r\n            isConfirmRemoveDialogOpen: false,\r\n        });\r\n    };\r\n\r\n    handleSearch = event => {\r\n        const matchedRules = this.props.rules.filter(rule =>\r\n            rule.name.toLowerCase().includes(event.target.value.toLowerCase()));\r\n        this.setState({\r\n            filteredRules: matchedRules || [],\r\n            searchedValue: event.target.value,\r\n        });\r\n    };\r\n\r\n    toggleSearch = async () => {\r\n        await this.setState({\r\n            isSearchActive: !this.state.isSearchActive,\r\n        });\r\n    };\r\n\r\n    createSettingsModal = () => {\r\n        const { t } = I18n;\r\n        const options = ['en', 'de', 'ru'];\r\n        const { classes } = this.props;\r\n\r\n        const handleClose = () => {\r\n            this.setState({\r\n                isSettingsDialogOpen: false,\r\n                isSettingsWasNotSaved: true,\r\n            });\r\n        };\r\n\r\n        const submitSettings = () => {\r\n            this.props.saveSettings(this.state.localSettings, handleClose);\r\n        };\r\n\r\n        const handleChange = (event, name) => {\r\n            let value = event.target.checked !== undefined ? event.target.checked : event.target.value;\r\n            if (name === 'language' && value === 'system') {\r\n                value = '';\r\n            }\r\n\r\n            this.setState({\r\n                localSettings: {\r\n                    ...this.state.localSettings,\r\n                    [name]: value,\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <Dialog\r\n                open={this.state.isSettingsDialogOpen}\r\n                onClose={handleClose}\r\n                fullWidth\r\n                onExited={this.getDefaultSettings}>\r\n                <DialogTitle>\r\n                    <Typography variant=\"h4\" component=\"span\" align=\"center\">\r\n                        {t('Settings')}\r\n                    </Typography>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">{t('Language')}</InputLabel>\r\n                            <Select\r\n                                classes={{ root: classes.width100 }}\r\n                                onChange={event => handleChange(event, 'language')}\r\n                                value={\r\n                                    !this.state.localSettings.language\r\n                                        ? 'system'\r\n                                        : this.state.localSettings.language\r\n                                }>\r\n                                <MenuItem value=\"system\">{t('System')}</MenuItem>\r\n                                {Children.toArray(\r\n                                    options.map(option => (\r\n                                        <MenuItem value={option}>{t('lang_' + option)}</MenuItem>\r\n                                    ))\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t('Answer in id')}\r\n                                value={this.state.localSettings.sayitInstance}\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        showDialogSelectId: true,\r\n                                        selectedSettingsName: 'sayitInstance',\r\n                                    })\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t(`Processor's id`)}\r\n                                value={this.state.localSettings.processorId}\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        showDialogSelectId: true,\r\n                                        selectedSettingsName: 'processorId',\r\n                                    })\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <TextField\r\n                                label={t('Timeout for processor')}\r\n                                helperText={t('ms')}\r\n                                value={this.state.localSettings.processorTimeout}\r\n                                onChange={e => handleChange(e, 'processorTimeout')}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl fullWidth classes={{ root: classes.settingsItem }}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox checked={this.state.localSettings.writeEveryAnswer} onChange={e => handleChange(e, 'writeEveryAnswer')} />}\r\n                                label={t('Write to response by every command')}\r\n                            />\r\n                        </FormControl>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={submitSettings}>Ok</Button>\r\n                    <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n\r\n    mainIcons = [\r\n        {\r\n            icon: <AddIcon />,\r\n            handler: () => this.props.handleOpen(),\r\n            tooltip: I18n.t('Create rule'),\r\n        },\r\n        {\r\n            icon: <SettingsIcon />,\r\n            handler: () => this.handleOpenSettingsModal(),\r\n            tooltip: I18n.t('Settings'),\r\n        },\r\n        {\r\n            icon: <CachedIcon />,\r\n            handler: () => console.log('refresh'),\r\n            tooltip: I18n.t('Refresh'),\r\n        },\r\n    ];\r\n\r\n    createIcons = iconsData =>\r\n        iconsData.map(({ icon, handler, tooltip }, index) => (\r\n            <CustomTooltip title={tooltip} key={index}>\r\n                <IconButton onClick={handler}>{icon}</IconButton>\r\n            </CustomTooltip>\r\n        ));\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialogSelectId ? (\r\n            <DialogSelectID\r\n                imagePrefix={'../..'}\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={() => this.setState({ showDialogSelectId: false })}\r\n                onOk={selected =>\r\n                    this.handleDialogSelectIdSubmit(selected, this.state.selectedSettingsName)\r\n                }\r\n            />\r\n        ) : null;\r\n    }\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.isConfirmRemoveDialogOpen ? (\r\n            <Dialog\r\n                open={this.state.isConfirmRemoveDialogOpen}\r\n                onClose={this.handleCloseConfirmRemoveDialog}\r\n                fullWidth>\r\n                <DialogTitle>{I18n.t('Are you sure?')}</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography variant=\"h5\" component=\"h5\">\r\n                        {I18n.t('You want to delete') + ': '}\r\n                        <strong>{this.props.selectedRule.name}</strong>\r\n                    </Typography>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleDelete}>{I18n.t('Ok')}</Button>\r\n                        <Button onClick={this.handleCloseConfirmRemoveDialog} color=\"primary\">\r\n                            {I18n.t('Cancel')}\r\n                        </Button>\r\n                    </DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        ) : null;\r\n    }\r\n\r\n    renderToast() {\r\n        if (this.state.toast) {\r\n            return <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n                open={true}\r\n                autoHideDuration={4000}\r\n                onClose={() => this.setState({toast: ''})}\r\n            >\r\n                {\r\n                    this.state.toastError ?\r\n                        <Alert elevation={6} variant=\"filled\" onClose={() => this.setState({toast: ''})} severity=\"error\">{this.state.toast}</Alert>\r\n                        :\r\n                        <Alert elevation={6} variant=\"filled\" onClose={() => this.setState({toast: ''})} severity=\"success\">{this.state.toast}</Alert>\r\n                }\r\n            </Snackbar>\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedRule,\r\n            moveRule,\r\n            handleEdit,\r\n            rules,\r\n            selectRule,\r\n            classes,\r\n            isMobile,\r\n            closeDrawer,\r\n        } = this.props;\r\n        const { filteredRules, isSearchActive, searchedValue } = this.state;\r\n        const settingsDialog = this.createSettingsModal();\r\n        const renderedRules = isSearchActive && searchedValue.length ? filteredRules : rules;\r\n        const additionalIcons = [];\r\n\r\n        selectedRule &&\r\n            selectedRule.id &&\r\n            additionalIcons.push({\r\n                icon: !isSearchActive && <DeleteIcon />,\r\n                handler: () =>\r\n                    this.setState({\r\n                        isConfirmRemoveDialogOpen: true,\r\n                    }),\r\n                tooltip: I18n.t('Remove rule'),\r\n                key: 'delete',\r\n            });\r\n\r\n        rules.length &&\r\n            additionalIcons.push({\r\n                icon: isSearchActive ? <FormatClearIcon /> : <SearchIcon />,\r\n                handler: () => this.toggleSearch(),\r\n                tooltip: I18n.t('Search rule'),\r\n                key: 'search',\r\n            });\r\n\r\n        return <Box className={classes.main}>\r\n            <Toolbar position=\"static\" classes={{ root: classes.toolbar }}>\r\n                {isSearchActive ? (\r\n                    <TextField\r\n                        className={classes.search}\r\n                        onChange={this.handleSearch}\r\n                        value={this.state.searchedValue}\r\n                        InputProps={{\r\n                            endAdornment: this.state.searchedValue ? (\r\n                                <IconButton\r\n                                    onClick={() => this.setState({ searchedValue: '' })}>\r\n                                    <ClearIcon />\r\n                                </IconButton>\r\n                            ) : undefined,\r\n                        }}\r\n                        autoFocus\r\n                    />\r\n                ) : (\r\n                    <div>{this.createIcons(this.mainIcons)}</div>\r\n                )}\r\n                <div>{this.createIcons(additionalIcons)}</div>\r\n                {isMobile && (\r\n                    <IconButton className={classes.closeBtn} onClick={closeDrawer}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                )}\r\n                {!isSearchActive && !this.state.alive ? <div style={{flexGrow: 1}}/> : null}\r\n                {!isSearchActive && !this.state.alive ? <Tooltip title={I18n.t('Instance is not running')}><WarningIcon className={classes.iconNotAlive}/></Tooltip> : null}\r\n\r\n            </Toolbar>\r\n\r\n            <DndProvider backend={HTML5Backend}>\r\n                <List className={classes.list}>\r\n                    {renderedRules.map((rule, index) => (\r\n                        <Rule\r\n                            theme={this.props.theme}\r\n                            handleEdit={handleEdit}\r\n                            {...rule}\r\n                            index={index}\r\n                            moveRule={moveRule}\r\n                            key={rule.id}\r\n                            selectRule={selectRule}\r\n                            selectedRule={selectedRule}\r\n                            matchingRules={this.state.matchingRules}\r\n                            unsavedRules={this.props.unsavedRules}\r\n                            removeMatched={this.removeMatched}\r\n                        />\r\n                    ))}\r\n                </List>\r\n            </DndProvider>\r\n\r\n            <Toolbar className={classes.test} variant=\"dense\">\r\n                <TextField\r\n                    onChange={this.handleTextCommand}\r\n                    label={I18n.t('Test phrase')}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    className={clsx('outlined-basic', classes.root)}\r\n                    onKeyDown={this.handleSubmit}\r\n                    value={this.state.textCommand}\r\n                    inputProps={{\r\n                        style: {\r\n                            padding: '10px 10px',\r\n                        },\r\n                    }}\r\n                    InputProps={{\r\n                        endAdornment: this.state.textCommand ? (\r\n                            <IconButton onClick={() => this.setState({ textCommand: '' })}>\r\n                                <ClearIcon />\r\n                            </IconButton>\r\n                        ) : undefined,\r\n                    }}\r\n                />\r\n                <IconButton\r\n                    variant=\"outlined\"\r\n                    onClick={event => this.handleSubmit(event, true)}>\r\n                    <PlayArrowIcon className={classes.play} />\r\n                </IconButton>\r\n            </Toolbar>\r\n\r\n            {settingsDialog}\r\n\r\n            {this.renderConfirmDialog()}\r\n            {this.renderSelectIdDialog()}\r\n            {this.renderToast()}\r\n        </Box>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(LeftBar);\r\n\r\nLeftBar.propTypes = {\r\n    handleOpen: PropTypes.func.isRequired,\r\n    rules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n        })\r\n    ),\r\n    instance: PropTypes.number.isRequired,\r\n    moveRule: PropTypes.func.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string,\r\n    }),\r\n    removeRule: PropTypes.func,\r\n    handleEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    settings: PropTypes.object,\r\n    socket: PropTypes.object.isRequired,\r\n    saveSettings: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object,\r\n    toggleLeftBar: PropTypes.func,\r\n    isMobile: PropTypes.bool.isRequired,\r\n    closeDrawer: PropTypes.func,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\n\r\nimport { TextField, Switch, Typography, withStyles, Box } from '@material-ui/core';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport DialogSelectID from '@iobroker/adapter-react/Dialogs/SelectID';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        padding: 0,\r\n        margin: 0,\r\n        position: 'relative',\r\n    },\r\n    box: {\r\n        display: 'inline-flex',\r\n        justifyContent: 'space-around',\r\n        position: 'relative',\r\n        '& .outlined-basic': {\r\n            padding: '12px 10px',\r\n            //border: `2px solid ${theme.palette.grey[700]}`,\r\n        },\r\n        [theme.breakpoints.down('md')]: {\r\n            '& .outlined-basic': {\r\n                padding: 0,\r\n            },\r\n        },\r\n    },\r\n    boxMobile: {\r\n        padding: 0,\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n        height: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    boxDesktop: {\r\n        padding: theme.spacing(2),\r\n        width: 'calc(100% - ' + theme.spacing(4) + 'px)',\r\n        marginTop: 30,\r\n    },\r\n    container: {\r\n        width: 'calc(100% - 32px)',\r\n        padding: theme.spacing(2),\r\n        height: '100%',\r\n        overflow: 'auto',\r\n        [theme.breakpoints.down('md')]: {\r\n            width: 'calc(100% - ' + theme.spacing(3) + 'px)',\r\n            padding: theme.spacing(1),\r\n        },\r\n    },\r\n    textField: {\r\n        flexBasis: '60%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    },\r\n    submitForm: {\r\n        flexDirection: 'row',\r\n        margin: '10px auto 20px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%',\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexDirection: 'column',\r\n        },\r\n    },\r\n    mainTitle: {\r\n        marginBottom: '30px',\r\n    },\r\n    title: {\r\n        marginTop: 16,\r\n        [theme.breakpoints.down('md')]: {\r\n            maxWidth: 200,\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            maxWidth: 'none',\r\n        },\r\n    },\r\n    row: {\r\n        [theme.breakpoints.down('md')]: {\r\n            alignItems: 'center',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexDirection: 'column',\r\n            alignItems: 'flex-start',\r\n            textAlign: 'center',\r\n        },\r\n    },\r\n    btnDanger: {\r\n        marginLeft: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginLeft: 0,\r\n            marginTop: theme.spacing(0.5),\r\n        },\r\n        //backgroundColor: theme.palette.error?.dark,\r\n    },\r\n    saveAndGoBtn: {\r\n        marginRight: 20,\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginRight: 0,\r\n            marginBottom: theme.spacing(0.5),\r\n        },\r\n    },\r\n    toggleIcon: {\r\n        position: 'absolute',\r\n        opacity: 0.8,\r\n        top: 10,\r\n        left: 0,\r\n        backgroundColor: theme.palette.primary.main,\r\n        width: 20,\r\n        height: 25,\r\n        cursor: 'pointer',\r\n        padding: theme.spacing(1),\r\n        borderRadius: '0 5px 5px 0',\r\n    },\r\n    switchControl: {\r\n        paddingTop: theme.spacing(1),\r\n        flexBasis: '60%',\r\n    },\r\n    emptyButtons: {\r\n        height: 36,\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: 0,\r\n        },\r\n    },\r\n    noRulesText: {\r\n        fontSize: 24,\r\n        color: theme.palette.primary.light\r\n    },\r\n});\r\n\r\nclass RightBar extends PureComponent {\r\n    defaultState = {\r\n        words: I18n.t('Create Rule'),\r\n        name: I18n.t('Create Rule'),\r\n        _break: false,\r\n        editable: false,\r\n        args: [\r\n            {\r\n                default: I18n.t('Argument') + ' 1',\r\n            },\r\n            {\r\n                default: I18n.t('Argument') + ' 2',\r\n            },\r\n        ],\r\n        ack: {\r\n            name: '',\r\n            default: `${I18n.t('Confirmation text')}`,\r\n        },\r\n        id: 0,\r\n    };\r\n\r\n    state = {\r\n        localRule: null,\r\n        showDialog: false,\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if ((!props.selectedRule && state.localRule) ||\r\n            (props.selectedRule && !state.localRule) ||\r\n            (props.selectedRule?.id !== state.localRule?.id)) {\r\n            return {\r\n                localRule: {...props.selectedRule}\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            prevProps.selectedRule?.name !== this.props.selectedRule?.name ||\r\n            prevState.localRule?.name !== this.state.localRule?.name\r\n        ) {\r\n            if (!this.props.selectedRule || !this.props.selectedRule.name) {\r\n                this.setState({\r\n                    localRule: null,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    localRule: {\r\n                        ...this.props.selectedRule,\r\n                    },\r\n                });\r\n            }\r\n        } else if (this.state.isLocalStateWasUpdated) {\r\n            const unsavedRule = this.props.unsavedRules[this.state.localRule.id];\r\n\r\n            if (\r\n                isEqual(this.props.selectedRule, this.state.localRule) &&\r\n                !unsavedRule?.wasChangedGlobally\r\n            ) {\r\n                this.setState({\r\n                    isLocalStateWasUpdated: false,\r\n                });\r\n\r\n                if (!unsavedRule?.wasChangedGlobally) {\r\n                    this.props.removeUnsavedRule(this.state.localRule.id);\r\n                }\r\n            } else if (!unsavedRule && !this.props.pendingSelectedRuleId) {\r\n                this.props.setUnsavedRule(this.state.localRule.id);\r\n            }\r\n        } else if (\r\n            !this.state.isLocalStateWasUpdated &&\r\n            this.props.unsavedRules[this.state.localRule.id]\r\n        ) {\r\n            this.setState({\r\n                isLocalStateWasUpdated: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.pendingSelectedRuleId && this.state.isLocalStateWasUpdated) {\r\n            if (this.props.pendingSelectedRuleId === this.state.localRule.id) {\r\n                return;\r\n            }\r\n            this.setState({\r\n                confirmChanges: true,\r\n            });\r\n        }\r\n\r\n        if (this.props.lang !== prevProps.lang) {\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.localRule && this.props.selectedRule) {\r\n            this.setState({\r\n                localRule: this.props.selectedRule,\r\n            });\r\n        }\r\n    }\r\n\r\n    createConfirmModalActions = () => {\r\n        const { t } = I18n;\r\n        const {\r\n            updateConfig,\r\n            classes,\r\n            selectRule,\r\n            pendingSelectedRuleId,\r\n            clearStateOnConfirmModalUnmount,\r\n            revertChangesFromConfig,\r\n        } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const cancelSavingChanges = async () => {\r\n            await clearStateOnConfirmModalUnmount();\r\n            this.closeConfirmDialog();\r\n        };\r\n\r\n        const dontSaveAndGo = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount(localRule.id);\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        const handleSaveAndGo = async () => {\r\n            await updateConfig(localRule);\r\n            await selectRule(pendingSelectedRuleId);\r\n            await clearStateOnConfirmModalUnmount();\r\n\r\n            this.closeConfirmDialog();\r\n        };\r\n        return (\r\n            <FormControl className={classes.submitForm}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={handleSaveAndGo}\r\n                    color=\"primary\"\r\n                    className={classes.saveAndGoBtn}>\r\n                    {t('Save and go')}\r\n                </Button>\r\n                <Button onClick={dontSaveAndGo} variant=\"contained\" color=\"secondary\">\r\n                    {t(`Don't save and go`)}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.btnDanger}\r\n                    onClick={cancelSavingChanges}>\r\n                    {t('Cancel')}\r\n                </Button>\r\n            </FormControl>\r\n        );\r\n    };\r\n\r\n    createSaveSettingsForm = () => {\r\n        const { t } = I18n;\r\n        const { updateConfig, classes, revertChangesFromConfig, selectedRule } = this.props;\r\n        const { localRule } = this.state;\r\n\r\n        const handleSave = async () => {\r\n            await updateConfig(localRule);\r\n            this.setState({\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        const revertChanges = async () => {\r\n            await revertChangesFromConfig(localRule);\r\n\r\n            await this.setState({\r\n                localRule: selectedRule,\r\n                isLocalStateWasUpdated: false,\r\n            });\r\n        };\r\n\r\n        if (!this.state.isLocalStateWasUpdated) {\r\n            return <div className={this.props.classes.emptyButtons} />;\r\n        } else {\r\n            return (\r\n                <FormControl className={classes.submitForm}>\r\n                    <Button onClick={handleSave} variant=\"contained\" color=\"primary\">\r\n                        {t('Save')}\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        className={classes.btnDanger}\r\n                        onClick={revertChanges}>\r\n                        {t('Cancel')}\r\n                    </Button>\r\n                </FormControl>\r\n            );\r\n        }\r\n    };\r\n\r\n    closeConfirmDialog = () => {\r\n        this.setState({\r\n            isLocalStateWasUpdated: false,\r\n            confirmChanges: false,\r\n        });\r\n    };\r\n\r\n    createInput = ({\r\n        value,\r\n        label,\r\n        onChange,\r\n        type,\r\n        onClick,\r\n        note,\r\n        disabled = !this.state.localRule,\r\n        keywords,\r\n        key,\r\n        onSwitchChange,\r\n    }) => {\r\n        if ((value === undefined || value === null) && !label && !keywords) {\r\n            return null;\r\n        }\r\n        const { classes } = this.props;\r\n\r\n        return type !== 'checkbox' ?\r\n            <TextField\r\n                //label={label}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                disabled={disabled}\r\n                value={value}\r\n                helperText={note || ''}\r\n                onClick={onClick}\r\n                onChange={onChange}\r\n                key={key}\r\n                className={clsx('outlined-basic', classes.textField)}\r\n            />\r\n            :\r\n            <FormControl classes={{ root: classes.switchControl }}>\r\n                <Switch\r\n                    key={key}\r\n                    onClick={onSwitchChange}\r\n                    color={'primary'}\r\n                    disabled={disabled}\r\n                    checked={!!value}\r\n                />\r\n            </FormControl>\r\n        ;\r\n    };\r\n\r\n    createOptionsData = (state = this.state) => {\r\n        const {\r\n            localRule: { args, ack, editable, _break },\r\n        } = state;\r\n        const { t } = I18n;\r\n\r\n        const createInput = this.createInput;\r\n        const handlers = this.handlers;\r\n\r\n        const isKeyWordsDisabled = () => {\r\n            if (editable === undefined) {\r\n                return false;\r\n            } else if (editable === false) {\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        return [\r\n            {\r\n                title: t('Keywords'),\r\n                item: createInput({\r\n                    value: this.state.localRule?.words || '',\r\n                    onChange: handlers.keywordsText,\r\n                    keywords: true,\r\n                    disabled: isKeyWordsDisabled(),\r\n                    key: 'keywords',\r\n                }),\r\n                id: 1,\r\n            },\r\n            {\r\n                title: t('Interrupt processing'), //`${t('Break')}:`,\r\n                item: createInput({\r\n                    type: 'checkbox',\r\n                    value: _break,\r\n                    onSwitchChange: handlers.breakOnSwitch,\r\n                    key: 'break',\r\n                }),\r\n                id: 2,\r\n            },\r\n            {\r\n                title: args && args[0]?.name, //`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[0]?.default,\r\n                    label: args && args[0]?.name,\r\n                    type: args && args[0]?.type,\r\n                    onClick: this.handleSetDialogClick.bind(this, args && args[0]),\r\n                    onSwitchChange: handlers.param1OnSwitch,\r\n                    key: 'Param1',\r\n                }),\r\n                id: 3,\r\n            },\r\n            {\r\n                title: args && args[1]?.name, //`${t('Argument')}:`,\r\n                item: createInput({\r\n                    value: args && this.state.localRule.args[1]?.default,\r\n                    label: args && args[1]?.name,\r\n                    type: args && args[1]?.type,\r\n                    onChange: handlers.param2Text,\r\n                    onSwitchChange: handlers.param2OnSwitch,\r\n                    key: 'Param2',\r\n                }),\r\n                id: 4,\r\n            },\r\n            {\r\n                title: t('Confirmation text'),\r\n                item: createInput({\r\n                    value: ack && ack.default,\r\n                    label: ack && ack.name,\r\n                    note: t(\r\n                        'You can use %s, that will be replaced with current value of state. %u will be replaced by unit'\r\n                    ),\r\n                    type: ack && ack.type,\r\n                    key: 'confirmationText',\r\n                    onChange: handlers.confirmText,\r\n                    onSwitchChange: handlers.confirmOnSwitch,\r\n                }),\r\n                id: 5,\r\n            },\r\n        ];\r\n    };\r\n\r\n    createInputHandlers = () => {\r\n        const _this = this;\r\n\r\n        return {\r\n            keywordsText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        words: event.target.value,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param2Text(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            index > 0\r\n                                ? {\r\n                                      ...arg,\r\n                                      default: event.target.value,\r\n                                  }\r\n                                : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmText(event) {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: event.target.value,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param1OnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            !index ? { ...arg, default: !arg.default ? true : !arg.default } : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            param2OnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        args: _this.state.localRule.args.map((arg, index) =>\r\n                            index ? { ...arg, default: !arg.default ? true : !arg.default } : arg\r\n                        ),\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            confirmOnSwitch() {\r\n                _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        ack: {\r\n                            ..._this.state.localRule.ack,\r\n                            default: !_this.state.localRule.ack.default,\r\n                        },\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n            async breakOnSwitch() {\r\n                await _this.setState({\r\n                    localRule: {\r\n                        ..._this.state.localRule,\r\n                        _break: !_this.state.localRule._break,\r\n                    },\r\n                    isLocalStateWasUpdated: true,\r\n                });\r\n            },\r\n        };\r\n    };\r\n\r\n    handlers = this.createInputHandlers();\r\n\r\n    handleSetDialogClick = arg => {\r\n        if (arg.type === 'id') {\r\n            this.setState({\r\n                showDialog: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleDialogSelectIdSubmit = selected => {\r\n        this.setState({\r\n            localRule: {\r\n                ...this.state.localRule,\r\n                args: this.state.localRule.args.map((arg, index) =>\r\n                    !index\r\n                        ? {\r\n                              ...arg,\r\n                              default: selected,\r\n                          }\r\n                        : arg\r\n                ),\r\n            },\r\n            isLocalStateWasUpdated: true,\r\n        });\r\n    };\r\n\r\n    renderConfirmDialog() {\r\n        return this.state.confirmChanges ? (\r\n            <Dialog fullWidth open={this.state.confirmChanges} maxWidth={'md'}>\r\n                <DialogTitle>\r\n                    {I18n.t('Please confirm or cancel changes before leaving')}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>\r\n                        {I18n.t('You have changed rule') + ': '}{' '}\r\n                        <strong>{this.state.localRule.name}</strong>\r\n                    </Typography>\r\n                    <DialogActions>{this.createConfirmModalActions()}</DialogActions>\r\n                </DialogContent>\r\n            </Dialog>\r\n        ) : null;\r\n    }\r\n\r\n    renderSelectIdDialog() {\r\n        return this.state.showDialog ?\r\n            <DialogSelectID\r\n                imagePrefix={'../..'}\r\n                socket={this.props.socket}\r\n                title={'Select ID'}\r\n                onClose={id => {\r\n                    console.log(id);\r\n                    this.setState({ showDialog: false });\r\n                }}\r\n                onOk={this.handleDialogSelectIdSubmit}\r\n            />: null;\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            localRule,\r\n            isLocalStateWasUpdated,\r\n        } = this.state;\r\n\r\n        const { classes, isLeftBarHidden, toggleLeftBar } = this.props;\r\n        const name = localRule ? localRule.name : '';\r\n\r\n        if (!this.props.selectedRule) {\r\n            return null;\r\n        }\r\n\r\n\r\n        return <div className={classes.root}>\r\n            <Box mt=\"30px\" className={clsx(classes.box, this.props.isMobile ? classes.boxMobile : classes.boxDesktop)} key={this.props.selectedRule ? this.props.selectedRule.id : 'emptyLeft'}>\r\n                {localRule ?\r\n                    <Paper className={classes.container} mx=\"auto\">\r\n                        <Typography\r\n                            variant=\"h4\"\r\n                            align=\"center\"\r\n                            className={!isLocalStateWasUpdated ? classes.mainTitle : ''}>\r\n                            {name}\r\n                        </Typography>\r\n\r\n                        {this.createSaveSettingsForm()}\r\n\r\n                        {this.createOptionsData().map(({title, item, id}) => {\r\n                            if (!item) {\r\n                                return null;\r\n                            }\r\n\r\n                            return <Box\r\n                                display=\"flex\"\r\n                                justifyContent=\"space-between\"\r\n                                mb=\"10px\"\r\n                                key={id}\r\n                                className={classes.row}>\r\n                                <Typography\r\n                                    variant=\"h6\"\r\n                                    component=\"h6\"\r\n                                    align=\"left\"\r\n                                    className={classes.title}>\r\n                                    {title ? title + ':' : ''}\r\n                                </Typography>\r\n                                {item}\r\n                            </Box>;\r\n                        })}\r\n                    </Paper>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {this.renderSelectIdDialog()}\r\n                {this.renderConfirmDialog()}\r\n            </Box>\r\n\r\n            <Box className={classes.toggleIcon} onClick={toggleLeftBar}>\r\n                {isLeftBarHidden || this.props.isMobile ? <MenuIcon /> : <ArrowBackIcon />}\r\n            </Box>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RightBar);\r\n\r\nRightBar.propTypes = {\r\n    selectedRule: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        id: PropTypes.string,\r\n        rule: PropTypes.string,\r\n        ack: PropTypes.shape({\r\n            default: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n        }),\r\n        arg: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n                type: PropTypes.string,\r\n                default: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]),\r\n            })\r\n        ),\r\n        words: PropTypes.string,\r\n    }).isRequired,\r\n    socket: PropTypes.object.isRequired,\r\n    updateConfig: PropTypes.func.isRequired,\r\n    revertChangesFromConfig: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    selectRule: PropTypes.func.isRequired,\r\n    pendingSelectedRuleId: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n    clearStateOnConfirmModalUnmount: PropTypes.func.isRequired,\r\n    unsavedRules: PropTypes.object.isRequired,\r\n    setUnsavedRule: PropTypes.func.isRequired,\r\n    removeUnsavedRule: PropTypes.func.isRequired,\r\n    toggleLeftBar: PropTypes.func.isRequired,\r\n    isLeftBarHidden: PropTypes.bool,\r\n    isMobile: PropTypes.bool.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { DialogActions, Button, Select, TextField, MenuItem, withStyles } from '@material-ui/core';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = theme => ({\r\n    select: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2.5),\r\n    },\r\n    TextField: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n});\r\n\r\nclass CreateRuleDialog extends Component {\r\n    defaultRule = {\r\n        rule: I18n.t('Select rule'),\r\n        name: I18n.t('New rule'),\r\n        id: '',\r\n    };\r\n\r\n    state = {\r\n        localRule: this.defaultRule,\r\n        isDisabled: true,\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.cleanState();\r\n    }\r\n\r\n    setRuleOnMount = () => {\r\n        const { isEdit, selectedRule } = this.props;\r\n        if (isEdit) {\r\n            this.setState({\r\n                localRule: selectedRule,\r\n            });\r\n        }\r\n    };\r\n\r\n    cleanState = () => {\r\n        if (this.props.isEdit) {\r\n            this.props.finishEdit(this.state.localRule);\r\n        }\r\n        this.setState({\r\n            localRule: this.defaultRule,\r\n        });\r\n    };\r\n\r\n    getAvailableOptions = () => {\r\n        const { commands, currentRules, selectedRule, isEdit } = this.props;\r\n\r\n        const uniqueOptions = commands?.filter(\r\n            option => !(option.unique && currentRules.find(item => item?.rule === option.rule))\r\n        );\r\n\r\n        return selectedRule?.unique && isEdit ? uniqueOptions.concat(selectedRule) : uniqueOptions;\r\n    };\r\n\r\n    getUniqueName = ruleName => {\r\n        const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n        const matchingNames = existingNames.filter(\r\n            name => name.slice(0, name.length - 2) === ruleName\r\n        );\r\n        const isUnique = this.props.commands.find(\r\n            ({ rule, unique }) => rule === ruleName && unique\r\n        );\r\n\r\n        if (matchingNames.length) {\r\n            let name = matchingNames[matchingNames.length - 1];\r\n            let lastChar = name.slice(name.length - 1);\r\n\r\n            return name.slice(0, name.length - 1) + ++lastChar;\r\n        }\r\n\r\n        return isUnique ? ruleName : `${ruleName} 1`;\r\n    };\r\n\r\n    createForm = () => {\r\n        const { localRule } = this.state;\r\n        const { classes } = this.props;\r\n        const commands = this.getAvailableOptions();\r\n\r\n        const handleSelectChange = event =>\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    rule: event.target.value,\r\n                    name: this.getUniqueName(event.target.value),\r\n                    isError: '',\r\n                },\r\n            });\r\n\r\n        const handleInputChange = event => {\r\n            const existingNames = this.props.currentRules?.map(rule => rule?.name);\r\n\r\n            this.setState({\r\n                localRule: {\r\n                    ...localRule,\r\n                    name: event.target.value,\r\n                    isError: existingNames.includes(event.target.value)\r\n                        ? `${I18n.t('Name already exist')}`\r\n                        : '',\r\n                },\r\n            });\r\n        };\r\n\r\n        return (\r\n            <FormGroup>\r\n                <FormControl fullWidth>\r\n                    <InputLabel shrink id=\"rule\">\r\n                        {I18n.t('Rule')}\r\n                    </InputLabel>\r\n                    <Select\r\n                        onChange={handleSelectChange}\r\n                        value={localRule.rule}\r\n                        labelId={'rule'}\r\n                        className={classes.select}>\r\n                        {commands?.map(option => (\r\n                            <MenuItem key={option.rule} value={option.rule}>\r\n                                {option.rule}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label={this.state.localRule.isError || I18n.t('Name')}\r\n                    value={localRule.name}\r\n                    onChange={handleInputChange}\r\n                    error={!!this.state.localRule.isError}\r\n                    className={classes.TextField}/>\r\n            </FormGroup>\r\n        );\r\n    };\r\n\r\n    setDialogContent = () => {\r\n        const { handleClose, handleSubmitOnCreate, handleSubmitOnEdit, isEdit } = this.props;\r\n        const onSubmitHandler = !isEdit ? handleSubmitOnCreate : handleSubmitOnEdit;\r\n        return (\r\n            <DialogContent>\r\n                {this.createForm()}\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={onSubmitHandler.bind(\r\n                            this,\r\n                            this.state.localRule,\r\n                            this.state.localRule.isError\r\n                        )}\r\n                        disabled={!this.state.localRule.name || !this.state.localRule.rule || (this.state.localRule.name === this.defaultRule.name && this.state.localRule.rule === this.defaultRule.rule) ||\r\n                        (this.state.localRule.name === this.props.selectedRule?.name && this.state.localRule.rule === this.props.selectedRule?.rule)}>\r\n                        { I18n.t('Ok') }\r\n                    </Button>\r\n                    <Button onClick={handleClose}>{I18n.t('Cancel')}</Button>\r\n                </DialogActions>\r\n            </DialogContent>\r\n        );\r\n    };\r\n    render() {\r\n        return (\r\n            <Dialog\r\n                open={this.props.isOpen}\r\n                onClose={this.props.handleClose}\r\n                onExited={this.cleanState}\r\n                onEnter={this.setRuleOnMount}\r\n                fullWidth>\r\n                <DialogTitle>\r\n                    {I18n.t(!this.props.isEdit ? 'Create new rule' : 'Edit rule')}\r\n                </DialogTitle>\r\n                {this.setDialogContent()}\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(CreateRuleDialog);\r\n\r\nCreateRuleDialog.propTypes = {\r\n    handleClose: PropTypes.func.isRequired,\r\n    handleSubmitOnCreate: PropTypes.func.isRequired,\r\n    handleSubmitOnEdit: PropTypes.func.isRequired,\r\n    isEdit: PropTypes.bool.isRequired,\r\n    commands: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool.isRequired,\r\n        }).isRequired\r\n    ),\r\n    isOpen: PropTypes.bool.isRequired,\r\n    selectedRule: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        rule: PropTypes.string.isRequired,\r\n        unique: PropTypes.bool,\r\n    }),\r\n    currentRules: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            rule: PropTypes.string.isRequired,\r\n            unique: PropTypes.bool,\r\n        })\r\n    ).isRequired,\r\n    finishEdit: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\r\nimport 'react-splitter-layout/lib/index.css';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\n\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nimport LeftBar from './LeftBar';\r\nimport RightBar from './RightBar';\r\nimport CreateRuleDialog from './CreateRuleDialog';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nconst styles = theme => ({\r\n    layout: {\r\n        '& .layout-pane:first': {\r\n            overflow: 'hidden',\r\n        },\r\n    },\r\n    hidden: {\r\n        '& .layout-pane:first-child': {\r\n            width: '0 !important',\r\n        },\r\n        background: theme.palette.background.default,\r\n    },\r\n    opened: {\r\n        '& .layout-pane-primary': {\r\n            width: '',\r\n        },\r\n        overflow: 'hidden',\r\n        background: theme.palette.background.default,\r\n    },\r\n    noRulesText: {\r\n        fontSize: 24,\r\n        color: theme.palette.primary.light,\r\n        textAlign: 'center',\r\n        paddingTop: theme.spacing(2),\r\n    },\r\n});\r\n\r\nclass Layout extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.menuSize = parseFloat(window.localStorage.getItem('App.menuSize')) || 350;\r\n        this.state = {\r\n            currentRules: [],\r\n            isOpen: false,\r\n            isEdit: false,\r\n            selectedRule: null,\r\n            unsavedRules: {},\r\n            ready: false,\r\n            isLeftBarOpen: window.localStorage.getItem('App.menuHidden') === 'true',\r\n        };\r\n        this.commands = this.getSelectedLanguageCommands();\r\n        this.isMobile = this.props.width === 'sm' || this.props.width === 'xs';\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataFromConfig()\r\n            .then(({ rules, ...settings }) => {\r\n                const rulesWithId = rules.map(rule =>\r\n                    !rule.id || !rule.name\r\n                        ? {\r\n                              ...rule,\r\n                              id: rule.id || uuid(),\r\n                              name: rule.name || window.commands[rule.template]?.name[I18n.getLanguage()] || window.commands[rule.template]?.name.en,\r\n                          }\r\n                        : rule\r\n                );\r\n\r\n                if (!isEqual(rules, rulesWithId)) {\r\n                    this.props.saveConfig({ rules: rulesWithId, ...settings });\r\n                    setTimeout(() => this.setState({currentRules: rulesWithId}), 50);\r\n                }\r\n            });\r\n\r\n        if (this.isMobile) {\r\n            this.setState({\r\n                isLeftBarOpen: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.settings?.language !== this.state.lang && this.state.settings?.language) {\r\n            const lang = this.state.settings?.language;\r\n            I18n.setLanguage(lang);\r\n\r\n            this.commands = this.getSelectedLanguageCommands();\r\n        }\r\n\r\n        if (\r\n            prevState.selectedRule?.id !== this.state.selectedRule?.id &&\r\n            prevState.selectedRule?.id && this.state.selectedRule\r\n        ) {\r\n            localStorage.setItem('selectedRule', this.state.selectedRule.id);\r\n        }\r\n    }\r\n\r\n    getSelectedLanguageCommands = () => {\r\n        const lang = this.state?.settings?.language || I18n.getLanguage();\r\n\r\n        return [\r\n            { rule: I18n.t('Select rule'), unique: false },\r\n            ...Object.entries(window.commands).map(item => {\r\n                const [key, command] = item;\r\n                const { name, ...rest } = command;\r\n                const obj = {\r\n                    ...rest,\r\n                    rule: command?.name[lang],\r\n                    template: key,\r\n                    unique: command.unique,\r\n                    words: command.words && command.words[lang],\r\n                    args: command.args?.map(arg => ({\r\n                        ...arg,\r\n                        name: arg.name[lang] || '',\r\n                        default: arg.default || (arg.type === 'checkbox' ? false : ''),\r\n                    })),\r\n                    ack: command.ack && {\r\n                        ...command.ack,\r\n                        name: command.ack.name[lang],\r\n                        default: !command.ack?.default\r\n                            ? command.ack?.type === 'checkbox'\r\n                                ? false\r\n                                : ''\r\n                            : command.ack.default[lang],\r\n                    },\r\n                };\r\n\r\n                return obj;\r\n            }),\r\n        ];\r\n    };\r\n\r\n    commands = this.getSelectedLanguageCommands();\r\n\r\n    moveRule = (dragIndex, hoverIndex) => {\r\n        const { currentRules } = this.state;\r\n        const sourceRule = currentRules.find((_, index) => index === hoverIndex);\r\n        const sortRules = currentRules.filter((_, index) => index !== hoverIndex);\r\n        sortRules.splice(dragIndex, 0, sourceRule);\r\n        this.setState({ currentRules: sortRules });\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.setState({\r\n            isOpen: true,\r\n        });\r\n    };\r\n    handleClose = () => {\r\n        this.setState({ isOpen: false });\r\n    };\r\n\r\n    handleSubmitOnCreate = (selectedRule, isError) => {\r\n        if (isError) {\r\n            return;\r\n        }\r\n\r\n        const id = uuid();\r\n        const shortDataRule = {\r\n            ...selectedRule,\r\n            id,\r\n            _break: true,\r\n        };\r\n\r\n        const rule = {\r\n            ...this.commands.find(command => command.rule === shortDataRule.rule),\r\n            ...shortDataRule,\r\n        };\r\n        const isUnsavedChanges = Object.values(this.state.unsavedRules).length;\r\n\r\n        this.setState(\r\n            {\r\n                currentRules: [...this.state.currentRules, rule],\r\n                unsavedRules: {\r\n                    ...this.state.unsavedRules,\r\n                    [id]: {\r\n                        id,\r\n                        wasChangedGlobally: true,\r\n                    },\r\n                },\r\n                selectedRule: !isUnsavedChanges ? rule : this.state.selectedRule,\r\n            },\r\n            () => {\r\n                if (isUnsavedChanges) {\r\n                    this.selectRule(rule.id);\r\n                }\r\n            }\r\n        );\r\n\r\n        this.handleClose();\r\n    };\r\n\r\n    handleSubmitOnEdit = (selectedRule, isError) => {\r\n        if (isError) {\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [selectedRule.id]: {\r\n                    id: selectedRule.id,\r\n                    wasChangedGlobally: true,\r\n                },\r\n            },\r\n            currentRules: this.updateCurrentRules(selectedRule),\r\n        });\r\n        this.handleClose();\r\n    };\r\n\r\n    selectRule = id => {\r\n        const { selectedRule, currentRules } = this.state;\r\n\r\n        if (selectedRule.id === id) {\r\n            // ignore\r\n            if (this.isMobile) {\r\n                this.setState({isLeftBarOpen: false});\r\n            }\r\n        } else if (this.state.unsavedRules[selectedRule.id]) {\r\n            this.setState({\r\n                pendingSelectedRuleId: id,\r\n            });\r\n        } else {\r\n            const rule = currentRules.find(item => item.id === id);\r\n\r\n            this.setState({\r\n                selectedRule: rule,\r\n                isLeftBarOpen: this.isMobile ? false : this.state.isLeftBarOpen\r\n            });\r\n        }\r\n    };\r\n\r\n    updateCurrentRules = selectedRule => {\r\n        return this.state.currentRules.map(item =>\r\n            item.id === selectedRule.id ? selectedRule : item\r\n        );\r\n    };\r\n\r\n    handleEdit = () => {\r\n        this.setState({\r\n            isEdit: true,\r\n        });\r\n        this.handleOpen();\r\n    };\r\n\r\n    finishEdit = editableRule => {\r\n        let updatedRule;\r\n\r\n        const { rule, id, name, _break, template } = editableRule;\r\n        const initialSelectedRule = this.state.selectedRule;\r\n\r\n        if (initialSelectedRule.rule !== rule) {\r\n            const updatedRuleOptions = this.commands.find(command => command.rule === rule);\r\n            updatedRule = {\r\n                ...updatedRuleOptions,\r\n                name,\r\n                rule,\r\n                id,\r\n                _break,\r\n                template,\r\n            };\r\n        } else {\r\n            updatedRule = editableRule;\r\n        }\r\n\r\n        this.setState({\r\n            isEdit: false,\r\n            selectedRule: updatedRule,\r\n        });\r\n    };\r\n\r\n    removeRule = id => {\r\n        const deleteRuleFromConfig = async () => {\r\n            const config = await this.props.readConfig();\r\n            const { rules, ...settings } = config;\r\n            const newConfig = { rules: rules.filter(rule => rule.id !== id), ...settings };\r\n            this.props.saveConfig(newConfig);\r\n        };\r\n        const updatedRules = this.state.currentRules.filter(rule => rule.id !== id);\r\n        this.setState(\r\n            {\r\n                currentRules: updatedRules,\r\n                selectedRule: updatedRules.length ? updatedRules[updatedRules.length - 1] : null,\r\n            },\r\n            deleteRuleFromConfig\r\n        );\r\n    };\r\n\r\n    updateConfig = async currentSelectedRule => {\r\n        const { [currentSelectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === currentSelectedRule.id);\r\n        const updatedCurrentRules = this.updateCurrentRules(currentSelectedRule)\r\n\r\n        let updatedRules;\r\n        if (matchingRule) {\r\n            updatedRules = rules.map(rule =>\r\n                rule.id === currentSelectedRule.id\r\n                    ? this.getRuleShortData(currentSelectedRule)\r\n                    : rule\r\n            );\r\n        } else {\r\n            updatedRules = [...rules, this.getRuleShortData(currentSelectedRule)];\r\n        }\r\n\r\n        const newConfig = { rules: updatedRules, ...settings };\r\n        await this.props.saveConfig(newConfig);\r\n\r\n        this.setState({\r\n            selectedRule: currentSelectedRule || this.state.selectedRule || null,\r\n            currentRules: updatedCurrentRules,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    getDataFromConfig = () => {\r\n        return this.props.readConfig()\r\n            .then(config => {\r\n                const { rules, ...settings } = config;\r\n                const lang = I18n.getLanguage();\r\n\r\n                const currentRules = rules.map(rule => {\r\n                    const obj = window.commands[rule.template];\r\n\r\n                    return {\r\n                        ...obj,\r\n                        rule: obj?.name[lang],\r\n                        ack: {\r\n                            ...obj.ack,\r\n                            default: rule.ack || (obj.ack?.type === 'checkbox' ? false : ''),\r\n                            name: obj.ack?.name[lang],\r\n                        },\r\n                        args: obj.args?.map((arg, index) => ({\r\n                            ...arg,\r\n                            default: rule.args[index] || (arg?.type === 'checkbox' ? false : ''),\r\n                            name: arg?.name[lang] || '',\r\n                        })),\r\n                        name: rule.name || obj?.name[lang],\r\n                        words: rule.words,\r\n                        _break: rule._break,\r\n                        id: rule.id || uuid(),\r\n                        template: rule.template,\r\n                    };\r\n                });\r\n\r\n                this.setState({\r\n                    currentRules,\r\n                    ready: true,\r\n                    selectedRule:\r\n                        currentRules.find(rule =>\r\n                            rule.id === localStorage.getItem('selectedRule')) ||\r\n                        currentRules[currentRules.length - 1] ||\r\n                        null,\r\n                    settings,\r\n                });\r\n\r\n                return config;\r\n            });\r\n    };\r\n\r\n    revertChangesFromConfig = async selectedRule => {\r\n        const { currentRules } = this.state;\r\n        const { [selectedRule.id]: removedId, ...ids } = this.state.unsavedRules;\r\n        const config = await this.props.readConfig();\r\n        const { rules, ...settings } = config;\r\n\r\n        const matchingRule = rules.find(rule => rule.id === selectedRule.id);\r\n        const isRuleWasUpdatedGlobally = this.state.unsavedRules[selectedRule.id]\r\n            ?.wasChangedGlobally;\r\n\r\n        let updatedRules;\r\n        if (matchingRule && isRuleWasUpdatedGlobally) {\r\n            updatedRules = currentRules.map(rule =>\r\n                rule.id === matchingRule.id\r\n                    ? {\r\n                          ...rule,\r\n                          ack: {\r\n                              ...rule.ack,\r\n                              default: matchingRule.ack || '',\r\n                          },\r\n                          args: rule.args?.map(arg => ({\r\n                              ...arg,\r\n                              default: matchingRule.arg || '',\r\n                          })),\r\n                          rule: window.commands[matchingRule.template].name[I18n.getLanguage()],\r\n                          words: matchingRule.words || '',\r\n                          name: matchingRule.name || '',\r\n                          _break: matchingRule._break || true,\r\n                      }\r\n                    : rule\r\n            );\r\n        } else if (!matchingRule) {\r\n            updatedRules = currentRules.filter(rule => rule.id !== selectedRule.id);\r\n        }\r\n\r\n        await this.setState({\r\n            currentRules: updatedRules || currentRules,\r\n            selectedRule:\r\n                (isRuleWasUpdatedGlobally\r\n                    ? updatedRules.find(rule => rule.id === selectedRule.id)\r\n                    : this.state.selectedRule) || null,\r\n            settings,\r\n            unsavedRules: ids,\r\n        });\r\n\r\n        if (this.state.currentRules.length !== currentRules.length) {\r\n            this.setState({\r\n                selectedRule: this.state.currentRules[this.state.currentRules.length - 1] || null,\r\n            });\r\n        }\r\n    };\r\n\r\n    saveSettings = async (localeSettings, closeModal) => {\r\n        const config = await this.props.readConfig();\r\n        const { rules } = config;\r\n        this.setState({\r\n            settings: localeSettings,\r\n        });\r\n        const newConfig = { rules, ...localeSettings };\r\n        await this.props.saveConfig(newConfig);\r\n        closeModal();\r\n    };\r\n\r\n    setUnsavedRule = id => {\r\n        this.setState({\r\n            unsavedRules: {\r\n                ...this.state.unsavedRules,\r\n                [id]: {\r\n                    id,\r\n                    wasChangedGlobally: false,\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    removeUnsavedRule = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n        this.setState({\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    getRuleShortData = ({ _break, template, words, ack, args, name, id }) => ({\r\n        words: words || '',\r\n        ack: ack?.default || '',\r\n        args: args?.map(arg => arg.default) || [],\r\n        _break,\r\n        template,\r\n        name,\r\n        id,\r\n    });\r\n\r\n    clearStateOnConfirmModalUnmount = id => {\r\n        const { [id]: removedId, ...ids } = this.state.unsavedRules;\r\n\r\n        this.setState({\r\n            pendingSelectedRuleId: false,\r\n            unsavedRules: ids,\r\n        });\r\n    };\r\n\r\n    toggleLeftBar = () => {\r\n        window.localStorage.setItem('App.menuHidden', !this.state.isLeftBarOpen);\r\n        this.setState({\r\n            isLeftBarOpen: !this.state.isLeftBarOpen,\r\n        });\r\n    };\r\n\r\n    closeDrawer = () => {\r\n        this.setState({\r\n            isLeftBarOpen: false,\r\n        });\r\n    };\r\n\r\n    renderModalDialog() {\r\n        return this.state.isOpen ?\r\n            <CreateRuleDialog\r\n                key=\"modal\"\r\n                commands={this.commands}\r\n                isEdit={this.state.isEdit}\r\n                handleSubmitOnCreate={this.handleSubmitOnCreate}\r\n                handleSubmitOnEdit={this.handleSubmitOnEdit}\r\n                handleClose={this.handleClose}\r\n                isOpen={this.state.isOpen}\r\n                currentRules={this.state.currentRules}\r\n                selectedRule={this.state.selectedRule}\r\n                finishEdit={this.finishEdit}\r\n            />\r\n         : null;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state);\r\n        const { classes } = this.props;\r\n        const { currentRules, selectedRule, isLeftBarOpen } = this.state;\r\n\r\n        if (!this.state.ready) {\r\n            return null;\r\n        }\r\n\r\n        if (this.isMobile) {\r\n            return <React.Fragment>\r\n                <Drawer\r\n                    anchor=\"left\"\r\n                    open={this.state.isLeftBarOpen}\r\n                    onClose={this.closeDrawer}>\r\n                    <LeftBar\r\n                        handleOpen={this.handleOpen}\r\n                        rules={currentRules}\r\n                        moveRule={this.moveRule}\r\n                        handleEdit={this.handleEdit}\r\n                        selectRule={this.selectRule}\r\n                        selectedRule={selectedRule}\r\n                        removeRule={this.removeRule}\r\n                        settings={this.state.settings}\r\n                        socket={this.props.socket}\r\n                        saveSettings={this.saveSettings}\r\n                        theme={this.props.theme}\r\n                        toggleLeftBar={this.toggleLeftBar}\r\n                        unsavedRules={this.state.unsavedRules}\r\n                        isMobile={this.isMobile}\r\n                        closeDrawer={this.closeDrawer}\r\n                    />\r\n                </Drawer>\r\n                {this.state.settings && selectedRule ?\r\n                    <RightBar\r\n                        key={selectedRule.id}\r\n                        selectedRule={selectedRule}\r\n                        socket={this.props.socket}\r\n                        updateConfig={this.updateConfig}\r\n                        revertChangesFromConfig={this.revertChangesFromConfig}\r\n                        pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                        unsavedRules={this.state.unsavedRules}\r\n                        selectRule={this.selectRule}\r\n                        clearStateOnConfirmModalUnmount={this.clearStateOnConfirmModalUnmount}\r\n                        lang={this.state.settings.language}\r\n                        setUnsavedRule={this.setUnsavedRule}\r\n                        removeUnsavedRule={this.removeUnsavedRule}\r\n                        toggleLeftBar={this.toggleLeftBar}\r\n                        isLeftBarOpen={this.state.isLeftBarOpen}\r\n                        isMobile={this.isMobile}\r\n                    />\r\n                    :\r\n                    <div className={classes.noRulesText}>{I18n.t('Create a new rule with a \"+\" on the left')}</div>}\r\n\r\n                {this.renderModalDialog()}\r\n            </React.Fragment>;\r\n        } else {\r\n            return <React.Fragment>\r\n                <SplitterLayout\r\n                    key=\"splitterLayout\"\r\n                    customClassName={clsx(\r\n                        isLeftBarOpen ? classes.hidden : classes.opened,\r\n                        classes.layout\r\n                    )}\r\n                    primaryMinSize={350}\r\n                    primaryIndex={1}\r\n                    secondaryMinSize={350}\r\n                    onSecondaryPaneSizeChange={size => (this.menuSize = parseFloat(size))}\r\n                    onDragEnd={() => window.localStorage.setItem('App.menuSize', this.menuSize.toString())}\r\n                    secondaryInitialSize={this.menuSize}>\r\n                    <LeftBar\r\n                        handleOpen={this.handleOpen}\r\n                        rules={currentRules}\r\n                        moveRule={this.moveRule}\r\n                        handleEdit={this.handleEdit}\r\n                        selectRule={this.selectRule}\r\n                        selectedRule={selectedRule}\r\n                        removeRule={this.removeRule}\r\n                        instance={this.props.instance}\r\n                        settings={this.state.settings}\r\n                        socket={this.props.socket}\r\n                        saveSettings={this.saveSettings}\r\n                        theme={this.props.theme}\r\n                        unsavedRules={this.state.unsavedRules}\r\n                        isMobile={this.isMobile}\r\n                    />\r\n                    {this.state.settings && selectedRule ?\r\n                        <RightBar\r\n                            selectedRule={selectedRule}\r\n                            socket={this.props.socket}\r\n                            updateCurrentRules={this.updateCurrentRules}\r\n                            updateConfig={this.updateConfig}\r\n                            revertChangesFromConfig={this.revertChangesFromConfig}\r\n                            pendingSelectedRuleId={this.state.pendingSelectedRuleId}\r\n                            unsavedRules={this.state.unsavedRules}\r\n                            selectRule={this.selectRule}\r\n                            clearStateOnConfirmModalUnmount={this.clearStateOnConfirmModalUnmount}\r\n                            lang={this.state.settings.language}\r\n                            setUnsavedRule={this.setUnsavedRule}\r\n                            removeUnsavedRule={this.removeUnsavedRule}\r\n                            toggleLeftBar={this.toggleLeftBar}\r\n                            isLeftBarOpen={this.state.isLeftBarOpen}\r\n                            isMobile={this.isMobile}\r\n                        />\r\n                        :\r\n                        <div className={classes.noRulesText}>{I18n.t('Create a new rule with a \"+\" on the left')}</div>}\r\n                </SplitterLayout>\r\n                {this.renderModalDialog()}\r\n            </React.Fragment>;\r\n        }\r\n    }\r\n}\r\n\r\nLayout.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n    instance: PropTypes.number.isRequired,\r\n    readConfig: PropTypes.func.isRequired,\r\n    saveConfig: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(withWidth()(Layout));\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Layout from './components/Layout';\r\nimport isEqual from 'lodash.isequal';\r\n\r\n// Icons\r\n\r\nconst styles = theme => ({\r\n    root: {},\r\n    logo: {\r\n        width: 32,\r\n        height: 32,\r\n        padding: theme.spacing(1),\r\n        display: 'inline-block',\r\n    },\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {...props};\r\n        extendedProps.translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        super(props, extendedProps);\r\n    }\r\n\r\n    onConnectionReady() {\r\n        const newState = {};\r\n\r\n        this.socket\r\n            .getSystemConfig()\r\n            .then(systemConfig => {\r\n                newState.systemConfig = systemConfig;\r\n                return this.readConfig();\r\n            })\r\n            .then(config => {\r\n                console.log(config);\r\n                this.setState({ config, ready: true });\r\n                if (config.language !== I18n.getLanguage() && config.language) {\r\n                    I18n.setLanguage(config.language);\r\n                }\r\n            })\r\n            .catch(e => this.showError(e));\r\n    }\r\n\r\n    readConfig() {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(config => {\r\n                const native = config.native || {};\r\n                native.rules = native.rules || [];\r\n                native.sayitInstance = native.sayitInstance || '';\r\n                native.language = native.language || '';\r\n                native.processorId = native.processorId || '';\r\n                native.processorTimeout = native.processorTimeout || 1000;\r\n                return native;\r\n            });\r\n    }\r\n\r\n    saveConfig(config) {\r\n        return this.socket\r\n            .getObject('system.adapter.' + this.adapterName + '.' + this.instance)\r\n            .then(obj => {\r\n                if (!isEqual(obj.native, config)) {\r\n                    obj.native = config;\r\n                    return this.socket.setObject(\r\n                        'system.adapter.' + this.adapterName + '.' + this.instance,\r\n                        obj\r\n                    );\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.config || !this.state.ready) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                    <Loader theme={this.state.themeType} />\r\n                </MuiThemeProvider>;\r\n        }\r\n\r\n        return (\r\n            <MuiThemeProvider theme={this.state.theme}>\r\n                <div className=\"App\">\r\n                    <Layout\r\n                        theme={this.state.theme}\r\n                        socket={this.socket}\r\n                        instance={this.instance}\r\n                        readConfig={this.readConfig.bind(this)}\r\n                        saveConfig={this.saveConfig.bind(this)}\r\n                    />\r\n                    {this.renderError()}\r\n                </div>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport { version } from '../package.json';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\n\r\nwindow.adapterName = 'text2command';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log('iobroker.' + window.adapterName + '@' + version + ' using theme \"' + themeName + '\"');\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <App\r\n                onThemeChange={_theme => {\r\n                    themeName = _theme;\r\n                    build();\r\n                }}\r\n            />\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\n\r\n// if not local development\r\nif (window.location.host !== 'localhost:3000') {\r\n    Sentry.init({\r\n        dsn: 'https://9806f910556240219f831ecfe2ee3ad1@sentry.iobroker.net/87',\r\n        release: 'iobroker.' + window.adapterName + '@' + version,\r\n        integrations: [new SentryIntegrations.Dedupe()],\r\n    });\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}